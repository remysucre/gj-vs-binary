<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="24599"><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.07%)</title><rect x="0.0163%" y="229" width="0.0650%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="16"/><text x="0.2663%" y="239.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.35%)</title><rect x="0.1626%" y="213" width="0.3537%" height="15" fill="rgb(217,0,24)" fg:x="40" fg:w="87"/><text x="0.4126%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.04%)</title><rect x="1.5773%" y="197" width="0.0407%" height="15" fill="rgb(221,193,54)" fg:x="388" fg:w="10"/><text x="1.8273%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="1.6058%" y="181" width="0.0122%" height="15" fill="rgb(248,212,6)" fg:x="395" fg:w="3"/><text x="1.8558%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (30 samples, 0.12%)</title><rect x="1.6180%" y="197" width="0.1220%" height="15" fill="rgb(208,68,35)" fg:x="398" fg:w="30"/><text x="1.8680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (30 samples, 0.12%)</title><rect x="1.6180%" y="181" width="0.1220%" height="15" fill="rgb(232,128,0)" fg:x="398" fg:w="30"/><text x="1.8680%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (30 samples, 0.12%)</title><rect x="1.6180%" y="165" width="0.1220%" height="15" fill="rgb(207,160,47)" fg:x="398" fg:w="30"/><text x="1.8680%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.06%)</title><rect x="1.7440%" y="197" width="0.0569%" height="15" fill="rgb(228,23,34)" fg:x="429" fg:w="14"/><text x="1.9940%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (315 samples, 1.28%)</title><rect x="0.5244%" y="213" width="1.2805%" height="15" fill="rgb(218,30,26)" fg:x="129" fg:w="315"/><text x="0.7744%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.04%)</title><rect x="1.8050%" y="197" width="0.0366%" height="15" fill="rgb(220,122,19)" fg:x="444" fg:w="9"/><text x="2.0550%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (23 samples, 0.09%)</title><rect x="1.8050%" y="213" width="0.0935%" height="15" fill="rgb(250,228,42)" fg:x="444" fg:w="23"/><text x="2.0550%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (14 samples, 0.06%)</title><rect x="1.8415%" y="197" width="0.0569%" height="15" fill="rgb(240,193,28)" fg:x="453" fg:w="14"/><text x="2.0915%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (14 samples, 0.06%)</title><rect x="1.8415%" y="181" width="0.0569%" height="15" fill="rgb(216,20,37)" fg:x="453" fg:w="14"/><text x="2.0915%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.06%)</title><rect x="1.8415%" y="165" width="0.0569%" height="15" fill="rgb(206,188,39)" fg:x="453" fg:w="14"/><text x="2.0915%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.10%)</title><rect x="2.3212%" y="197" width="0.1016%" height="15" fill="rgb(217,207,13)" fg:x="571" fg:w="25"/><text x="2.5712%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (128 samples, 0.52%)</title><rect x="1.9066%" y="213" width="0.5203%" height="15" fill="rgb(231,73,38)" fg:x="469" fg:w="128"/><text x="2.1566%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="2.4594%" y="181" width="0.0122%" height="15" fill="rgb(225,20,46)" fg:x="605" fg:w="3"/><text x="2.7094%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.02%)</title><rect x="2.4716%" y="181" width="0.0203%" height="15" fill="rgb(210,31,41)" fg:x="608" fg:w="5"/><text x="2.7216%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.08%)</title><rect x="2.4269%" y="213" width="0.0772%" height="15" fill="rgb(221,200,47)" fg:x="597" fg:w="19"/><text x="2.6769%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.07%)</title><rect x="2.4310%" y="197" width="0.0732%" height="15" fill="rgb(226,26,5)" fg:x="598" fg:w="18"/><text x="2.6810%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="2.5042%" y="213" width="0.0163%" height="15" fill="rgb(249,33,26)" fg:x="616" fg:w="4"/><text x="2.7542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (60 samples, 0.24%)</title><rect x="2.5204%" y="213" width="0.2439%" height="15" fill="rgb(235,183,28)" fg:x="620" fg:w="60"/><text x="2.7704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (25 samples, 0.10%)</title><rect x="2.6627%" y="197" width="0.1016%" height="15" fill="rgb(221,5,38)" fg:x="655" fg:w="25"/><text x="2.9127%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.10%)</title><rect x="2.6627%" y="181" width="0.1016%" height="15" fill="rgb(247,18,42)" fg:x="655" fg:w="25"/><text x="2.9127%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (670 samples, 2.72%)</title><rect x="0.0854%" y="229" width="2.7237%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="670"/><text x="0.3354%" y="239.50">gj..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.04%)</title><rect x="2.7643%" y="213" width="0.0447%" height="15" fill="rgb(249,31,29)" fg:x="680" fg:w="11"/><text x="3.0143%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (87 samples, 0.35%)</title><rect x="2.8091%" y="229" width="0.3537%" height="15" fill="rgb(225,111,53)" fg:x="691" fg:w="87"/><text x="3.0591%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (50 samples, 0.20%)</title><rect x="3.1627%" y="229" width="0.2033%" height="15" fill="rgb(238,160,17)" fg:x="778" fg:w="50"/><text x="3.4127%" y="239.50"></text></g><g><title>gj`__rdl_alloc (8 samples, 0.03%)</title><rect x="3.3660%" y="229" width="0.0325%" height="15" fill="rgb(214,148,48)" fg:x="828" fg:w="8"/><text x="3.6160%" y="239.50"></text></g><g><title>gj`__rust_dealloc (57 samples, 0.23%)</title><rect x="3.4026%" y="229" width="0.2317%" height="15" fill="rgb(232,36,49)" fg:x="837" fg:w="57"/><text x="3.6526%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (38 samples, 0.15%)</title><rect x="5.8214%" y="181" width="0.1545%" height="15" fill="rgb(209,103,24)" fg:x="1432" fg:w="38"/><text x="6.0714%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (367 samples, 1.49%)</title><rect x="6.3661%" y="165" width="1.4919%" height="15" fill="rgb(229,88,8)" fg:x="1566" fg:w="367"/><text x="6.6161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (112 samples, 0.46%)</title><rect x="7.4027%" y="149" width="0.4553%" height="15" fill="rgb(213,181,19)" fg:x="1821" fg:w="112"/><text x="7.6527%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (745 samples, 3.03%)</title><rect x="4.9921%" y="197" width="3.0286%" height="15" fill="rgb(254,191,54)" fg:x="1228" fg:w="745"/><text x="5.2421%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (503 samples, 2.04%)</title><rect x="5.9759%" y="181" width="2.0448%" height="15" fill="rgb(241,83,37)" fg:x="1470" fg:w="503"/><text x="6.2259%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.16%)</title><rect x="7.8580%" y="165" width="0.1626%" height="15" fill="rgb(233,36,39)" fg:x="1933" fg:w="40"/><text x="8.1080%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (59 samples, 0.24%)</title><rect x="8.0207%" y="197" width="0.2398%" height="15" fill="rgb(226,3,54)" fg:x="1973" fg:w="59"/><text x="8.2707%" y="207.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (983 samples, 4.00%)</title><rect x="4.2685%" y="213" width="3.9961%" height="15" fill="rgb(245,192,40)" fg:x="1050" fg:w="983"/><text x="4.5185%" y="223.50">gj`&lt;..</text></g><g><title>gj`DYLD-STUB$$free (22 samples, 0.09%)</title><rect x="8.2646%" y="213" width="0.0894%" height="15" fill="rgb(238,167,29)" fg:x="2033" fg:w="22"/><text x="8.5146%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (44 samples, 0.18%)</title><rect x="8.3540%" y="213" width="0.1789%" height="15" fill="rgb(232,182,51)" fg:x="2055" fg:w="44"/><text x="8.6040%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (4 samples, 0.02%)</title><rect x="8.5329%" y="213" width="0.0163%" height="15" fill="rgb(231,60,39)" fg:x="2099" fg:w="4"/><text x="8.7829%" y="223.50"></text></g><g><title>gj`__rdl_alloc (41 samples, 0.17%)</title><rect x="8.5491%" y="213" width="0.1667%" height="15" fill="rgb(208,69,12)" fg:x="2103" fg:w="41"/><text x="8.7991%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (424 samples, 1.72%)</title><rect x="10.4110%" y="181" width="1.7236%" height="15" fill="rgb(235,93,37)" fg:x="2561" fg:w="424"/><text x="10.6610%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (180 samples, 0.73%)</title><rect x="12.6387%" y="149" width="0.7317%" height="15" fill="rgb(213,116,39)" fg:x="3109" fg:w="180"/><text x="12.8887%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (53 samples, 0.22%)</title><rect x="13.1550%" y="133" width="0.2155%" height="15" fill="rgb(222,207,29)" fg:x="3236" fg:w="53"/><text x="13.4050%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (330 samples, 1.34%)</title><rect x="12.1346%" y="181" width="1.3415%" height="15" fill="rgb(206,96,30)" fg:x="2985" fg:w="330"/><text x="12.3846%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (249 samples, 1.01%)</title><rect x="12.4639%" y="165" width="1.0122%" height="15" fill="rgb(218,138,4)" fg:x="3066" fg:w="249"/><text x="12.7139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (26 samples, 0.11%)</title><rect x="13.3705%" y="149" width="0.1057%" height="15" fill="rgb(250,191,14)" fg:x="3289" fg:w="26"/><text x="13.6205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.06%)</title><rect x="13.4762%" y="181" width="0.0569%" height="15" fill="rgb(239,60,40)" fg:x="3315" fg:w="14"/><text x="13.7262%" y="191.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (904 samples, 3.67%)</title><rect x="9.8622%" y="197" width="3.6749%" height="15" fill="rgb(206,27,48)" fg:x="2426" fg:w="904"/><text x="10.1122%" y="207.50">gj`&lt;..</text></g><g><title>gj`DYLD-STUB$$malloc (17 samples, 0.07%)</title><rect x="13.5371%" y="197" width="0.0691%" height="15" fill="rgb(225,35,8)" fg:x="3330" fg:w="17"/><text x="13.7871%" y="207.50"></text></g><g><title>gj`__rdl_alloc (12 samples, 0.05%)</title><rect x="13.6062%" y="197" width="0.0488%" height="15" fill="rgb(250,213,24)" fg:x="3347" fg:w="12"/><text x="13.8562%" y="207.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (80 samples, 0.33%)</title><rect x="14.3542%" y="165" width="0.3252%" height="15" fill="rgb(247,123,22)" fg:x="3531" fg:w="80"/><text x="14.6042%" y="175.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (100 samples, 0.41%)</title><rect x="14.2811%" y="181" width="0.4065%" height="15" fill="rgb(231,138,38)" fg:x="3513" fg:w="100"/><text x="14.5311%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.03%)</title><rect x="14.7486%" y="101" width="0.0325%" height="15" fill="rgb(231,145,46)" fg:x="3628" fg:w="8"/><text x="14.9986%" y="111.50"></text></g><g><title>gj`gj::join::materialize (24 samples, 0.10%)</title><rect x="14.6876%" y="181" width="0.0976%" height="15" fill="rgb(251,118,11)" fg:x="3613" fg:w="24"/><text x="14.9376%" y="191.50"></text></g><g><title>gj`gj::join::materialize (21 samples, 0.09%)</title><rect x="14.6998%" y="165" width="0.0854%" height="15" fill="rgb(217,147,25)" fg:x="3616" fg:w="21"/><text x="14.9498%" y="175.50"></text></g><g><title>gj`gj::join::materialize (13 samples, 0.05%)</title><rect x="14.7323%" y="149" width="0.0528%" height="15" fill="rgb(247,81,37)" fg:x="3624" fg:w="13"/><text x="14.9823%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.04%)</title><rect x="14.7404%" y="133" width="0.0447%" height="15" fill="rgb(209,12,38)" fg:x="3626" fg:w="11"/><text x="14.9904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="14.7445%" y="117" width="0.0407%" height="15" fill="rgb(227,1,9)" fg:x="3627" fg:w="10"/><text x="14.9945%" y="127.50"></text></g><g><title>gj`gj::join::singleton_join_inner (4 samples, 0.02%)</title><rect x="14.7852%" y="181" width="0.0163%" height="15" fill="rgb(248,47,43)" fg:x="3637" fg:w="4"/><text x="15.0352%" y="191.50"></text></g><g><title>gj`gj::join::materialize (3 samples, 0.01%)</title><rect x="14.7892%" y="165" width="0.0122%" height="15" fill="rgb(221,10,30)" fg:x="3638" fg:w="3"/><text x="15.0392%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (284 samples, 1.15%)</title><rect x="13.6632%" y="197" width="1.1545%" height="15" fill="rgb(210,229,1)" fg:x="3361" fg:w="284"/><text x="13.9132%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="15.1510%" y="181" width="0.0407%" height="15" fill="rgb(222,148,37)" fg:x="3727" fg:w="10"/><text x="15.4010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (71 samples, 0.29%)</title><rect x="15.2852%" y="165" width="0.2886%" height="15" fill="rgb(234,67,33)" fg:x="3760" fg:w="71"/><text x="15.5352%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.10%)</title><rect x="15.4762%" y="149" width="0.0976%" height="15" fill="rgb(247,98,35)" fg:x="3807" fg:w="24"/><text x="15.7262%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (196 samples, 0.80%)</title><rect x="14.8177%" y="197" width="0.7968%" height="15" fill="rgb(247,138,52)" fg:x="3645" fg:w="196"/><text x="15.0677%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (104 samples, 0.42%)</title><rect x="15.1917%" y="181" width="0.4228%" height="15" fill="rgb(213,79,30)" fg:x="3737" fg:w="104"/><text x="15.4417%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.04%)</title><rect x="15.5738%" y="165" width="0.0407%" height="15" fill="rgb(246,177,23)" fg:x="3831" fg:w="10"/><text x="15.8238%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.04%)</title><rect x="15.6145%" y="197" width="0.0407%" height="15" fill="rgb(230,62,27)" fg:x="3841" fg:w="10"/><text x="15.8645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (165 samples, 0.67%)</title><rect x="16.5738%" y="181" width="0.6708%" height="15" fill="rgb(216,154,8)" fg:x="4077" fg:w="165"/><text x="16.8238%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (393 samples, 1.60%)</title><rect x="15.6551%" y="197" width="1.5976%" height="15" fill="rgb(244,35,45)" fg:x="3851" fg:w="393"/><text x="15.9051%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.09%)</title><rect x="17.2527%" y="197" width="0.0854%" height="15" fill="rgb(251,115,12)" fg:x="4244" fg:w="21"/><text x="17.5027%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (115 samples, 0.47%)</title><rect x="17.3381%" y="197" width="0.4675%" height="15" fill="rgb(240,54,50)" fg:x="4265" fg:w="115"/><text x="17.5881%" y="207.50"></text></g><g><title>gj`gj::join::singleton_join_inner (2,266 samples, 9.21%)</title><rect x="8.7158%" y="213" width="9.2118%" height="15" fill="rgb(233,84,52)" fg:x="2144" fg:w="2266"/><text x="8.9658%" y="223.50">gj`gj::join::..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.11%)</title><rect x="17.8137%" y="197" width="0.1138%" height="15" fill="rgb(207,117,47)" fg:x="4382" fg:w="28"/><text x="18.0637%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (71 samples, 0.29%)</title><rect x="17.9276%" y="213" width="0.2886%" height="15" fill="rgb(249,43,39)" fg:x="4410" fg:w="71"/><text x="18.1776%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (36 samples, 0.15%)</title><rect x="18.2162%" y="213" width="0.1463%" height="15" fill="rgb(209,38,44)" fg:x="4481" fg:w="36"/><text x="18.4662%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (650 samples, 2.64%)</title><rect x="18.3625%" y="213" width="2.6424%" height="15" fill="rgb(236,212,23)" fg:x="4517" fg:w="650"/><text x="18.6125%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (262 samples, 1.07%)</title><rect x="19.9398%" y="197" width="1.0651%" height="15" fill="rgb(242,79,21)" fg:x="4905" fg:w="262"/><text x="20.1898%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (54 samples, 0.22%)</title><rect x="21.0049%" y="213" width="0.2195%" height="15" fill="rgb(211,96,35)" fg:x="5167" fg:w="54"/><text x="21.2549%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (745 samples, 3.03%)</title><rect x="21.2244%" y="213" width="3.0286%" height="15" fill="rgb(253,215,40)" fg:x="5221" fg:w="745"/><text x="21.4744%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (61 samples, 0.25%)</title><rect x="24.2530%" y="213" width="0.2480%" height="15" fill="rgb(211,81,21)" fg:x="5966" fg:w="61"/><text x="24.5030%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (5,183 samples, 21.07%)</title><rect x="3.6343%" y="229" width="21.0700%" height="15" fill="rgb(208,190,38)" fg:x="894" fg:w="5183"/><text x="3.8843%" y="239.50">gj`gj::join::bushy_join</text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 0.20%)</title><rect x="24.5010%" y="213" width="0.2033%" height="15" fill="rgb(235,213,38)" fg:x="6027" fg:w="50"/><text x="24.7510%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (37 samples, 0.15%)</title><rect x="24.7043%" y="229" width="0.1504%" height="15" fill="rgb(237,122,38)" fg:x="6077" fg:w="37"/><text x="24.9543%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (5 samples, 0.02%)</title><rect x="24.8547%" y="229" width="0.0203%" height="15" fill="rgb(244,218,35)" fg:x="6114" fg:w="5"/><text x="25.1047%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.05%)</title><rect x="25.2693%" y="213" width="0.0528%" height="15" fill="rgb(240,68,47)" fg:x="6216" fg:w="13"/><text x="25.5193%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.11%)</title><rect x="25.9523%" y="133" width="0.1098%" height="15" fill="rgb(210,16,53)" fg:x="6384" fg:w="27"/><text x="26.2023%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.02%)</title><rect x="26.0376%" y="117" width="0.0244%" height="15" fill="rgb(235,124,12)" fg:x="6405" fg:w="6"/><text x="26.2876%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.14%)</title><rect x="25.9279%" y="165" width="0.1382%" height="15" fill="rgb(224,169,11)" fg:x="6378" fg:w="34"/><text x="26.1779%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (31 samples, 0.13%)</title><rect x="25.9401%" y="149" width="0.1260%" height="15" fill="rgb(250,166,2)" fg:x="6381" fg:w="31"/><text x="26.1901%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (39 samples, 0.16%)</title><rect x="25.9157%" y="197" width="0.1585%" height="15" fill="rgb(242,216,29)" fg:x="6375" fg:w="39"/><text x="26.1657%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (37 samples, 0.15%)</title><rect x="25.9238%" y="181" width="0.1504%" height="15" fill="rgb(230,116,27)" fg:x="6377" fg:w="37"/><text x="26.1738%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (36 samples, 0.15%)</title><rect x="26.7369%" y="149" width="0.1463%" height="15" fill="rgb(228,99,48)" fg:x="6577" fg:w="36"/><text x="26.9869%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.04%)</title><rect x="26.8385%" y="133" width="0.0447%" height="15" fill="rgb(253,11,6)" fg:x="6602" fg:w="11"/><text x="27.0885%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.16%)</title><rect x="26.7287%" y="165" width="0.1585%" height="15" fill="rgb(247,143,39)" fg:x="6575" fg:w="39"/><text x="26.9787%" y="175.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (206 samples, 0.84%)</title><rect x="26.0783%" y="197" width="0.8374%" height="15" fill="rgb(236,97,10)" fg:x="6415" fg:w="206"/><text x="26.3283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.21%)</title><rect x="26.7084%" y="181" width="0.2073%" height="15" fill="rgb(233,208,19)" fg:x="6570" fg:w="51"/><text x="26.9584%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.03%)</title><rect x="26.8873%" y="165" width="0.0285%" height="15" fill="rgb(216,164,2)" fg:x="6614" fg:w="7"/><text x="27.1373%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="26.8954%" y="149" width="0.0203%" height="15" fill="rgb(220,129,5)" fg:x="6616" fg:w="5"/><text x="27.1454%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.02%)</title><rect x="26.9157%" y="197" width="0.0244%" height="15" fill="rgb(242,17,10)" fg:x="6621" fg:w="6"/><text x="27.1657%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="26.9442%" y="197" width="0.0122%" height="15" fill="rgb(242,107,0)" fg:x="6628" fg:w="3"/><text x="27.1942%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.02%)</title><rect x="26.9564%" y="197" width="0.0163%" height="15" fill="rgb(251,28,31)" fg:x="6631" fg:w="4"/><text x="27.2064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="26.9564%" y="181" width="0.0163%" height="15" fill="rgb(233,223,10)" fg:x="6631" fg:w="4"/><text x="27.2064%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="26.9564%" y="165" width="0.0163%" height="15" fill="rgb(215,21,27)" fg:x="6631" fg:w="4"/><text x="27.2064%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (423 samples, 1.72%)</title><rect x="25.3262%" y="213" width="1.7196%" height="15" fill="rgb(232,23,21)" fg:x="6230" fg:w="423"/><text x="25.5762%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.06%)</title><rect x="26.9848%" y="197" width="0.0610%" height="15" fill="rgb(244,5,23)" fg:x="6638" fg:w="15"/><text x="27.2348%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (64 samples, 0.26%)</title><rect x="27.0458%" y="213" width="0.2602%" height="15" fill="rgb(226,81,46)" fg:x="6653" fg:w="64"/><text x="27.2958%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.02%)</title><rect x="27.3873%" y="197" width="0.0244%" height="15" fill="rgb(247,70,30)" fg:x="6737" fg:w="6"/><text x="27.6373%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (34 samples, 0.14%)</title><rect x="27.9076%" y="165" width="0.1382%" height="15" fill="rgb(212,68,19)" fg:x="6865" fg:w="34"/><text x="28.1576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (144 samples, 0.59%)</title><rect x="27.4889%" y="181" width="0.5854%" height="15" fill="rgb(240,187,13)" fg:x="6762" fg:w="144"/><text x="27.7389%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.03%)</title><rect x="28.0459%" y="165" width="0.0285%" height="15" fill="rgb(223,113,26)" fg:x="6899" fg:w="7"/><text x="28.2959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (196 samples, 0.80%)</title><rect x="27.3060%" y="213" width="0.7968%" height="15" fill="rgb(206,192,2)" fg:x="6717" fg:w="196"/><text x="27.5560%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (170 samples, 0.69%)</title><rect x="27.4117%" y="197" width="0.6911%" height="15" fill="rgb(241,108,4)" fg:x="6743" fg:w="170"/><text x="27.6617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="28.0743%" y="181" width="0.0285%" height="15" fill="rgb(247,173,49)" fg:x="6906" fg:w="7"/><text x="28.3243%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.02%)</title><rect x="28.1109%" y="213" width="0.0244%" height="15" fill="rgb(224,114,35)" fg:x="6915" fg:w="6"/><text x="28.3609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (32 samples, 0.13%)</title><rect x="28.3426%" y="197" width="0.1301%" height="15" fill="rgb(245,159,27)" fg:x="6972" fg:w="32"/><text x="28.5926%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (84 samples, 0.34%)</title><rect x="28.1353%" y="213" width="0.3415%" height="15" fill="rgb(245,172,44)" fg:x="6921" fg:w="84"/><text x="28.3853%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="28.4768%" y="213" width="0.0163%" height="15" fill="rgb(236,23,11)" fg:x="7005" fg:w="4"/><text x="28.7268%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (240 samples, 0.98%)</title><rect x="28.4930%" y="213" width="0.9756%" height="15" fill="rgb(205,117,38)" fg:x="7009" fg:w="240"/><text x="28.7430%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (1,134 samples, 4.61%)</title><rect x="24.8750%" y="229" width="4.6099%" height="15" fill="rgb(237,72,25)" fg:x="6119" fg:w="1134"/><text x="25.1250%" y="239.50">gj`gj..</text></g><g><title>gj`gj::util::from_raw (552 samples, 2.24%)</title><rect x="29.4849%" y="229" width="2.2440%" height="15" fill="rgb(244,70,9)" fg:x="7253" fg:w="552"/><text x="29.7349%" y="239.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (552 samples, 2.24%)</title><rect x="29.4849%" y="213" width="2.2440%" height="15" fill="rgb(217,125,39)" fg:x="7253" fg:w="552"/><text x="29.7349%" y="223.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (552 samples, 2.24%)</title><rect x="29.4849%" y="197" width="2.2440%" height="15" fill="rgb(235,36,10)" fg:x="7253" fg:w="552"/><text x="29.7349%" y="207.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (552 samples, 2.24%)</title><rect x="29.4849%" y="181" width="2.2440%" height="15" fill="rgb(251,123,47)" fg:x="7253" fg:w="552"/><text x="29.7349%" y="191.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.13%)</title><rect x="31.7289%" y="213" width="0.1260%" height="15" fill="rgb(221,13,13)" fg:x="7805" fg:w="31"/><text x="31.9789%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.07%)</title><rect x="31.8550%" y="213" width="0.0732%" height="15" fill="rgb(238,131,9)" fg:x="7836" fg:w="18"/><text x="32.1050%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (186 samples, 0.76%)</title><rect x="31.9281%" y="213" width="0.7561%" height="15" fill="rgb(211,50,8)" fg:x="7854" fg:w="186"/><text x="32.1781%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (34 samples, 0.14%)</title><rect x="32.6843%" y="213" width="0.1382%" height="15" fill="rgb(245,182,24)" fg:x="8040" fg:w="34"/><text x="32.9343%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (41 samples, 0.17%)</title><rect x="32.8225%" y="213" width="0.1667%" height="15" fill="rgb(242,14,37)" fg:x="8074" fg:w="41"/><text x="33.0725%" y="223.50"></text></g><g><title>gj`__rdl_alloc (53 samples, 0.22%)</title><rect x="32.9891%" y="213" width="0.2155%" height="15" fill="rgb(246,228,12)" fg:x="8115" fg:w="53"/><text x="33.2391%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (32 samples, 0.13%)</title><rect x="33.2046%" y="213" width="0.1301%" height="15" fill="rgb(213,55,15)" fg:x="8168" fg:w="32"/><text x="33.4546%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.10%)</title><rect x="37.8674%" y="165" width="0.0976%" height="15" fill="rgb(209,9,3)" fg:x="9315" fg:w="24"/><text x="38.1174%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (141 samples, 0.57%)</title><rect x="39.6561%" y="133" width="0.5732%" height="15" fill="rgb(230,59,30)" fg:x="9755" fg:w="141"/><text x="39.9061%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (436 samples, 1.77%)</title><rect x="38.4731%" y="149" width="1.7724%" height="15" fill="rgb(209,121,21)" fg:x="9464" fg:w="436"/><text x="38.7231%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.02%)</title><rect x="40.2293%" y="133" width="0.0163%" height="15" fill="rgb(220,109,13)" fg:x="9896" fg:w="4"/><text x="40.4793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (848 samples, 3.45%)</title><rect x="36.9649%" y="181" width="3.4473%" height="15" fill="rgb(232,18,1)" fg:x="9093" fg:w="848"/><text x="37.2149%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (602 samples, 2.45%)</title><rect x="37.9650%" y="165" width="2.4473%" height="15" fill="rgb(215,41,42)" fg:x="9339" fg:w="602"/><text x="38.2150%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.17%)</title><rect x="40.2455%" y="149" width="0.1667%" height="15" fill="rgb(224,123,36)" fg:x="9900" fg:w="41"/><text x="40.4955%" y="159.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (967 samples, 3.93%)</title><rect x="36.7332%" y="197" width="3.9311%" height="15" fill="rgb(240,125,3)" fg:x="9036" fg:w="967"/><text x="36.9832%" y="207.50">gj`&lt;..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (62 samples, 0.25%)</title><rect x="40.4122%" y="181" width="0.2520%" height="15" fill="rgb(205,98,50)" fg:x="9941" fg:w="62"/><text x="40.6622%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (282 samples, 1.15%)</title><rect x="40.6643%" y="197" width="1.1464%" height="15" fill="rgb(205,185,37)" fg:x="10003" fg:w="282"/><text x="40.9143%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (734 samples, 2.98%)</title><rect x="41.8106%" y="197" width="2.9839%" height="15" fill="rgb(238,207,15)" fg:x="10285" fg:w="734"/><text x="42.0606%" y="207.50">gj`..</text></g><g><title>gj`DYLD-STUB$$malloc (16 samples, 0.07%)</title><rect x="46.6076%" y="149" width="0.0650%" height="15" fill="rgb(213,199,42)" fg:x="11465" fg:w="16"/><text x="46.8576%" y="159.50"></text></g><g><title>gj`__rdl_alloc (16 samples, 0.07%)</title><rect x="46.6726%" y="149" width="0.0650%" height="15" fill="rgb(235,201,11)" fg:x="11481" fg:w="16"/><text x="46.9226%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.14%)</title><rect x="47.3962%" y="117" width="0.1423%" height="15" fill="rgb(207,46,11)" fg:x="11659" fg:w="35"/><text x="47.6462%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="47.7174%" y="101" width="0.0285%" height="15" fill="rgb(241,35,35)" fg:x="11738" fg:w="7"/><text x="47.9674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (87 samples, 0.35%)</title><rect x="48.5467%" y="85" width="0.3537%" height="15" fill="rgb(243,32,47)" fg:x="11942" fg:w="87"/><text x="48.7967%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (592 samples, 2.41%)</title><rect x="47.5385%" y="117" width="2.4066%" height="15" fill="rgb(247,202,23)" fg:x="11694" fg:w="592"/><text x="47.7885%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (541 samples, 2.20%)</title><rect x="47.7458%" y="101" width="2.1993%" height="15" fill="rgb(219,102,11)" fg:x="11745" fg:w="541"/><text x="47.9958%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (257 samples, 1.04%)</title><rect x="48.9004%" y="85" width="1.0448%" height="15" fill="rgb(243,110,44)" fg:x="12029" fg:w="257"/><text x="49.1504%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (105 samples, 0.43%)</title><rect x="49.5183%" y="69" width="0.4268%" height="15" fill="rgb(222,74,54)" fg:x="12181" fg:w="105"/><text x="49.7683%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (769 samples, 3.13%)</title><rect x="46.9531%" y="133" width="3.1261%" height="15" fill="rgb(216,99,12)" fg:x="11550" fg:w="769"/><text x="47.2031%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33 samples, 0.13%)</title><rect x="49.9451%" y="117" width="0.1342%" height="15" fill="rgb(226,22,26)" fg:x="12286" fg:w="33"/><text x="50.1951%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (36 samples, 0.15%)</title><rect x="50.0793%" y="133" width="0.1463%" height="15" fill="rgb(217,163,10)" fg:x="12319" fg:w="36"/><text x="50.3293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.09%)</title><rect x="50.2256%" y="133" width="0.0935%" height="15" fill="rgb(213,25,53)" fg:x="12355" fg:w="23"/><text x="50.4756%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (900 samples, 3.66%)</title><rect x="46.7377%" y="149" width="3.6587%" height="15" fill="rgb(252,105,26)" fg:x="11497" fg:w="900"/><text x="46.9877%" y="159.50">gj`a..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.08%)</title><rect x="50.3191%" y="133" width="0.0772%" height="15" fill="rgb(220,39,43)" fg:x="12378" fg:w="19"/><text x="50.5691%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (983 samples, 4.00%)</title><rect x="46.4084%" y="165" width="3.9961%" height="15" fill="rgb(229,68,48)" fg:x="11416" fg:w="983"/><text x="46.6584%" y="175.50">gj`a..</text></g><g><title>gj`alloc::raw_vec::finish_grow (29 samples, 0.12%)</title><rect x="50.4045%" y="165" width="0.1179%" height="15" fill="rgb(252,8,32)" fg:x="12399" fg:w="29"/><text x="50.6545%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (192 samples, 0.78%)</title><rect x="50.5224%" y="165" width="0.7805%" height="15" fill="rgb(223,20,43)" fg:x="12428" fg:w="192"/><text x="50.7724%" y="175.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (3 samples, 0.01%)</title><rect x="51.9411%" y="149" width="0.0122%" height="15" fill="rgb(229,81,49)" fg:x="12777" fg:w="3"/><text x="52.1911%" y="159.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (158 samples, 0.64%)</title><rect x="51.9533%" y="149" width="0.6423%" height="15" fill="rgb(236,28,36)" fg:x="12780" fg:w="158"/><text x="52.2033%" y="159.50"></text></g><g><title>gj`core::str::converts::from_utf8 (14 samples, 0.06%)</title><rect x="53.6648%" y="133" width="0.0569%" height="15" fill="rgb(249,185,26)" fg:x="13201" fg:w="14"/><text x="53.9148%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.01%)</title><rect x="53.7542%" y="101" width="0.0122%" height="15" fill="rgb(249,174,33)" fg:x="13223" fg:w="3"/><text x="54.0042%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.04%)</title><rect x="53.7745%" y="85" width="0.0366%" height="15" fill="rgb(233,201,37)" fg:x="13228" fg:w="9"/><text x="54.0245%" y="95.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (24 samples, 0.10%)</title><rect x="53.7217%" y="133" width="0.0976%" height="15" fill="rgb(221,78,26)" fg:x="13215" fg:w="24"/><text x="53.9717%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.08%)</title><rect x="53.7420%" y="117" width="0.0772%" height="15" fill="rgb(250,127,30)" fg:x="13220" fg:w="19"/><text x="53.9920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.05%)</title><rect x="53.7664%" y="101" width="0.0528%" height="15" fill="rgb(230,49,44)" fg:x="13226" fg:w="13"/><text x="54.0164%" y="111.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (323 samples, 1.31%)</title><rect x="52.5956%" y="149" width="1.3131%" height="15" fill="rgb(229,67,23)" fg:x="12938" fg:w="323"/><text x="52.8456%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.09%)</title><rect x="53.8193%" y="133" width="0.0894%" height="15" fill="rgb(249,83,47)" fg:x="13239" fg:w="22"/><text x="54.0693%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (23 samples, 0.09%)</title><rect x="54.0632%" y="101" width="0.0935%" height="15" fill="rgb(215,43,3)" fg:x="13299" fg:w="23"/><text x="54.3132%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (11 samples, 0.04%)</title><rect x="54.1120%" y="85" width="0.0447%" height="15" fill="rgb(238,154,13)" fg:x="13311" fg:w="11"/><text x="54.3620%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (49 samples, 0.20%)</title><rect x="53.9941%" y="117" width="0.1992%" height="15" fill="rgb(219,56,2)" fg:x="13282" fg:w="49"/><text x="54.2441%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (9 samples, 0.04%)</title><rect x="54.1567%" y="101" width="0.0366%" height="15" fill="rgb(233,0,4)" fg:x="13322" fg:w="9"/><text x="54.4067%" y="111.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (60 samples, 0.24%)</title><rect x="53.9900%" y="133" width="0.2439%" height="15" fill="rgb(235,30,7)" fg:x="13281" fg:w="60"/><text x="54.2400%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.04%)</title><rect x="54.1933%" y="117" width="0.0407%" height="15" fill="rgb(250,79,13)" fg:x="13331" fg:w="10"/><text x="54.4433%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (726 samples, 2.95%)</title><rect x="51.3029%" y="165" width="2.9513%" height="15" fill="rgb(211,146,34)" fg:x="12620" fg:w="726"/><text x="51.5529%" y="175.50">gj`..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (85 samples, 0.35%)</title><rect x="53.9087%" y="149" width="0.3455%" height="15" fill="rgb(228,22,38)" fg:x="13261" fg:w="85"/><text x="54.1587%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (5 samples, 0.02%)</title><rect x="54.2339%" y="133" width="0.0203%" height="15" fill="rgb(235,168,5)" fg:x="13341" fg:w="5"/><text x="54.4839%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (36 samples, 0.15%)</title><rect x="54.2542%" y="165" width="0.1463%" height="15" fill="rgb(221,155,16)" fg:x="13346" fg:w="36"/><text x="54.5042%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (53 samples, 0.22%)</title><rect x="54.4006%" y="165" width="0.2155%" height="15" fill="rgb(215,215,53)" fg:x="13382" fg:w="53"/><text x="54.6506%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (69 samples, 0.28%)</title><rect x="54.6160%" y="165" width="0.2805%" height="15" fill="rgb(223,4,10)" fg:x="13435" fg:w="69"/><text x="54.8660%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (51 samples, 0.21%)</title><rect x="55.8478%" y="149" width="0.2073%" height="15" fill="rgb(234,103,6)" fg:x="13738" fg:w="51"/><text x="56.0978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (464 samples, 1.89%)</title><rect x="56.6161%" y="133" width="1.8863%" height="15" fill="rgb(227,97,0)" fg:x="13927" fg:w="464"/><text x="56.8661%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (139 samples, 0.57%)</title><rect x="57.9373%" y="117" width="0.5651%" height="15" fill="rgb(234,150,53)" fg:x="14252" fg:w="139"/><text x="58.1873%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (937 samples, 3.81%)</title><rect x="54.8965%" y="165" width="3.8091%" height="15" fill="rgb(228,201,54)" fg:x="13504" fg:w="937"/><text x="55.1465%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (652 samples, 2.65%)</title><rect x="56.0551%" y="149" width="2.6505%" height="15" fill="rgb(222,22,37)" fg:x="13789" fg:w="652"/><text x="56.3051%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (50 samples, 0.20%)</title><rect x="58.5024%" y="133" width="0.2033%" height="15" fill="rgb(237,53,32)" fg:x="14391" fg:w="50"/><text x="58.7524%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (54 samples, 0.22%)</title><rect x="58.7056%" y="165" width="0.2195%" height="15" fill="rgb(233,25,53)" fg:x="14441" fg:w="54"/><text x="58.9556%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (3,435 samples, 13.96%)</title><rect x="44.9693%" y="181" width="13.9640%" height="15" fill="rgb(210,40,34)" fg:x="11062" fg:w="3435"/><text x="45.2193%" y="191.50">gj`&lt;parquet::record::..</text></g><g><title>gj`DYLD-STUB$$malloc (46 samples, 0.19%)</title><rect x="58.9333%" y="181" width="0.1870%" height="15" fill="rgb(241,220,44)" fg:x="14497" fg:w="46"/><text x="59.1833%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (29 samples, 0.12%)</title><rect x="59.1203%" y="181" width="0.1179%" height="15" fill="rgb(235,28,35)" fg:x="14543" fg:w="29"/><text x="59.3703%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (33 samples, 0.13%)</title><rect x="59.2382%" y="181" width="0.1342%" height="15" fill="rgb(210,56,17)" fg:x="14572" fg:w="33"/><text x="59.4882%" y="191.50"></text></g><g><title>gj`__rdl_alloc (44 samples, 0.18%)</title><rect x="59.3723%" y="181" width="0.1789%" height="15" fill="rgb(224,130,29)" fg:x="14605" fg:w="44"/><text x="59.6223%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.15%)</title><rect x="59.5512%" y="181" width="0.1463%" height="15" fill="rgb(235,212,8)" fg:x="14649" fg:w="36"/><text x="59.8012%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="59.6975%" y="133" width="0.0163%" height="15" fill="rgb(223,33,50)" fg:x="14685" fg:w="4"/><text x="59.9475%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (4 samples, 0.02%)</title><rect x="59.6975%" y="117" width="0.0163%" height="15" fill="rgb(219,149,13)" fg:x="14685" fg:w="4"/><text x="59.9475%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (4 samples, 0.02%)</title><rect x="59.6975%" y="101" width="0.0163%" height="15" fill="rgb(250,156,29)" fg:x="14685" fg:w="4"/><text x="59.9475%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.02%)</title><rect x="59.6975%" y="85" width="0.0163%" height="15" fill="rgb(216,193,19)" fg:x="14685" fg:w="4"/><text x="59.9475%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="59.6975%" y="69" width="0.0163%" height="15" fill="rgb(216,135,14)" fg:x="14685" fg:w="4"/><text x="59.9475%" y="79.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (5 samples, 0.02%)</title><rect x="59.6975%" y="181" width="0.0203%" height="15" fill="rgb(241,47,5)" fg:x="14685" fg:w="5"/><text x="59.9475%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (5 samples, 0.02%)</title><rect x="59.6975%" y="165" width="0.0203%" height="15" fill="rgb(233,42,35)" fg:x="14685" fg:w="5"/><text x="59.9475%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (5 samples, 0.02%)</title><rect x="59.6975%" y="149" width="0.0203%" height="15" fill="rgb(231,13,6)" fg:x="14685" fg:w="5"/><text x="59.9475%" y="159.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (108 samples, 0.44%)</title><rect x="59.7341%" y="69" width="0.4390%" height="15" fill="rgb(207,181,40)" fg:x="14694" fg:w="108"/><text x="59.9841%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (121 samples, 0.49%)</title><rect x="59.7260%" y="85" width="0.4919%" height="15" fill="rgb(254,173,49)" fg:x="14692" fg:w="121"/><text x="59.9760%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.04%)</title><rect x="60.1732%" y="69" width="0.0447%" height="15" fill="rgb(221,1,38)" fg:x="14802" fg:w="11"/><text x="60.4232%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (128 samples, 0.52%)</title><rect x="59.7260%" y="101" width="0.5203%" height="15" fill="rgb(206,124,46)" fg:x="14692" fg:w="128"/><text x="59.9760%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.02%)</title><rect x="60.2301%" y="85" width="0.0163%" height="15" fill="rgb(249,21,11)" fg:x="14816" fg:w="4"/><text x="60.4801%" y="95.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (6 samples, 0.02%)</title><rect x="60.2464%" y="101" width="0.0244%" height="15" fill="rgb(222,201,40)" fg:x="14820" fg:w="6"/><text x="60.4964%" y="111.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (6 samples, 0.02%)</title><rect x="60.2464%" y="85" width="0.0244%" height="15" fill="rgb(235,61,29)" fg:x="14820" fg:w="6"/><text x="60.4964%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (6 samples, 0.02%)</title><rect x="60.2464%" y="69" width="0.0244%" height="15" fill="rgb(219,207,3)" fg:x="14820" fg:w="6"/><text x="60.4964%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.02%)</title><rect x="60.2464%" y="53" width="0.0244%" height="15" fill="rgb(222,56,46)" fg:x="14820" fg:w="6"/><text x="60.4964%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (6 samples, 0.02%)</title><rect x="60.2464%" y="37" width="0.0244%" height="15" fill="rgb(239,76,54)" fg:x="14820" fg:w="6"/><text x="60.4964%" y="47.50"></text></g><g><title>gj`std::io::default_read_buf (31 samples, 0.13%)</title><rect x="60.2707%" y="85" width="0.1260%" height="15" fill="rgb(231,124,27)" fg:x="14826" fg:w="31"/><text x="60.5207%" y="95.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.13%)</title><rect x="60.2707%" y="69" width="0.1260%" height="15" fill="rgb(249,195,6)" fg:x="14826" fg:w="31"/><text x="60.5207%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (31 samples, 0.13%)</title><rect x="60.2707%" y="53" width="0.1260%" height="15" fill="rgb(237,174,47)" fg:x="14826" fg:w="31"/><text x="60.5207%" y="63.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (172 samples, 0.70%)</title><rect x="59.7179%" y="181" width="0.6992%" height="15" fill="rgb(206,201,31)" fg:x="14690" fg:w="172"/><text x="59.9679%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (172 samples, 0.70%)</title><rect x="59.7179%" y="165" width="0.6992%" height="15" fill="rgb(231,57,52)" fg:x="14690" fg:w="172"/><text x="59.9679%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (172 samples, 0.70%)</title><rect x="59.7179%" y="149" width="0.6992%" height="15" fill="rgb(248,177,22)" fg:x="14690" fg:w="172"/><text x="59.9679%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (170 samples, 0.69%)</title><rect x="59.7260%" y="133" width="0.6911%" height="15" fill="rgb(215,211,37)" fg:x="14692" fg:w="170"/><text x="59.9760%" y="143.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (170 samples, 0.69%)</title><rect x="59.7260%" y="117" width="0.6911%" height="15" fill="rgb(241,128,51)" fg:x="14692" fg:w="170"/><text x="59.9760%" y="127.50"></text></g><g><title>gj`std::io::Read::read_to_end (36 samples, 0.15%)</title><rect x="60.2707%" y="101" width="0.1463%" height="15" fill="rgb(227,165,31)" fg:x="14826" fg:w="36"/><text x="60.5207%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.02%)</title><rect x="60.3968%" y="85" width="0.0203%" height="15" fill="rgb(228,167,24)" fg:x="14857" fg:w="5"/><text x="60.6468%" y="95.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (65 samples, 0.26%)</title><rect x="60.4252%" y="181" width="0.2642%" height="15" fill="rgb(228,143,12)" fg:x="14864" fg:w="65"/><text x="60.6752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (69 samples, 0.28%)</title><rect x="60.6976%" y="181" width="0.2805%" height="15" fill="rgb(249,149,8)" fg:x="14931" fg:w="69"/><text x="60.9476%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.03%)</title><rect x="60.9781%" y="181" width="0.0285%" height="15" fill="rgb(243,35,44)" fg:x="15000" fg:w="7"/><text x="61.2281%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (4,203 samples, 17.09%)</title><rect x="44.7945%" y="197" width="17.0861%" height="15" fill="rgb(246,89,9)" fg:x="11019" fg:w="4203"/><text x="45.0445%" y="207.50">gj`&lt;parquet::record::reade..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (215 samples, 0.87%)</title><rect x="61.0065%" y="181" width="0.8740%" height="15" fill="rgb(233,213,13)" fg:x="15007" fg:w="215"/><text x="61.2565%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (28 samples, 0.11%)</title><rect x="61.8806%" y="197" width="0.1138%" height="15" fill="rgb(233,141,41)" fg:x="15222" fg:w="28"/><text x="62.1306%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (108 samples, 0.44%)</title><rect x="61.9944%" y="197" width="0.4390%" height="15" fill="rgb(239,167,4)" fg:x="15250" fg:w="108"/><text x="62.2444%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (31 samples, 0.13%)</title><rect x="62.4334%" y="197" width="0.1260%" height="15" fill="rgb(209,217,16)" fg:x="15358" fg:w="31"/><text x="62.6834%" y="207.50"></text></g><g><title>gj`__rdl_alloc (34 samples, 0.14%)</title><rect x="62.5595%" y="197" width="0.1382%" height="15" fill="rgb(219,88,35)" fg:x="15389" fg:w="34"/><text x="62.8095%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (8 samples, 0.03%)</title><rect x="62.6977%" y="117" width="0.0325%" height="15" fill="rgb(220,193,23)" fg:x="15423" fg:w="8"/><text x="62.9477%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (8 samples, 0.03%)</title><rect x="62.6977%" y="101" width="0.0325%" height="15" fill="rgb(230,90,52)" fg:x="15423" fg:w="8"/><text x="62.9477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.02%)</title><rect x="62.7302%" y="117" width="0.0163%" height="15" fill="rgb(252,106,19)" fg:x="15431" fg:w="4"/><text x="62.9802%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="62.7302%" y="101" width="0.0163%" height="15" fill="rgb(206,74,20)" fg:x="15431" fg:w="4"/><text x="62.9802%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="62.7302%" y="85" width="0.0163%" height="15" fill="rgb(230,138,44)" fg:x="15431" fg:w="4"/><text x="62.9802%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.06%)</title><rect x="62.6977%" y="133" width="0.0569%" height="15" fill="rgb(235,182,43)" fg:x="15423" fg:w="14"/><text x="62.9477%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.07%)</title><rect x="62.6977%" y="197" width="0.0732%" height="15" fill="rgb(242,16,51)" fg:x="15423" fg:w="18"/><text x="62.9477%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (18 samples, 0.07%)</title><rect x="62.6977%" y="181" width="0.0732%" height="15" fill="rgb(248,9,4)" fg:x="15423" fg:w="18"/><text x="62.9477%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.07%)</title><rect x="62.6977%" y="165" width="0.0732%" height="15" fill="rgb(210,31,22)" fg:x="15423" fg:w="18"/><text x="62.9477%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.07%)</title><rect x="62.6977%" y="149" width="0.0732%" height="15" fill="rgb(239,54,39)" fg:x="15423" fg:w="18"/><text x="62.9477%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="62.7546%" y="133" width="0.0163%" height="15" fill="rgb(230,99,41)" fg:x="15437" fg:w="4"/><text x="63.0046%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (137 samples, 0.56%)</title><rect x="62.7708%" y="197" width="0.5569%" height="15" fill="rgb(253,106,12)" fg:x="15441" fg:w="137"/><text x="63.0208%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (80 samples, 0.33%)</title><rect x="63.3278%" y="197" width="0.3252%" height="15" fill="rgb(213,46,41)" fg:x="15578" fg:w="80"/><text x="63.5778%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (793 samples, 3.22%)</title><rect x="64.6043%" y="181" width="3.2237%" height="15" fill="rgb(215,133,35)" fg:x="15892" fg:w="793"/><text x="64.8543%" y="191.50">gj`..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,365 samples, 5.55%)</title><rect x="63.6530%" y="197" width="5.5490%" height="15" fill="rgb(213,28,5)" fg:x="15658" fg:w="1365"/><text x="63.9030%" y="207.50">gj`hash..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (338 samples, 1.37%)</title><rect x="67.8280%" y="181" width="1.3740%" height="15" fill="rgb(215,77,49)" fg:x="16685" fg:w="338"/><text x="68.0780%" y="191.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (3 samples, 0.01%)</title><rect x="69.2020%" y="197" width="0.0122%" height="15" fill="rgb(248,100,22)" fg:x="17023" fg:w="3"/><text x="69.4520%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (3 samples, 0.01%)</title><rect x="69.2020%" y="181" width="0.0122%" height="15" fill="rgb(208,67,9)" fg:x="17023" fg:w="3"/><text x="69.4520%" y="191.50"></text></g><g><title>gj`parquet::file::footer::decode_metadata (3 samples, 0.01%)</title><rect x="69.2020%" y="165" width="0.0122%" height="15" fill="rgb(219,133,21)" fg:x="17023" fg:w="3"/><text x="69.4520%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (64 samples, 0.26%)</title><rect x="70.2468%" y="181" width="0.2602%" height="15" fill="rgb(246,46,29)" fg:x="17280" fg:w="64"/><text x="70.4968%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (411 samples, 1.67%)</title><rect x="70.9988%" y="165" width="1.6708%" height="15" fill="rgb(246,185,52)" fg:x="17465" fg:w="411"/><text x="71.2488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (119 samples, 0.48%)</title><rect x="72.1859%" y="149" width="0.4838%" height="15" fill="rgb(252,136,11)" fg:x="17757" fg:w="119"/><text x="72.4359%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (897 samples, 3.65%)</title><rect x="69.2183%" y="197" width="3.6465%" height="15" fill="rgb(219,138,53)" fg:x="17027" fg:w="897"/><text x="69.4683%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (580 samples, 2.36%)</title><rect x="70.5069%" y="181" width="2.3578%" height="15" fill="rgb(211,51,23)" fg:x="17344" fg:w="580"/><text x="70.7569%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 0.20%)</title><rect x="72.6696%" y="165" width="0.1951%" height="15" fill="rgb(247,221,28)" fg:x="17876" fg:w="48"/><text x="72.9196%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (61 samples, 0.25%)</title><rect x="72.8648%" y="197" width="0.2480%" height="15" fill="rgb(251,222,45)" fg:x="17924" fg:w="61"/><text x="73.1148%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (916 samples, 3.72%)</title><rect x="79.3162%" y="181" width="3.7237%" height="15" fill="rgb(217,162,53)" fg:x="19511" fg:w="916"/><text x="79.5662%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.09%)</title><rect x="83.0400%" y="181" width="0.0935%" height="15" fill="rgb(229,93,14)" fg:x="20427" fg:w="23"/><text x="83.2900%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2,618 samples, 10.64%)</title><rect x="73.1127%" y="197" width="10.6427%" height="15" fill="rgb(209,67,49)" fg:x="17985" fg:w="2618"/><text x="73.3627%" y="207.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`szone_size (153 samples, 0.62%)</title><rect x="83.1335%" y="181" width="0.6220%" height="15" fill="rgb(213,87,29)" fg:x="20450" fg:w="153"/><text x="83.3835%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (134 samples, 0.54%)</title><rect x="83.2107%" y="165" width="0.5447%" height="15" fill="rgb(205,151,52)" fg:x="20469" fg:w="134"/><text x="83.4607%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (203 samples, 0.83%)</title><rect x="85.1132%" y="165" width="0.8252%" height="15" fill="rgb(253,215,39)" fg:x="20937" fg:w="203"/><text x="85.3632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (574 samples, 2.33%)</title><rect x="83.7554%" y="197" width="2.3334%" height="15" fill="rgb(221,220,41)" fg:x="20603" fg:w="574"/><text x="84.0054%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (402 samples, 1.63%)</title><rect x="84.4547%" y="181" width="1.6342%" height="15" fill="rgb(218,133,21)" fg:x="20775" fg:w="402"/><text x="84.7047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (37 samples, 0.15%)</title><rect x="85.9385%" y="165" width="0.1504%" height="15" fill="rgb(221,193,43)" fg:x="21140" fg:w="37"/><text x="86.1885%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (127 samples, 0.52%)</title><rect x="86.0929%" y="197" width="0.5163%" height="15" fill="rgb(240,128,52)" fg:x="21178" fg:w="127"/><text x="86.3429%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (583 samples, 2.37%)</title><rect x="86.6092%" y="197" width="2.3700%" height="15" fill="rgb(253,114,12)" fg:x="21305" fg:w="583"/><text x="86.8592%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (231 samples, 0.94%)</title><rect x="88.9874%" y="197" width="0.9391%" height="15" fill="rgb(215,223,47)" fg:x="21890" fg:w="231"/><text x="89.2374%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (46 samples, 0.19%)</title><rect x="89.9264%" y="197" width="0.1870%" height="15" fill="rgb(248,225,23)" fg:x="22121" fg:w="46"/><text x="90.1764%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.13%)</title><rect x="90.1134%" y="197" width="0.1301%" height="15" fill="rgb(250,108,0)" fg:x="22167" fg:w="32"/><text x="90.3634%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (38 samples, 0.15%)</title><rect x="90.2435%" y="197" width="0.1545%" height="15" fill="rgb(228,208,7)" fg:x="22199" fg:w="38"/><text x="90.4935%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (580 samples, 2.36%)</title><rect x="90.3980%" y="197" width="2.3578%" height="15" fill="rgb(244,45,10)" fg:x="22237" fg:w="580"/><text x="90.6480%" y="207.50">l..</text></g><g><title>gj`gj::util::from_parquet (14,721 samples, 59.84%)</title><rect x="33.3347%" y="213" width="59.8439%" height="15" fill="rgb(207,125,25)" fg:x="8200" fg:w="14721"/><text x="33.5847%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (104 samples, 0.42%)</title><rect x="92.7558%" y="197" width="0.4228%" height="15" fill="rgb(210,195,18)" fg:x="22817" fg:w="104"/><text x="93.0058%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (149 samples, 0.61%)</title><rect x="93.1786%" y="213" width="0.6057%" height="15" fill="rgb(249,80,12)" fg:x="22921" fg:w="149"/><text x="93.4286%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (20 samples, 0.08%)</title><rect x="93.7843%" y="213" width="0.0813%" height="15" fill="rgb(221,65,9)" fg:x="23070" fg:w="20"/><text x="94.0343%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.20%)</title><rect x="93.8656%" y="213" width="0.1951%" height="15" fill="rgb(235,49,36)" fg:x="23090" fg:w="48"/><text x="94.1156%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (292 samples, 1.19%)</title><rect x="94.0607%" y="213" width="1.1870%" height="15" fill="rgb(225,32,20)" fg:x="23138" fg:w="292"/><text x="94.3107%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (366 samples, 1.49%)</title><rect x="95.2478%" y="213" width="1.4879%" height="15" fill="rgb(215,141,46)" fg:x="23430" fg:w="366"/><text x="95.4978%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.07%)</title><rect x="96.7356%" y="213" width="0.0691%" height="15" fill="rgb(250,160,47)" fg:x="23796" fg:w="17"/><text x="96.9856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (214 samples, 0.87%)</title><rect x="96.8088%" y="213" width="0.8700%" height="15" fill="rgb(216,222,40)" fg:x="23814" fg:w="214"/><text x="97.0588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (151 samples, 0.61%)</title><rect x="97.6788%" y="213" width="0.6138%" height="15" fill="rgb(234,217,39)" fg:x="24028" fg:w="151"/><text x="97.9288%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (16 samples, 0.07%)</title><rect x="98.2926%" y="213" width="0.0650%" height="15" fill="rgb(207,178,40)" fg:x="24179" fg:w="16"/><text x="98.5426%" y="223.50"></text></g><g><title>gj`gj::util::load_db (16,466 samples, 66.94%)</title><rect x="31.7289%" y="229" width="66.9377%" height="15" fill="rgb(221,136,13)" fg:x="7805" fg:w="16466"/><text x="31.9789%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (76 samples, 0.31%)</title><rect x="98.3577%" y="213" width="0.3090%" height="15" fill="rgb(249,199,10)" fg:x="24195" fg:w="76"/><text x="98.6077%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="98.6666%" y="229" width="0.0122%" height="15" fill="rgb(249,222,13)" fg:x="24271" fg:w="3"/><text x="98.9166%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="98.6788%" y="229" width="0.0650%" height="15" fill="rgb(244,185,38)" fg:x="24274" fg:w="16"/><text x="98.9288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (53 samples, 0.22%)</title><rect x="98.7439%" y="229" width="0.2155%" height="15" fill="rgb(236,202,9)" fg:x="24290" fg:w="53"/><text x="98.9939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (109 samples, 0.44%)</title><rect x="98.9593%" y="229" width="0.4431%" height="15" fill="rgb(250,229,37)" fg:x="24343" fg:w="109"/><text x="99.2093%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.03%)</title><rect x="99.4024%" y="229" width="0.0285%" height="15" fill="rgb(206,174,23)" fg:x="24452" fg:w="7"/><text x="99.6524%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (7 samples, 0.03%)</title><rect x="99.4024%" y="213" width="0.0285%" height="15" fill="rgb(211,33,43)" fg:x="24452" fg:w="7"/><text x="99.6524%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.03%)</title><rect x="99.4024%" y="197" width="0.0285%" height="15" fill="rgb(245,58,50)" fg:x="24452" fg:w="7"/><text x="99.6524%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (64 samples, 0.26%)</title><rect x="99.4309%" y="229" width="0.2602%" height="15" fill="rgb(244,68,36)" fg:x="24459" fg:w="64"/><text x="99.6809%" y="239.50"></text></g><g><title>gj`gj::main (24,574 samples, 99.90%)</title><rect x="0.0000%" y="245" width="99.8984%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="24574"/><text x="0.2500%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (51 samples, 0.21%)</title><rect x="99.6910%" y="229" width="0.2073%" height="15" fill="rgb(254,30,23)" fg:x="24523" fg:w="51"/><text x="99.9410%" y="239.50"></text></g><g><title>dyld`start (24,582 samples, 99.93%)</title><rect x="0.0000%" y="325" width="99.9309%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="24582"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>gj`main (24,582 samples, 99.93%)</title><rect x="0.0000%" y="309" width="99.9309%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="24582"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (24,582 samples, 99.93%)</title><rect x="0.0000%" y="293" width="99.9309%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="24582"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (24,582 samples, 99.93%)</title><rect x="0.0000%" y="277" width="99.9309%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="24582"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (24,582 samples, 99.93%)</title><rect x="0.0000%" y="261" width="99.9309%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="24582"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.03%)</title><rect x="99.8984%" y="245" width="0.0325%" height="15" fill="rgb(220,13,46)" fg:x="24574" fg:w="8"/><text x="100.1484%" y="255.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.02%)</title><rect x="99.9309%" y="325" width="0.0244%" height="15" fill="rgb(239,221,27)" fg:x="24582" fg:w="6"/><text x="100.1809%" y="335.50"></text></g><g><title>all (24,599 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="24599"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.04%)</title><rect x="99.9553%" y="325" width="0.0447%" height="15" fill="rgb(211,99,13)" fg:x="24588" fg:w="11"/><text x="100.2053%" y="335.50"></text></g></svg></svg>