<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="21259"><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.42%)</title><rect x="0.0847%" y="197" width="0.4186%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="89"/><text x="0.3347%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.04%)</title><rect x="0.6962%" y="181" width="0.0423%" height="15" fill="rgb(217,0,24)" fg:x="148" fg:w="9"/><text x="0.9462%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (52 samples, 0.24%)</title><rect x="0.5033%" y="197" width="0.2446%" height="15" fill="rgb(221,193,54)" fg:x="107" fg:w="52"/><text x="0.7533%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="0.8044%" y="165" width="0.0188%" height="15" fill="rgb(248,212,6)" fg:x="171" fg:w="4"/><text x="1.0544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.05%)</title><rect x="0.8232%" y="165" width="0.0517%" height="15" fill="rgb(208,68,35)" fg:x="175" fg:w="11"/><text x="1.0732%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29 samples, 0.14%)</title><rect x="0.7526%" y="197" width="0.1364%" height="15" fill="rgb(232,128,0)" fg:x="160" fg:w="29"/><text x="1.0026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28 samples, 0.13%)</title><rect x="0.7573%" y="181" width="0.1317%" height="15" fill="rgb(207,160,47)" fg:x="161" fg:w="28"/><text x="1.0073%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.02%)</title><rect x="0.8890%" y="197" width="0.0188%" height="15" fill="rgb(228,23,34)" fg:x="189" fg:w="4"/><text x="1.1390%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (53 samples, 0.25%)</title><rect x="0.9079%" y="197" width="0.2493%" height="15" fill="rgb(218,30,26)" fg:x="193" fg:w="53"/><text x="1.1579%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (18 samples, 0.08%)</title><rect x="1.0725%" y="181" width="0.0847%" height="15" fill="rgb(220,122,19)" fg:x="228" fg:w="18"/><text x="1.3225%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.08%)</title><rect x="1.0725%" y="165" width="0.0847%" height="15" fill="rgb(250,228,42)" fg:x="228" fg:w="18"/><text x="1.3225%" y="175.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (247 samples, 1.16%)</title><rect x="0.0000%" y="213" width="1.1619%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="247"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.03%)</title><rect x="1.1901%" y="213" width="0.0282%" height="15" fill="rgb(216,20,37)" fg:x="253" fg:w="6"/><text x="1.4401%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.07%)</title><rect x="1.2183%" y="213" width="0.0659%" height="15" fill="rgb(206,188,39)" fg:x="259" fg:w="14"/><text x="1.4683%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (6 samples, 0.03%)</title><rect x="1.2842%" y="213" width="0.0282%" height="15" fill="rgb(217,207,13)" fg:x="273" fg:w="6"/><text x="1.5342%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.03%)</title><rect x="1.2842%" y="197" width="0.0282%" height="15" fill="rgb(231,73,38)" fg:x="273" fg:w="6"/><text x="1.5342%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.03%)</title><rect x="1.2842%" y="181" width="0.0282%" height="15" fill="rgb(225,20,46)" fg:x="273" fg:w="6"/><text x="1.5342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.05%)</title><rect x="1.3171%" y="213" width="0.0470%" height="15" fill="rgb(210,31,41)" fg:x="280" fg:w="10"/><text x="1.5671%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (293 samples, 1.38%)</title><rect x="0.0000%" y="229" width="1.3782%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="293"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="1.3641%" y="213" width="0.0141%" height="15" fill="rgb(226,26,5)" fg:x="290" fg:w="3"/><text x="1.6141%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.02%)</title><rect x="1.3782%" y="229" width="0.0235%" height="15" fill="rgb(249,33,26)" fg:x="293" fg:w="5"/><text x="1.6282%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.03%)</title><rect x="2.6906%" y="197" width="0.0329%" height="15" fill="rgb(235,183,28)" fg:x="572" fg:w="7"/><text x="2.9406%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.02%)</title><rect x="2.7047%" y="181" width="0.0188%" height="15" fill="rgb(221,5,38)" fg:x="575" fg:w="4"/><text x="2.9547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (29 samples, 0.14%)</title><rect x="2.7236%" y="197" width="0.1364%" height="15" fill="rgb(247,18,42)" fg:x="579" fg:w="29"/><text x="2.9736%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (29 samples, 0.14%)</title><rect x="2.7236%" y="181" width="0.1364%" height="15" fill="rgb(241,131,45)" fg:x="579" fg:w="29"/><text x="2.9736%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (29 samples, 0.14%)</title><rect x="2.7236%" y="165" width="0.1364%" height="15" fill="rgb(249,31,29)" fg:x="579" fg:w="29"/><text x="2.9736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (5 samples, 0.02%)</title><rect x="2.8600%" y="197" width="0.0235%" height="15" fill="rgb(225,111,53)" fg:x="608" fg:w="5"/><text x="3.1100%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (315 samples, 1.48%)</title><rect x="1.4065%" y="213" width="1.4817%" height="15" fill="rgb(238,160,17)" fg:x="299" fg:w="315"/><text x="1.6565%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.04%)</title><rect x="2.8882%" y="197" width="0.0376%" height="15" fill="rgb(214,148,48)" fg:x="614" fg:w="8"/><text x="3.1382%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (23 samples, 0.11%)</title><rect x="2.8882%" y="213" width="0.1082%" height="15" fill="rgb(232,36,49)" fg:x="614" fg:w="23"/><text x="3.1382%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.07%)</title><rect x="2.9258%" y="197" width="0.0706%" height="15" fill="rgb(209,103,24)" fg:x="622" fg:w="15"/><text x="3.1758%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.07%)</title><rect x="2.9258%" y="181" width="0.0706%" height="15" fill="rgb(229,88,8)" fg:x="622" fg:w="15"/><text x="3.1758%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.07%)</title><rect x="2.9258%" y="165" width="0.0706%" height="15" fill="rgb(213,181,19)" fg:x="622" fg:w="15"/><text x="3.1758%" y="175.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (343 samples, 1.61%)</title><rect x="1.4018%" y="229" width="1.6134%" height="15" fill="rgb(254,191,54)" fg:x="298" fg:w="343"/><text x="1.6518%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (33 samples, 0.16%)</title><rect x="3.0152%" y="229" width="0.1552%" height="15" fill="rgb(241,83,37)" fg:x="641" fg:w="33"/><text x="3.2652%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (7 samples, 0.03%)</title><rect x="3.1704%" y="229" width="0.0329%" height="15" fill="rgb(233,36,39)" fg:x="674" fg:w="7"/><text x="3.4204%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (15 samples, 0.07%)</title><rect x="3.2033%" y="229" width="0.0706%" height="15" fill="rgb(226,3,54)" fg:x="681" fg:w="15"/><text x="3.4533%" y="239.50"></text></g><g><title>gj`__rdl_alloc (5 samples, 0.02%)</title><rect x="3.2739%" y="229" width="0.0235%" height="15" fill="rgb(245,192,40)" fg:x="696" fg:w="5"/><text x="3.5239%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (447 samples, 2.10%)</title><rect x="3.6878%" y="213" width="2.1026%" height="15" fill="rgb(238,167,29)" fg:x="784" fg:w="447"/><text x="3.9378%" y="223.50">g..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (56 samples, 0.26%)</title><rect x="5.5271%" y="197" width="0.2634%" height="15" fill="rgb(232,182,51)" fg:x="1175" fg:w="56"/><text x="5.7771%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (7 samples, 0.03%)</title><rect x="5.7905%" y="213" width="0.0329%" height="15" fill="rgb(231,60,39)" fg:x="1231" fg:w="7"/><text x="6.0405%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,121 samples, 5.27%)</title><rect x="8.2318%" y="181" width="5.2731%" height="15" fill="rgb(208,69,12)" fg:x="1750" fg:w="1121"/><text x="8.4818%" y="191.50">gj`&lt;co..</text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,292 samples, 6.08%)</title><rect x="7.5592%" y="197" width="6.0774%" height="15" fill="rgb(235,93,37)" fg:x="1607" fg:w="1292"/><text x="7.8092%" y="207.50">gj`&lt;smal..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (28 samples, 0.13%)</title><rect x="13.5049%" y="181" width="0.1317%" height="15" fill="rgb(213,116,39)" fg:x="2871" fg:w="28"/><text x="13.7549%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (61 samples, 0.29%)</title><rect x="14.5679%" y="165" width="0.2869%" height="15" fill="rgb(222,207,29)" fg:x="3097" fg:w="61"/><text x="14.8179%" y="175.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (110 samples, 0.52%)</title><rect x="14.3939%" y="181" width="0.5174%" height="15" fill="rgb(206,96,30)" fg:x="3060" fg:w="110"/><text x="14.6439%" y="191.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (12 samples, 0.06%)</title><rect x="14.8549%" y="165" width="0.0564%" height="15" fill="rgb(218,138,4)" fg:x="3158" fg:w="12"/><text x="15.1049%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (273 samples, 1.28%)</title><rect x="13.6366%" y="197" width="1.2842%" height="15" fill="rgb(250,191,14)" fg:x="2899" fg:w="273"/><text x="13.8866%" y="207.50"></text></g><g><title>gj`gj::join::singleton_join_inner (1,954 samples, 9.19%)</title><rect x="5.8234%" y="213" width="9.1914%" height="15" fill="rgb(239,60,40)" fg:x="1238" fg:w="1954"/><text x="6.0734%" y="223.50">gj`gj::join::..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (20 samples, 0.09%)</title><rect x="14.9207%" y="197" width="0.0941%" height="15" fill="rgb(206,27,48)" fg:x="3172" fg:w="20"/><text x="15.1707%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (32 samples, 0.15%)</title><rect x="15.0148%" y="213" width="0.1505%" height="15" fill="rgb(225,35,8)" fg:x="3192" fg:w="32"/><text x="15.2648%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (2,541 samples, 11.95%)</title><rect x="3.2974%" y="229" width="11.9526%" height="15" fill="rgb(250,213,24)" fg:x="701" fg:w="2541"/><text x="3.5474%" y="239.50">gj`gj::join::bushy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.08%)</title><rect x="15.1653%" y="213" width="0.0847%" height="15" fill="rgb(247,123,22)" fg:x="3224" fg:w="18"/><text x="15.4153%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (19 samples, 0.09%)</title><rect x="15.2500%" y="229" width="0.0894%" height="15" fill="rgb(231,138,38)" fg:x="3242" fg:w="19"/><text x="15.5000%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (5 samples, 0.02%)</title><rect x="15.3441%" y="229" width="0.0235%" height="15" fill="rgb(231,145,46)" fg:x="3262" fg:w="5"/><text x="15.5941%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.05%)</title><rect x="15.7863%" y="213" width="0.0470%" height="15" fill="rgb(251,118,11)" fg:x="3356" fg:w="10"/><text x="16.0363%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="16.6471%" y="117" width="0.0141%" height="15" fill="rgb(217,147,25)" fg:x="3539" fg:w="3"/><text x="16.8971%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.04%)</title><rect x="16.6377%" y="165" width="0.0376%" height="15" fill="rgb(247,81,37)" fg:x="3537" fg:w="8"/><text x="16.8877%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="16.6424%" y="149" width="0.0329%" height="15" fill="rgb(209,12,38)" fg:x="3538" fg:w="7"/><text x="16.8924%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.03%)</title><rect x="16.6424%" y="133" width="0.0329%" height="15" fill="rgb(227,1,9)" fg:x="3538" fg:w="7"/><text x="16.8924%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="16.6612%" y="117" width="0.0141%" height="15" fill="rgb(248,47,43)" fg:x="3542" fg:w="3"/><text x="16.9112%" y="127.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (10 samples, 0.05%)</title><rect x="16.6377%" y="181" width="0.0470%" height="15" fill="rgb(221,10,30)" fg:x="3537" fg:w="10"/><text x="16.8877%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.06%)</title><rect x="16.6330%" y="197" width="0.0564%" height="15" fill="rgb(210,229,1)" fg:x="3536" fg:w="12"/><text x="16.8830%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="17.4797%" y="133" width="0.0188%" height="15" fill="rgb(222,148,37)" fg:x="3716" fg:w="4"/><text x="17.7297%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (36 samples, 0.17%)</title><rect x="17.4091%" y="149" width="0.1693%" height="15" fill="rgb(234,67,33)" fg:x="3701" fg:w="36"/><text x="17.6591%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.08%)</title><rect x="17.4985%" y="133" width="0.0800%" height="15" fill="rgb(247,98,35)" fg:x="3720" fg:w="17"/><text x="17.7485%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.19%)</title><rect x="17.3903%" y="165" width="0.1929%" height="15" fill="rgb(247,138,52)" fg:x="3697" fg:w="41"/><text x="17.6403%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.22%)</title><rect x="17.3809%" y="181" width="0.2211%" height="15" fill="rgb(213,79,30)" fg:x="3695" fg:w="47"/><text x="17.6309%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="17.5831%" y="165" width="0.0188%" height="15" fill="rgb(246,177,23)" fg:x="3738" fg:w="4"/><text x="17.8331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="17.5878%" y="149" width="0.0141%" height="15" fill="rgb(230,62,27)" fg:x="3739" fg:w="3"/><text x="17.8378%" y="159.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (196 samples, 0.92%)</title><rect x="16.6894%" y="197" width="0.9220%" height="15" fill="rgb(216,154,8)" fg:x="3548" fg:w="196"/><text x="16.9394%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="17.6114%" y="197" width="0.0188%" height="15" fill="rgb(244,35,45)" fg:x="3744" fg:w="4"/><text x="17.8614%" y="207.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (406 samples, 1.91%)</title><rect x="15.8380%" y="213" width="1.9098%" height="15" fill="rgb(251,115,12)" fg:x="3367" fg:w="406"/><text x="16.0880%" y="223.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.08%)</title><rect x="17.6678%" y="197" width="0.0800%" height="15" fill="rgb(240,54,50)" fg:x="3756" fg:w="17"/><text x="17.9178%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (72 samples, 0.34%)</title><rect x="17.7478%" y="213" width="0.3387%" height="15" fill="rgb(233,84,52)" fg:x="3773" fg:w="72"/><text x="17.9978%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="18.1899%" y="197" width="0.0235%" height="15" fill="rgb(207,117,47)" fg:x="3867" fg:w="5"/><text x="18.4399%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (38 samples, 0.18%)</title><rect x="18.6650%" y="165" width="0.1787%" height="15" fill="rgb(249,43,39)" fg:x="3968" fg:w="38"/><text x="18.9150%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (126 samples, 0.59%)</title><rect x="18.2699%" y="181" width="0.5927%" height="15" fill="rgb(209,38,44)" fg:x="3884" fg:w="126"/><text x="18.5199%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.02%)</title><rect x="18.8438%" y="165" width="0.0188%" height="15" fill="rgb(236,212,23)" fg:x="4006" fg:w="4"/><text x="19.0938%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (168 samples, 0.79%)</title><rect x="18.0865%" y="213" width="0.7903%" height="15" fill="rgb(242,79,21)" fg:x="3845" fg:w="168"/><text x="18.3365%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (141 samples, 0.66%)</title><rect x="18.2135%" y="197" width="0.6632%" height="15" fill="rgb(211,96,35)" fg:x="3872" fg:w="141"/><text x="18.4635%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="18.8626%" y="181" width="0.0141%" height="15" fill="rgb(253,215,40)" fg:x="4010" fg:w="3"/><text x="19.1126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.03%)</title><rect x="18.8767%" y="213" width="0.0329%" height="15" fill="rgb(211,81,21)" fg:x="4013" fg:w="7"/><text x="19.1267%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.28%)</title><rect x="18.9096%" y="213" width="0.2775%" height="15" fill="rgb(208,190,38)" fg:x="4020" fg:w="59"/><text x="19.1596%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.14%)</title><rect x="19.0508%" y="197" width="0.1364%" height="15" fill="rgb(235,213,38)" fg:x="4050" fg:w="29"/><text x="19.3008%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.03%)</title><rect x="19.1919%" y="213" width="0.0329%" height="15" fill="rgb(237,122,38)" fg:x="4080" fg:w="7"/><text x="19.4419%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (222 samples, 1.04%)</title><rect x="19.2248%" y="213" width="1.0443%" height="15" fill="rgb(244,218,35)" fg:x="4087" fg:w="222"/><text x="19.4748%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (1,046 samples, 4.92%)</title><rect x="15.3676%" y="229" width="4.9203%" height="15" fill="rgb(240,68,47)" fg:x="3267" fg:w="1046"/><text x="15.6176%" y="239.50">gj`gj:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="20.2738%" y="213" width="0.0141%" height="15" fill="rgb(210,16,53)" fg:x="4310" fg:w="3"/><text x="20.5238%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (505 samples, 2.38%)</title><rect x="20.2879%" y="229" width="2.3755%" height="15" fill="rgb(235,124,12)" fg:x="4313" fg:w="505"/><text x="20.5379%" y="239.50">gj..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (505 samples, 2.38%)</title><rect x="20.2879%" y="213" width="2.3755%" height="15" fill="rgb(224,169,11)" fg:x="4313" fg:w="505"/><text x="20.5379%" y="223.50">gj..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (505 samples, 2.38%)</title><rect x="20.2879%" y="197" width="2.3755%" height="15" fill="rgb(250,166,2)" fg:x="4313" fg:w="505"/><text x="20.5379%" y="207.50">gj..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (505 samples, 2.38%)</title><rect x="20.2879%" y="181" width="2.3755%" height="15" fill="rgb(242,216,29)" fg:x="4313" fg:w="505"/><text x="20.5379%" y="191.50">gj..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (505 samples, 2.38%)</title><rect x="20.2879%" y="165" width="2.3755%" height="15" fill="rgb(230,116,27)" fg:x="4313" fg:w="505"/><text x="20.5379%" y="175.50">gj..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.14%)</title><rect x="22.6633%" y="213" width="0.1364%" height="15" fill="rgb(228,99,48)" fg:x="4818" fg:w="29"/><text x="22.9133%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.07%)</title><rect x="22.7998%" y="213" width="0.0706%" height="15" fill="rgb(253,11,6)" fg:x="4847" fg:w="15"/><text x="23.0498%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (173 samples, 0.81%)</title><rect x="22.8703%" y="213" width="0.8138%" height="15" fill="rgb(247,143,39)" fg:x="4862" fg:w="173"/><text x="23.1203%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (24 samples, 0.11%)</title><rect x="23.6841%" y="213" width="0.1129%" height="15" fill="rgb(236,97,10)" fg:x="5035" fg:w="24"/><text x="23.9341%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (33 samples, 0.16%)</title><rect x="23.7970%" y="213" width="0.1552%" height="15" fill="rgb(233,208,19)" fg:x="5059" fg:w="33"/><text x="24.0470%" y="223.50"></text></g><g><title>gj`__rdl_alloc (43 samples, 0.20%)</title><rect x="23.9522%" y="213" width="0.2023%" height="15" fill="rgb(216,164,2)" fg:x="5092" fg:w="43"/><text x="24.2022%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (31 samples, 0.15%)</title><rect x="24.1545%" y="213" width="0.1458%" height="15" fill="rgb(220,129,5)" fg:x="5135" fg:w="31"/><text x="24.4045%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.13%)</title><rect x="29.0606%" y="165" width="0.1317%" height="15" fill="rgb(242,17,10)" fg:x="6178" fg:w="28"/><text x="29.3106%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (454 samples, 2.14%)</title><rect x="29.7239%" y="149" width="2.1356%" height="15" fill="rgb(242,107,0)" fg:x="6319" fg:w="454"/><text x="29.9739%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (162 samples, 0.76%)</title><rect x="31.0974%" y="133" width="0.7620%" height="15" fill="rgb(251,28,31)" fg:x="6611" fg:w="162"/><text x="31.3474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (818 samples, 3.85%)</title><rect x="28.1622%" y="181" width="3.8478%" height="15" fill="rgb(233,223,10)" fg:x="5987" fg:w="818"/><text x="28.4122%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (599 samples, 2.82%)</title><rect x="29.1923%" y="165" width="2.8176%" height="15" fill="rgb(215,21,27)" fg:x="6206" fg:w="599"/><text x="29.4423%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (32 samples, 0.15%)</title><rect x="31.8594%" y="149" width="0.1505%" height="15" fill="rgb(232,23,21)" fg:x="6773" fg:w="32"/><text x="32.1094%" y="159.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (929 samples, 4.37%)</title><rect x="27.9552%" y="197" width="4.3699%" height="15" fill="rgb(244,5,23)" fg:x="5943" fg:w="929"/><text x="28.2052%" y="207.50">gj`&lt;a..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (67 samples, 0.32%)</title><rect x="32.0100%" y="181" width="0.3152%" height="15" fill="rgb(226,81,46)" fg:x="6805" fg:w="67"/><text x="32.2600%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (266 samples, 1.25%)</title><rect x="32.3251%" y="197" width="1.2512%" height="15" fill="rgb(247,70,30)" fg:x="6872" fg:w="266"/><text x="32.5751%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (752 samples, 3.54%)</title><rect x="33.5764%" y="197" width="3.5373%" height="15" fill="rgb(212,68,19)" fg:x="7138" fg:w="752"/><text x="33.8264%" y="207.50">gj`..</text></g><g><title>gj`DYLD-STUB$$malloc (10 samples, 0.05%)</title><rect x="38.9247%" y="149" width="0.0470%" height="15" fill="rgb(240,187,13)" fg:x="8275" fg:w="10"/><text x="39.1747%" y="159.50"></text></g><g><title>gj`__rdl_alloc (19 samples, 0.09%)</title><rect x="38.9717%" y="149" width="0.0894%" height="15" fill="rgb(223,113,26)" fg:x="8285" fg:w="19"/><text x="39.2217%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.18%)</title><rect x="39.9031%" y="117" width="0.1787%" height="15" fill="rgb(206,192,2)" fg:x="8483" fg:w="38"/><text x="40.1531%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.09%)</title><rect x="40.2465%" y="101" width="0.0941%" height="15" fill="rgb(241,108,4)" fg:x="8556" fg:w="20"/><text x="40.4965%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (68 samples, 0.32%)</title><rect x="41.2955%" y="85" width="0.3199%" height="15" fill="rgb(247,173,49)" fg:x="8779" fg:w="68"/><text x="41.5455%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (848 samples, 3.99%)</title><rect x="40.0818%" y="117" width="3.9889%" height="15" fill="rgb(224,114,35)" fg:x="8521" fg:w="848"/><text x="40.3318%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (793 samples, 3.73%)</title><rect x="40.3406%" y="101" width="3.7302%" height="15" fill="rgb(245,159,27)" fg:x="8576" fg:w="793"/><text x="40.5906%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (522 samples, 2.46%)</title><rect x="41.6153%" y="85" width="2.4554%" height="15" fill="rgb(245,172,44)" fg:x="8847" fg:w="522"/><text x="41.8653%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (293 samples, 1.38%)</title><rect x="42.6925%" y="69" width="1.3782%" height="15" fill="rgb(236,23,11)" fg:x="9076" fg:w="293"/><text x="42.9425%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,034 samples, 4.86%)</title><rect x="39.3104%" y="133" width="4.8638%" height="15" fill="rgb(205,117,38)" fg:x="8357" fg:w="1034"/><text x="39.5604%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.10%)</title><rect x="44.0707%" y="117" width="0.1035%" height="15" fill="rgb(237,72,25)" fg:x="9369" fg:w="22"/><text x="44.3207%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (36 samples, 0.17%)</title><rect x="44.1742%" y="133" width="0.1693%" height="15" fill="rgb(244,70,9)" fg:x="9391" fg:w="36"/><text x="44.4242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.06%)</title><rect x="44.3436%" y="133" width="0.0564%" height="15" fill="rgb(217,125,39)" fg:x="9427" fg:w="12"/><text x="44.5936%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (1,143 samples, 5.38%)</title><rect x="39.0611%" y="149" width="5.3765%" height="15" fill="rgb(235,36,10)" fg:x="8304" fg:w="1143"/><text x="39.3111%" y="159.50">gj`allo..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.04%)</title><rect x="44.4000%" y="133" width="0.0376%" height="15" fill="rgb(251,123,47)" fg:x="9439" fg:w="8"/><text x="44.6500%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,226 samples, 5.77%)</title><rect x="38.6801%" y="165" width="5.7670%" height="15" fill="rgb(221,13,13)" fg:x="8223" fg:w="1226"/><text x="38.9301%" y="175.50">gj`allo..</text></g><g><title>gj`alloc::raw_vec::finish_grow (26 samples, 0.12%)</title><rect x="44.4471%" y="165" width="0.1223%" height="15" fill="rgb(238,131,9)" fg:x="9449" fg:w="26"/><text x="44.6971%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (179 samples, 0.84%)</title><rect x="44.5694%" y="165" width="0.8420%" height="15" fill="rgb(211,50,8)" fg:x="9475" fg:w="179"/><text x="44.8194%" y="175.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (3 samples, 0.01%)</title><rect x="46.1499%" y="149" width="0.0141%" height="15" fill="rgb(245,182,24)" fg:x="9811" fg:w="3"/><text x="46.3999%" y="159.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (160 samples, 0.75%)</title><rect x="46.1640%" y="149" width="0.7526%" height="15" fill="rgb(242,14,37)" fg:x="9814" fg:w="160"/><text x="46.4140%" y="159.50"></text></g><g><title>gj`bytes::bytes::shared_clone (3 samples, 0.01%)</title><rect x="48.1725%" y="133" width="0.0141%" height="15" fill="rgb(246,228,12)" fg:x="10241" fg:w="3"/><text x="48.4225%" y="143.50"></text></g><g><title>gj`core::str::converts::from_utf8 (12 samples, 0.06%)</title><rect x="48.1914%" y="133" width="0.0564%" height="15" fill="rgb(213,55,15)" fg:x="10245" fg:w="12"/><text x="48.4414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.03%)</title><rect x="48.2901%" y="85" width="0.0282%" height="15" fill="rgb(209,9,3)" fg:x="10266" fg:w="6"/><text x="48.5401%" y="95.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (16 samples, 0.08%)</title><rect x="48.2478%" y="133" width="0.0753%" height="15" fill="rgb(230,59,30)" fg:x="10257" fg:w="16"/><text x="48.4978%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.07%)</title><rect x="48.2525%" y="117" width="0.0706%" height="15" fill="rgb(209,121,21)" fg:x="10258" fg:w="15"/><text x="48.5025%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.04%)</title><rect x="48.2807%" y="101" width="0.0423%" height="15" fill="rgb(220,109,13)" fg:x="10264" fg:w="9"/><text x="48.5307%" y="111.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (309 samples, 1.45%)</title><rect x="46.9166%" y="149" width="1.4535%" height="15" fill="rgb(232,18,1)" fg:x="9974" fg:w="309"/><text x="47.1666%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.05%)</title><rect x="48.3231%" y="133" width="0.0470%" height="15" fill="rgb(215,41,42)" fg:x="10273" fg:w="10"/><text x="48.5731%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (14 samples, 0.07%)</title><rect x="48.5253%" y="101" width="0.0659%" height="15" fill="rgb(224,123,36)" fg:x="10316" fg:w="14"/><text x="48.7753%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (5 samples, 0.02%)</title><rect x="48.5677%" y="85" width="0.0235%" height="15" fill="rgb(240,125,3)" fg:x="10325" fg:w="5"/><text x="48.8177%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (25 samples, 0.12%)</title><rect x="48.4924%" y="117" width="0.1176%" height="15" fill="rgb(205,98,50)" fg:x="10309" fg:w="25"/><text x="48.7424%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (4 samples, 0.02%)</title><rect x="48.5912%" y="101" width="0.0188%" height="15" fill="rgb(205,185,37)" fg:x="10330" fg:w="4"/><text x="48.8412%" y="111.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (42 samples, 0.20%)</title><rect x="48.4924%" y="133" width="0.1976%" height="15" fill="rgb(238,207,15)" fg:x="10309" fg:w="42"/><text x="48.7424%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.07%)</title><rect x="48.6241%" y="117" width="0.0659%" height="15" fill="rgb(213,199,42)" fg:x="10337" fg:w="14"/><text x="48.8741%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (705 samples, 3.32%)</title><rect x="45.4114%" y="165" width="3.3162%" height="15" fill="rgb(235,201,11)" fg:x="9654" fg:w="705"/><text x="45.6614%" y="175.50">gj`..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (76 samples, 0.36%)</title><rect x="48.3701%" y="149" width="0.3575%" height="15" fill="rgb(207,46,11)" fg:x="10283" fg:w="76"/><text x="48.6201%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (8 samples, 0.04%)</title><rect x="48.6900%" y="133" width="0.0376%" height="15" fill="rgb(241,35,35)" fg:x="10351" fg:w="8"/><text x="48.9400%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (23 samples, 0.11%)</title><rect x="48.7276%" y="165" width="0.1082%" height="15" fill="rgb(243,32,47)" fg:x="10359" fg:w="23"/><text x="48.9776%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (54 samples, 0.25%)</title><rect x="48.8358%" y="165" width="0.2540%" height="15" fill="rgb(247,202,23)" fg:x="10382" fg:w="54"/><text x="49.0858%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (66 samples, 0.31%)</title><rect x="49.0898%" y="165" width="0.3105%" height="15" fill="rgb(219,102,11)" fg:x="10436" fg:w="66"/><text x="49.3398%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (73 samples, 0.34%)</title><rect x="50.3316%" y="149" width="0.3434%" height="15" fill="rgb(243,110,44)" fg:x="10700" fg:w="73"/><text x="50.5816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (404 samples, 1.90%)</title><rect x="51.3006%" y="133" width="1.9004%" height="15" fill="rgb(222,74,54)" fg:x="10906" fg:w="404"/><text x="51.5506%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (130 samples, 0.61%)</title><rect x="52.5895%" y="117" width="0.6115%" height="15" fill="rgb(216,99,12)" fg:x="11180" fg:w="130"/><text x="52.8395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (848 samples, 3.99%)</title><rect x="49.4003%" y="165" width="3.9889%" height="15" fill="rgb(226,22,26)" fg:x="10502" fg:w="848"/><text x="49.6503%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (577 samples, 2.71%)</title><rect x="50.6750%" y="149" width="2.7141%" height="15" fill="rgb(217,163,10)" fg:x="10773" fg:w="577"/><text x="50.9250%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.19%)</title><rect x="53.2010%" y="133" width="0.1882%" height="15" fill="rgb(213,25,53)" fg:x="11310" fg:w="40"/><text x="53.4510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (63 samples, 0.30%)</title><rect x="53.3892%" y="165" width="0.2963%" height="15" fill="rgb(252,105,26)" fg:x="11350" fg:w="63"/><text x="53.6392%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (3,464 samples, 16.29%)</title><rect x="37.4053%" y="181" width="16.2943%" height="15" fill="rgb(220,39,43)" fg:x="7952" fg:w="3464"/><text x="37.6553%" y="191.50">gj`&lt;parquet::record::read..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="53.6855%" y="165" width="0.0141%" height="15" fill="rgb(229,68,48)" fg:x="11413" fg:w="3"/><text x="53.9355%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (40 samples, 0.19%)</title><rect x="53.6996%" y="181" width="0.1882%" height="15" fill="rgb(252,8,32)" fg:x="11416" fg:w="40"/><text x="53.9496%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (28 samples, 0.13%)</title><rect x="53.8878%" y="181" width="0.1317%" height="15" fill="rgb(223,20,43)" fg:x="11456" fg:w="28"/><text x="54.1378%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (30 samples, 0.14%)</title><rect x="54.0195%" y="181" width="0.1411%" height="15" fill="rgb(229,81,49)" fg:x="11484" fg:w="30"/><text x="54.2695%" y="191.50"></text></g><g><title>gj`__rdl_alloc (27 samples, 0.13%)</title><rect x="54.1606%" y="181" width="0.1270%" height="15" fill="rgb(236,28,36)" fg:x="11514" fg:w="27"/><text x="54.4106%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.15%)</title><rect x="54.2876%" y="181" width="0.1505%" height="15" fill="rgb(249,185,26)" fg:x="11541" fg:w="32"/><text x="54.5376%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="54.4381%" y="133" width="0.0141%" height="15" fill="rgb(249,174,33)" fg:x="11573" fg:w="3"/><text x="54.6881%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (3 samples, 0.01%)</title><rect x="54.4381%" y="117" width="0.0141%" height="15" fill="rgb(233,201,37)" fg:x="11573" fg:w="3"/><text x="54.6881%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (3 samples, 0.01%)</title><rect x="54.4381%" y="101" width="0.0141%" height="15" fill="rgb(221,78,26)" fg:x="11573" fg:w="3"/><text x="54.6881%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.01%)</title><rect x="54.4381%" y="85" width="0.0141%" height="15" fill="rgb(250,127,30)" fg:x="11573" fg:w="3"/><text x="54.6881%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="54.4381%" y="69" width="0.0141%" height="15" fill="rgb(230,49,44)" fg:x="11573" fg:w="3"/><text x="54.6881%" y="79.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (4 samples, 0.02%)</title><rect x="54.4381%" y="149" width="0.0188%" height="15" fill="rgb(229,67,23)" fg:x="11573" fg:w="4"/><text x="54.6881%" y="159.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (5 samples, 0.02%)</title><rect x="54.4381%" y="181" width="0.0235%" height="15" fill="rgb(249,83,47)" fg:x="11573" fg:w="5"/><text x="54.6881%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (5 samples, 0.02%)</title><rect x="54.4381%" y="165" width="0.0235%" height="15" fill="rgb(215,43,3)" fg:x="11573" fg:w="5"/><text x="54.6881%" y="175.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (86 samples, 0.40%)</title><rect x="54.4805%" y="69" width="0.4045%" height="15" fill="rgb(238,154,13)" fg:x="11582" fg:w="86"/><text x="54.7305%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (95 samples, 0.45%)</title><rect x="54.4758%" y="85" width="0.4469%" height="15" fill="rgb(219,56,2)" fg:x="11581" fg:w="95"/><text x="54.7258%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.04%)</title><rect x="54.8850%" y="69" width="0.0376%" height="15" fill="rgb(233,0,4)" fg:x="11668" fg:w="8"/><text x="55.1350%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (101 samples, 0.48%)</title><rect x="54.4758%" y="101" width="0.4751%" height="15" fill="rgb(235,30,7)" fg:x="11581" fg:w="101"/><text x="54.7258%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.03%)</title><rect x="54.9226%" y="85" width="0.0282%" height="15" fill="rgb(250,79,13)" fg:x="11676" fg:w="6"/><text x="55.1726%" y="95.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (11 samples, 0.05%)</title><rect x="54.9603%" y="85" width="0.0517%" height="15" fill="rgb(211,146,34)" fg:x="11684" fg:w="11"/><text x="55.2103%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (11 samples, 0.05%)</title><rect x="54.9603%" y="69" width="0.0517%" height="15" fill="rgb(228,22,38)" fg:x="11684" fg:w="11"/><text x="55.2103%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.05%)</title><rect x="54.9603%" y="53" width="0.0517%" height="15" fill="rgb(235,168,5)" fg:x="11684" fg:w="11"/><text x="55.2103%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (10 samples, 0.05%)</title><rect x="54.9650%" y="37" width="0.0470%" height="15" fill="rgb(221,155,16)" fg:x="11685" fg:w="10"/><text x="55.2150%" y="47.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (14 samples, 0.07%)</title><rect x="54.9508%" y="101" width="0.0659%" height="15" fill="rgb(215,215,53)" fg:x="11682" fg:w="14"/><text x="55.2008%" y="111.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (67 samples, 0.32%)</title><rect x="55.0167%" y="69" width="0.3152%" height="15" fill="rgb(223,4,10)" fg:x="11696" fg:w="67"/><text x="55.2667%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (66 samples, 0.31%)</title><rect x="55.0214%" y="53" width="0.3105%" height="15" fill="rgb(234,103,6)" fg:x="11697" fg:w="66"/><text x="55.2714%" y="63.50"></text></g><g><title>gj`std::io::default_read_buf (69 samples, 0.32%)</title><rect x="55.0167%" y="85" width="0.3246%" height="15" fill="rgb(227,97,0)" fg:x="11696" fg:w="69"/><text x="55.2667%" y="95.50"></text></g><g><title>gj`std::io::Read::read_to_end (78 samples, 0.37%)</title><rect x="55.0167%" y="101" width="0.3669%" height="15" fill="rgb(234,150,53)" fg:x="11696" fg:w="78"/><text x="55.2667%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (9 samples, 0.04%)</title><rect x="55.3413%" y="85" width="0.0423%" height="15" fill="rgb(228,201,54)" fg:x="11765" fg:w="9"/><text x="55.5913%" y="95.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (198 samples, 0.93%)</title><rect x="54.4710%" y="117" width="0.9314%" height="15" fill="rgb(222,22,37)" fg:x="11580" fg:w="198"/><text x="54.7210%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (202 samples, 0.95%)</title><rect x="54.4616%" y="181" width="0.9502%" height="15" fill="rgb(237,53,32)" fg:x="11578" fg:w="202"/><text x="54.7116%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (202 samples, 0.95%)</title><rect x="54.4616%" y="165" width="0.9502%" height="15" fill="rgb(233,25,53)" fg:x="11578" fg:w="202"/><text x="54.7116%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (202 samples, 0.95%)</title><rect x="54.4616%" y="149" width="0.9502%" height="15" fill="rgb(210,40,34)" fg:x="11578" fg:w="202"/><text x="54.7116%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (200 samples, 0.94%)</title><rect x="54.4710%" y="133" width="0.9408%" height="15" fill="rgb(241,220,44)" fg:x="11580" fg:w="200"/><text x="54.7210%" y="143.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (67 samples, 0.32%)</title><rect x="55.4165%" y="181" width="0.3152%" height="15" fill="rgb(235,28,35)" fg:x="11781" fg:w="67"/><text x="55.6665%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::reader_tree (4 samples, 0.02%)</title><rect x="55.7317%" y="165" width="0.0188%" height="15" fill="rgb(210,56,17)" fg:x="11848" fg:w="4"/><text x="55.9817%" y="175.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (5 samples, 0.02%)</title><rect x="55.7317%" y="181" width="0.0235%" height="15" fill="rgb(224,130,29)" fg:x="11848" fg:w="5"/><text x="55.9817%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (51 samples, 0.24%)</title><rect x="55.7552%" y="181" width="0.2399%" height="15" fill="rgb(235,212,8)" fg:x="11853" fg:w="51"/><text x="56.0052%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.02%)</title><rect x="55.9951%" y="181" width="0.0188%" height="15" fill="rgb(223,33,50)" fg:x="11904" fg:w="4"/><text x="56.2451%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (4,215 samples, 19.83%)</title><rect x="37.1137%" y="197" width="19.8269%" height="15" fill="rgb(219,149,13)" fg:x="7890" fg:w="4215"/><text x="37.3637%" y="207.50">gj`&lt;parquet::record::reader::Ro..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (197 samples, 0.93%)</title><rect x="56.0139%" y="181" width="0.9267%" height="15" fill="rgb(250,156,29)" fg:x="11908" fg:w="197"/><text x="56.2639%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (45 samples, 0.21%)</title><rect x="56.9406%" y="197" width="0.2117%" height="15" fill="rgb(216,193,19)" fg:x="12105" fg:w="45"/><text x="57.1906%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (80 samples, 0.38%)</title><rect x="57.1523%" y="197" width="0.3763%" height="15" fill="rgb(216,135,14)" fg:x="12150" fg:w="80"/><text x="57.4023%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (32 samples, 0.15%)</title><rect x="57.5286%" y="197" width="0.1505%" height="15" fill="rgb(241,47,5)" fg:x="12230" fg:w="32"/><text x="57.7786%" y="207.50"></text></g><g><title>gj`__rdl_alloc (36 samples, 0.17%)</title><rect x="57.6791%" y="197" width="0.1693%" height="15" fill="rgb(233,42,35)" fg:x="12262" fg:w="36"/><text x="57.9291%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (5 samples, 0.02%)</title><rect x="57.8484%" y="117" width="0.0235%" height="15" fill="rgb(231,13,6)" fg:x="12298" fg:w="5"/><text x="58.0984%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (5 samples, 0.02%)</title><rect x="57.8484%" y="101" width="0.0235%" height="15" fill="rgb(207,181,40)" fg:x="12298" fg:w="5"/><text x="58.0984%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.02%)</title><rect x="57.8720%" y="117" width="0.0235%" height="15" fill="rgb(254,173,49)" fg:x="12303" fg:w="5"/><text x="58.1220%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.02%)</title><rect x="57.8720%" y="101" width="0.0235%" height="15" fill="rgb(221,1,38)" fg:x="12303" fg:w="5"/><text x="58.1220%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.02%)</title><rect x="57.8720%" y="85" width="0.0235%" height="15" fill="rgb(206,124,46)" fg:x="12303" fg:w="5"/><text x="58.1220%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.06%)</title><rect x="57.8484%" y="133" width="0.0564%" height="15" fill="rgb(249,21,11)" fg:x="12298" fg:w="12"/><text x="58.0984%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.08%)</title><rect x="57.8484%" y="197" width="0.0753%" height="15" fill="rgb(222,201,40)" fg:x="12298" fg:w="16"/><text x="58.0984%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (16 samples, 0.08%)</title><rect x="57.8484%" y="181" width="0.0753%" height="15" fill="rgb(235,61,29)" fg:x="12298" fg:w="16"/><text x="58.0984%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.08%)</title><rect x="57.8484%" y="165" width="0.0753%" height="15" fill="rgb(219,207,3)" fg:x="12298" fg:w="16"/><text x="58.0984%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.08%)</title><rect x="57.8484%" y="149" width="0.0753%" height="15" fill="rgb(222,56,46)" fg:x="12298" fg:w="16"/><text x="58.0984%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="57.9049%" y="133" width="0.0188%" height="15" fill="rgb(239,76,54)" fg:x="12310" fg:w="4"/><text x="58.1549%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (136 samples, 0.64%)</title><rect x="57.9237%" y="197" width="0.6397%" height="15" fill="rgb(231,124,27)" fg:x="12314" fg:w="136"/><text x="58.1737%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (81 samples, 0.38%)</title><rect x="58.5634%" y="197" width="0.3810%" height="15" fill="rgb(249,195,6)" fg:x="12450" fg:w="81"/><text x="58.8134%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (800 samples, 3.76%)</title><rect x="59.9934%" y="181" width="3.7631%" height="15" fill="rgb(237,174,47)" fg:x="12754" fg:w="800"/><text x="60.2434%" y="191.50">gj`&lt;..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,346 samples, 6.33%)</title><rect x="58.9444%" y="197" width="6.3314%" height="15" fill="rgb(206,201,31)" fg:x="12531" fg:w="1346"/><text x="59.1944%" y="207.50">gj`hashb..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (323 samples, 1.52%)</title><rect x="63.7565%" y="181" width="1.5194%" height="15" fill="rgb(231,57,52)" fg:x="13554" fg:w="323"/><text x="64.0065%" y="191.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (3 samples, 0.01%)</title><rect x="65.2759%" y="197" width="0.0141%" height="15" fill="rgb(248,177,22)" fg:x="13877" fg:w="3"/><text x="65.5259%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (3 samples, 0.01%)</title><rect x="65.2759%" y="181" width="0.0141%" height="15" fill="rgb(215,211,37)" fg:x="13877" fg:w="3"/><text x="65.5259%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (67 samples, 0.32%)</title><rect x="66.4848%" y="181" width="0.3152%" height="15" fill="rgb(241,128,51)" fg:x="14134" fg:w="67"/><text x="66.7348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (401 samples, 1.89%)</title><rect x="67.3221%" y="165" width="1.8863%" height="15" fill="rgb(227,165,31)" fg:x="14312" fg:w="401"/><text x="67.5721%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (126 samples, 0.59%)</title><rect x="68.6156%" y="149" width="0.5927%" height="15" fill="rgb(228,167,24)" fg:x="14587" fg:w="126"/><text x="68.8656%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (874 samples, 4.11%)</title><rect x="65.2994%" y="197" width="4.1112%" height="15" fill="rgb(228,143,12)" fg:x="13882" fg:w="874"/><text x="65.5494%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (555 samples, 2.61%)</title><rect x="66.7999%" y="181" width="2.6107%" height="15" fill="rgb(249,149,8)" fg:x="14201" fg:w="555"/><text x="67.0499%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (43 samples, 0.20%)</title><rect x="69.2083%" y="165" width="0.2023%" height="15" fill="rgb(243,35,44)" fg:x="14713" fg:w="43"/><text x="69.4583%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (61 samples, 0.29%)</title><rect x="69.4106%" y="197" width="0.2869%" height="15" fill="rgb(246,89,9)" fg:x="14756" fg:w="61"/><text x="69.6606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (918 samples, 4.32%)</title><rect x="77.0215%" y="181" width="4.3182%" height="15" fill="rgb(233,213,13)" fg:x="16374" fg:w="918"/><text x="77.2715%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.13%)</title><rect x="81.3397%" y="181" width="0.1270%" height="15" fill="rgb(233,141,41)" fg:x="17292" fg:w="27"/><text x="81.5897%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2,668 samples, 12.55%)</title><rect x="69.6975%" y="197" width="12.5500%" height="15" fill="rgb(239,167,4)" fg:x="14817" fg:w="2668"/><text x="69.9475%" y="207.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`szone_size (166 samples, 0.78%)</title><rect x="81.4667%" y="181" width="0.7808%" height="15" fill="rgb(209,217,16)" fg:x="17319" fg:w="166"/><text x="81.7167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (144 samples, 0.68%)</title><rect x="81.5702%" y="165" width="0.6774%" height="15" fill="rgb(219,88,35)" fg:x="17341" fg:w="144"/><text x="81.8202%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (202 samples, 0.95%)</title><rect x="83.9550%" y="165" width="0.9502%" height="15" fill="rgb(220,193,23)" fg:x="17848" fg:w="202"/><text x="84.2050%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (703 samples, 3.31%)</title><rect x="82.2475%" y="197" width="3.3068%" height="15" fill="rgb(230,90,52)" fg:x="17485" fg:w="703"/><text x="82.4975%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (534 samples, 2.51%)</title><rect x="83.0425%" y="181" width="2.5119%" height="15" fill="rgb(252,106,19)" fg:x="17654" fg:w="534"/><text x="83.2925%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (138 samples, 0.65%)</title><rect x="84.9052%" y="165" width="0.6491%" height="15" fill="rgb(206,74,20)" fg:x="18050" fg:w="138"/><text x="85.1552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (125 samples, 0.59%)</title><rect x="85.5544%" y="197" width="0.5880%" height="15" fill="rgb(230,138,44)" fg:x="18188" fg:w="125"/><text x="85.8044%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (551 samples, 2.59%)</title><rect x="86.1423%" y="197" width="2.5918%" height="15" fill="rgb(235,182,43)" fg:x="18313" fg:w="551"/><text x="86.3923%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="88.7342%" y="197" width="0.0235%" height="15" fill="rgb(242,16,51)" fg:x="18864" fg:w="5"/><text x="88.9842%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (250 samples, 1.18%)</title><rect x="88.7577%" y="197" width="1.1760%" height="15" fill="rgb(248,9,4)" fg:x="18869" fg:w="250"/><text x="89.0077%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (43 samples, 0.20%)</title><rect x="89.9337%" y="197" width="0.2023%" height="15" fill="rgb(210,31,22)" fg:x="19119" fg:w="43"/><text x="90.1837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.16%)</title><rect x="90.1359%" y="197" width="0.1599%" height="15" fill="rgb(239,54,39)" fg:x="19162" fg:w="34"/><text x="90.3859%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 0.22%)</title><rect x="90.2959%" y="197" width="0.2211%" height="15" fill="rgb(230,99,41)" fg:x="19196" fg:w="47"/><text x="90.5459%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (565 samples, 2.66%)</title><rect x="90.5170%" y="197" width="2.6577%" height="15" fill="rgb(253,106,12)" fg:x="19243" fg:w="565"/><text x="90.7670%" y="207.50">li..</text></g><g><title>gj`gj::util::from_parquet (14,736 samples, 69.32%)</title><rect x="24.3003%" y="213" width="69.3165%" height="15" fill="rgb(213,46,41)" fg:x="5166" fg:w="14736"/><text x="24.5503%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (94 samples, 0.44%)</title><rect x="93.1747%" y="197" width="0.4422%" height="15" fill="rgb(215,133,35)" fg:x="19808" fg:w="94"/><text x="93.4247%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (141 samples, 0.66%)</title><rect x="93.6168%" y="213" width="0.6632%" height="15" fill="rgb(213,28,5)" fg:x="19902" fg:w="141"/><text x="93.8668%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (14 samples, 0.07%)</title><rect x="94.2801%" y="213" width="0.0659%" height="15" fill="rgb(215,77,49)" fg:x="20043" fg:w="14"/><text x="94.5301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.21%)</title><rect x="94.3459%" y="213" width="0.2070%" height="15" fill="rgb(248,100,22)" fg:x="20057" fg:w="44"/><text x="94.5959%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (242 samples, 1.14%)</title><rect x="94.5529%" y="213" width="1.1383%" height="15" fill="rgb(208,67,9)" fg:x="20101" fg:w="242"/><text x="94.8029%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (350 samples, 1.65%)</title><rect x="95.6912%" y="213" width="1.6464%" height="15" fill="rgb(219,133,21)" fg:x="20343" fg:w="350"/><text x="95.9412%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.07%)</title><rect x="97.3376%" y="213" width="0.0659%" height="15" fill="rgb(246,46,29)" fg:x="20693" fg:w="14"/><text x="97.5876%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (198 samples, 0.93%)</title><rect x="97.4035%" y="213" width="0.9314%" height="15" fill="rgb(246,185,52)" fg:x="20707" fg:w="198"/><text x="97.6535%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (192 samples, 0.90%)</title><rect x="98.3348%" y="213" width="0.9031%" height="15" fill="rgb(252,136,11)" fg:x="20905" fg:w="192"/><text x="98.5848%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (18 samples, 0.08%)</title><rect x="99.2380%" y="213" width="0.0847%" height="15" fill="rgb(219,138,53)" fg:x="21097" fg:w="18"/><text x="99.4880%" y="223.50"></text></g><g><title>gj`gj::util::load_db (16,399 samples, 77.14%)</title><rect x="22.6633%" y="229" width="77.1391%" height="15" fill="rgb(211,51,23)" fg:x="4818" fg:w="16399"/><text x="22.9133%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (102 samples, 0.48%)</title><rect x="99.3226%" y="213" width="0.4798%" height="15" fill="rgb(247,221,28)" fg:x="21115" fg:w="102"/><text x="99.5726%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="99.8024%" y="229" width="0.0141%" height="15" fill="rgb(251,222,45)" fg:x="21217" fg:w="3"/><text x="100.0524%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.02%)</title><rect x="99.8165%" y="229" width="0.0188%" height="15" fill="rgb(217,162,53)" fg:x="21220" fg:w="4"/><text x="100.0665%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.05%)</title><rect x="99.8354%" y="229" width="0.0517%" height="15" fill="rgb(229,93,14)" fg:x="21224" fg:w="11"/><text x="100.0854%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.02%)</title><rect x="99.8871%" y="229" width="0.0235%" height="15" fill="rgb(209,67,49)" fg:x="21235" fg:w="5"/><text x="100.1371%" y="239.50"></text></g><g><title>gj`main (21,248 samples, 99.95%)</title><rect x="0.0000%" y="309" width="99.9483%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="21248"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (21,248 samples, 99.95%)</title><rect x="0.0000%" y="293" width="99.9483%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="21248"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (21,248 samples, 99.95%)</title><rect x="0.0000%" y="277" width="99.9483%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="21248"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (21,248 samples, 99.95%)</title><rect x="0.0000%" y="261" width="99.9483%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="21248"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>gj`gj::main (21,248 samples, 99.95%)</title><rect x="0.0000%" y="245" width="99.9483%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="21248"/><text x="0.2500%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.04%)</title><rect x="99.9106%" y="229" width="0.0376%" height="15" fill="rgb(221,193,43)" fg:x="21240" fg:w="8"/><text x="100.1606%" y="239.50"></text></g><g><title>dyld`start (21,250 samples, 99.96%)</title><rect x="0.0000%" y="325" width="99.9577%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="21250"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>all (21,259 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="21259"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (9 samples, 0.04%)</title><rect x="99.9577%" y="325" width="0.0423%" height="15" fill="rgb(215,223,47)" fg:x="21250" fg:w="9"/><text x="100.2077%" y="335.50"></text></g></svg></svg>