<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="60196"><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265 samples, 0.44%)</title><rect x="0.1296%" y="197" width="0.4402%" height="15" fill="rgb(227,0,7)" fg:x="78" fg:w="265"/><text x="0.3796%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (49 samples, 0.08%)</title><rect x="0.9419%" y="181" width="0.0814%" height="15" fill="rgb(217,0,24)" fg:x="567" fg:w="49"/><text x="1.1919%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (277 samples, 0.46%)</title><rect x="0.5698%" y="197" width="0.4602%" height="15" fill="rgb(221,193,54)" fg:x="343" fg:w="277"/><text x="0.8198%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.02%)</title><rect x="1.0848%" y="165" width="0.0166%" height="15" fill="rgb(248,212,6)" fg:x="653" fg:w="10"/><text x="1.3348%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.02%)</title><rect x="1.1014%" y="165" width="0.0183%" height="15" fill="rgb(208,68,35)" fg:x="663" fg:w="11"/><text x="1.3514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (62 samples, 0.10%)</title><rect x="1.0383%" y="197" width="0.1030%" height="15" fill="rgb(232,128,0)" fg:x="625" fg:w="62"/><text x="1.2883%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (61 samples, 0.10%)</title><rect x="1.0399%" y="181" width="0.1013%" height="15" fill="rgb(207,160,47)" fg:x="626" fg:w="61"/><text x="1.2899%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="1.1413%" y="197" width="0.0249%" height="15" fill="rgb(228,23,34)" fg:x="687" fg:w="15"/><text x="1.3913%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (125 samples, 0.21%)</title><rect x="1.1662%" y="197" width="0.2077%" height="15" fill="rgb(218,30,26)" fg:x="702" fg:w="125"/><text x="1.4162%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (63 samples, 0.10%)</title><rect x="1.2692%" y="181" width="0.1047%" height="15" fill="rgb(220,122,19)" fg:x="764" fg:w="63"/><text x="1.5192%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (63 samples, 0.10%)</title><rect x="1.2692%" y="165" width="0.1047%" height="15" fill="rgb(250,228,42)" fg:x="764" fg:w="63"/><text x="1.5192%" y="175.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (846 samples, 1.41%)</title><rect x="0.0050%" y="213" width="1.4054%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="846"/><text x="0.2550%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.04%)</title><rect x="1.3738%" y="197" width="0.0365%" height="15" fill="rgb(216,20,37)" fg:x="827" fg:w="22"/><text x="1.6238%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (34 samples, 0.06%)</title><rect x="1.4253%" y="213" width="0.0565%" height="15" fill="rgb(206,188,39)" fg:x="858" fg:w="34"/><text x="1.6753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (95 samples, 0.16%)</title><rect x="1.4818%" y="213" width="0.1578%" height="15" fill="rgb(217,207,13)" fg:x="892" fg:w="95"/><text x="1.7318%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (17 samples, 0.03%)</title><rect x="1.6396%" y="213" width="0.0282%" height="15" fill="rgb(231,73,38)" fg:x="987" fg:w="17"/><text x="1.8896%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.03%)</title><rect x="1.6396%" y="197" width="0.0282%" height="15" fill="rgb(225,20,46)" fg:x="987" fg:w="17"/><text x="1.8896%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.03%)</title><rect x="1.6396%" y="181" width="0.0282%" height="15" fill="rgb(210,31,41)" fg:x="987" fg:w="17"/><text x="1.8896%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (37 samples, 0.06%)</title><rect x="1.6679%" y="213" width="0.0615%" height="15" fill="rgb(221,200,47)" fg:x="1004" fg:w="37"/><text x="1.9179%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,047 samples, 1.74%)</title><rect x="0.0050%" y="229" width="1.7393%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1047"/><text x="0.2550%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.01%)</title><rect x="1.7294%" y="213" width="0.0150%" height="15" fill="rgb(249,33,26)" fg:x="1041" fg:w="9"/><text x="1.9794%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.02%)</title><rect x="1.7443%" y="229" width="0.0199%" height="15" fill="rgb(235,183,28)" fg:x="1050" fg:w="12"/><text x="1.9943%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.05%)</title><rect x="3.0334%" y="197" width="0.0532%" height="15" fill="rgb(221,5,38)" fg:x="1826" fg:w="32"/><text x="3.2834%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.03%)</title><rect x="3.0600%" y="181" width="0.0266%" height="15" fill="rgb(247,18,42)" fg:x="1842" fg:w="16"/><text x="3.3100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (80 samples, 0.13%)</title><rect x="3.0866%" y="197" width="0.1329%" height="15" fill="rgb(241,131,45)" fg:x="1858" fg:w="80"/><text x="3.3366%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (80 samples, 0.13%)</title><rect x="3.0866%" y="181" width="0.1329%" height="15" fill="rgb(249,31,29)" fg:x="1858" fg:w="80"/><text x="3.3366%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (80 samples, 0.13%)</title><rect x="3.0866%" y="165" width="0.1329%" height="15" fill="rgb(225,111,53)" fg:x="1858" fg:w="80"/><text x="3.3366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="3.2245%" y="197" width="0.0233%" height="15" fill="rgb(238,160,17)" fg:x="1941" fg:w="14"/><text x="3.4745%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (892 samples, 1.48%)</title><rect x="1.7742%" y="213" width="1.4818%" height="15" fill="rgb(214,148,48)" fg:x="1068" fg:w="892"/><text x="2.0242%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.03%)</title><rect x="3.2560%" y="197" width="0.0299%" height="15" fill="rgb(232,36,49)" fg:x="1960" fg:w="18"/><text x="3.5060%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (71 samples, 0.12%)</title><rect x="3.2560%" y="213" width="0.1179%" height="15" fill="rgb(209,103,24)" fg:x="1960" fg:w="71"/><text x="3.5060%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (53 samples, 0.09%)</title><rect x="3.2859%" y="197" width="0.0880%" height="15" fill="rgb(229,88,8)" fg:x="1978" fg:w="53"/><text x="3.5359%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (53 samples, 0.09%)</title><rect x="3.2859%" y="181" width="0.0880%" height="15" fill="rgb(213,181,19)" fg:x="1978" fg:w="53"/><text x="3.5359%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (53 samples, 0.09%)</title><rect x="3.2859%" y="165" width="0.0880%" height="15" fill="rgb(254,191,54)" fg:x="1978" fg:w="53"/><text x="3.5359%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="3.3839%" y="213" width="0.0133%" height="15" fill="rgb(241,83,37)" fg:x="2037" fg:w="8"/><text x="3.6339%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (996 samples, 1.65%)</title><rect x="1.7642%" y="229" width="1.6546%" height="15" fill="rgb(233,36,39)" fg:x="1062" fg:w="996"/><text x="2.0142%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="3.4055%" y="213" width="0.0133%" height="15" fill="rgb(226,3,54)" fg:x="2050" fg:w="8"/><text x="3.6555%" y="223.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (46 samples, 0.08%)</title><rect x="3.4188%" y="229" width="0.0764%" height="15" fill="rgb(245,192,40)" fg:x="2058" fg:w="46"/><text x="3.6688%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (20 samples, 0.03%)</title><rect x="3.4952%" y="229" width="0.0332%" height="15" fill="rgb(238,167,29)" fg:x="2104" fg:w="20"/><text x="3.7452%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (138 samples, 0.23%)</title><rect x="3.5285%" y="229" width="0.2293%" height="15" fill="rgb(232,182,51)" fg:x="2124" fg:w="138"/><text x="3.7785%" y="239.50"></text></g><g><title>gj`__rdl_alloc (26 samples, 0.04%)</title><rect x="3.7577%" y="229" width="0.0432%" height="15" fill="rgb(231,60,39)" fg:x="2262" fg:w="26"/><text x="4.0077%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (504 samples, 0.84%)</title><rect x="4.5302%" y="213" width="0.8373%" height="15" fill="rgb(208,69,12)" fg:x="2727" fg:w="504"/><text x="4.7802%" y="223.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (47 samples, 0.08%)</title><rect x="5.2894%" y="197" width="0.0781%" height="15" fill="rgb(235,93,37)" fg:x="3184" fg:w="47"/><text x="5.5394%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (25 samples, 0.04%)</title><rect x="5.3675%" y="213" width="0.0415%" height="15" fill="rgb(213,116,39)" fg:x="3231" fg:w="25"/><text x="5.6175%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="10.4658%" y="101" width="0.0282%" height="15" fill="rgb(222,207,29)" fg:x="6300" fg:w="17"/><text x="10.7158%" y="111.50"></text></g><g><title>gj`gj::join::materialize (28 samples, 0.05%)</title><rect x="10.4492%" y="149" width="0.0465%" height="15" fill="rgb(206,96,30)" fg:x="6290" fg:w="28"/><text x="10.6992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.04%)</title><rect x="10.4542%" y="133" width="0.0415%" height="15" fill="rgb(218,138,4)" fg:x="6293" fg:w="25"/><text x="10.7042%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.03%)</title><rect x="10.4625%" y="117" width="0.0332%" height="15" fill="rgb(250,191,14)" fg:x="6298" fg:w="20"/><text x="10.7125%" y="127.50"></text></g><g><title>gj`gj::join::materialize (44 samples, 0.07%)</title><rect x="10.4243%" y="181" width="0.0731%" height="15" fill="rgb(239,60,40)" fg:x="6275" fg:w="44"/><text x="10.6743%" y="191.50"></text></g><g><title>gj`gj::join::materialize (35 samples, 0.06%)</title><rect x="10.4392%" y="165" width="0.0581%" height="15" fill="rgb(206,27,48)" fg:x="6284" fg:w="35"/><text x="10.6892%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (3,069 samples, 5.10%)</title><rect x="5.4090%" y="213" width="5.0983%" height="15" fill="rgb(225,35,8)" fg:x="3256" fg:w="3069"/><text x="5.6590%" y="223.50">gj`gj:..</text></g><g><title>gj`gj::join::singleton_join_inner (562 samples, 0.93%)</title><rect x="9.5737%" y="197" width="0.9336%" height="15" fill="rgb(250,213,24)" fg:x="5763" fg:w="562"/><text x="9.8237%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (39 samples, 0.06%)</title><rect x="10.5073%" y="213" width="0.0648%" height="15" fill="rgb(247,123,22)" fg:x="6325" fg:w="39"/><text x="10.7573%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (4,159 samples, 6.91%)</title><rect x="3.8026%" y="229" width="6.9091%" height="15" fill="rgb(231,138,38)" fg:x="2289" fg:w="4159"/><text x="4.0526%" y="239.50">gj`gj::jo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (84 samples, 0.14%)</title><rect x="10.5721%" y="213" width="0.1395%" height="15" fill="rgb(231,145,46)" fg:x="6364" fg:w="84"/><text x="10.8221%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (442 samples, 0.73%)</title><rect x="10.7117%" y="229" width="0.7343%" height="15" fill="rgb(251,118,11)" fg:x="6448" fg:w="442"/><text x="10.9617%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (25 samples, 0.04%)</title><rect x="11.4493%" y="229" width="0.0415%" height="15" fill="rgb(217,147,25)" fg:x="6892" fg:w="25"/><text x="11.6993%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.07%)</title><rect x="11.8762%" y="213" width="0.0748%" height="15" fill="rgb(247,81,37)" fg:x="7149" fg:w="45"/><text x="12.1262%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="12.7683%" y="117" width="0.0116%" height="15" fill="rgb(209,12,38)" fg:x="7686" fg:w="7"/><text x="13.0183%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (49 samples, 0.08%)</title><rect x="12.7085%" y="133" width="0.0814%" height="15" fill="rgb(227,1,9)" fg:x="7650" fg:w="49"/><text x="12.9585%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (67 samples, 0.11%)</title><rect x="12.6802%" y="165" width="0.1113%" height="15" fill="rgb(248,47,43)" fg:x="7633" fg:w="67"/><text x="12.9302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 0.09%)</title><rect x="12.6969%" y="149" width="0.0947%" height="15" fill="rgb(221,10,30)" fg:x="7643" fg:w="57"/><text x="12.9469%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (75 samples, 0.12%)</title><rect x="12.6769%" y="181" width="0.1246%" height="15" fill="rgb(210,229,1)" fg:x="7631" fg:w="75"/><text x="12.9269%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (87 samples, 0.14%)</title><rect x="12.6620%" y="197" width="0.1445%" height="15" fill="rgb(222,148,37)" fg:x="7622" fg:w="87"/><text x="12.9120%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.01%)</title><rect x="13.6936%" y="133" width="0.0133%" height="15" fill="rgb(234,67,33)" fg:x="8243" fg:w="8"/><text x="13.9436%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (88 samples, 0.15%)</title><rect x="13.6089%" y="149" width="0.1462%" height="15" fill="rgb(247,98,35)" fg:x="8192" fg:w="88"/><text x="13.8589%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.05%)</title><rect x="13.7069%" y="133" width="0.0482%" height="15" fill="rgb(247,138,52)" fg:x="8251" fg:w="29"/><text x="13.9569%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (98 samples, 0.16%)</title><rect x="13.5956%" y="165" width="0.1628%" height="15" fill="rgb(213,79,30)" fg:x="8184" fg:w="98"/><text x="13.8456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (122 samples, 0.20%)</title><rect x="13.5873%" y="181" width="0.2027%" height="15" fill="rgb(246,177,23)" fg:x="8179" fg:w="122"/><text x="13.8373%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.03%)</title><rect x="13.7584%" y="165" width="0.0316%" height="15" fill="rgb(230,62,27)" fg:x="8282" fg:w="19"/><text x="14.0084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.02%)</title><rect x="13.7667%" y="149" width="0.0233%" height="15" fill="rgb(216,154,8)" fg:x="8287" fg:w="14"/><text x="14.0167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="13.7783%" y="133" width="0.0116%" height="15" fill="rgb(244,35,45)" fg:x="8294" fg:w="7"/><text x="14.0283%" y="143.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (595 samples, 0.99%)</title><rect x="12.8065%" y="197" width="0.9884%" height="15" fill="rgb(251,115,12)" fg:x="7709" fg:w="595"/><text x="13.0565%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.03%)</title><rect x="13.7949%" y="197" width="0.0266%" height="15" fill="rgb(240,54,50)" fg:x="8304" fg:w="16"/><text x="14.0449%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (12 samples, 0.02%)</title><rect x="13.8315%" y="197" width="0.0199%" height="15" fill="rgb(233,84,52)" fg:x="8326" fg:w="12"/><text x="14.0815%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (12 samples, 0.02%)</title><rect x="13.8315%" y="181" width="0.0199%" height="15" fill="rgb(207,117,47)" fg:x="8326" fg:w="12"/><text x="14.0815%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (12 samples, 0.02%)</title><rect x="13.8315%" y="165" width="0.0199%" height="15" fill="rgb(249,43,39)" fg:x="8326" fg:w="12"/><text x="14.0815%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (1,201 samples, 2.00%)</title><rect x="11.9543%" y="213" width="1.9951%" height="15" fill="rgb(209,38,44)" fg:x="7196" fg:w="1201"/><text x="12.2043%" y="223.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (47 samples, 0.08%)</title><rect x="13.8714%" y="197" width="0.0781%" height="15" fill="rgb(236,212,23)" fg:x="8350" fg:w="47"/><text x="14.1214%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (214 samples, 0.36%)</title><rect x="13.9494%" y="213" width="0.3555%" height="15" fill="rgb(242,79,21)" fg:x="8397" fg:w="214"/><text x="14.1994%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.02%)</title><rect x="14.4229%" y="197" width="0.0233%" height="15" fill="rgb(211,96,35)" fg:x="8682" fg:w="14"/><text x="14.6729%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (93 samples, 0.15%)</title><rect x="14.9628%" y="165" width="0.1545%" height="15" fill="rgb(253,215,40)" fg:x="9007" fg:w="93"/><text x="15.2128%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (372 samples, 0.62%)</title><rect x="14.5242%" y="181" width="0.6180%" height="15" fill="rgb(211,81,21)" fg:x="8743" fg:w="372"/><text x="14.7742%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.02%)</title><rect x="15.1173%" y="165" width="0.0249%" height="15" fill="rgb(208,190,38)" fg:x="9100" fg:w="15"/><text x="15.3673%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (523 samples, 0.87%)</title><rect x="14.3066%" y="213" width="0.8688%" height="15" fill="rgb(235,213,38)" fg:x="8612" fg:w="523"/><text x="14.5566%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (439 samples, 0.73%)</title><rect x="14.4461%" y="197" width="0.7293%" height="15" fill="rgb(237,122,38)" fg:x="8696" fg:w="439"/><text x="14.6961%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.03%)</title><rect x="15.1422%" y="181" width="0.0332%" height="15" fill="rgb(244,218,35)" fg:x="9115" fg:w="20"/><text x="15.3922%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.03%)</title><rect x="15.1754%" y="213" width="0.0316%" height="15" fill="rgb(240,68,47)" fg:x="9135" fg:w="19"/><text x="15.4254%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (188 samples, 0.31%)</title><rect x="15.2070%" y="213" width="0.3123%" height="15" fill="rgb(210,16,53)" fg:x="9154" fg:w="188"/><text x="15.4570%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (77 samples, 0.13%)</title><rect x="15.3914%" y="197" width="0.1279%" height="15" fill="rgb(235,124,12)" fg:x="9265" fg:w="77"/><text x="15.6414%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="15.5193%" y="213" width="0.0266%" height="15" fill="rgb(224,169,11)" fg:x="9342" fg:w="16"/><text x="15.7693%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (696 samples, 1.16%)</title><rect x="15.5459%" y="213" width="1.1562%" height="15" fill="rgb(250,166,2)" fg:x="9358" fg:w="696"/><text x="15.7959%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (3,159 samples, 5.25%)</title><rect x="11.4908%" y="229" width="5.2479%" height="15" fill="rgb(242,216,29)" fg:x="6917" fg:w="3159"/><text x="11.7408%" y="239.50">gj`gj:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (19 samples, 0.03%)</title><rect x="16.7071%" y="213" width="0.0316%" height="15" fill="rgb(230,116,27)" fg:x="10057" fg:w="19"/><text x="16.9571%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (1,331 samples, 2.21%)</title><rect x="16.7387%" y="229" width="2.2111%" height="15" fill="rgb(228,99,48)" fg:x="10076" fg:w="1331"/><text x="16.9887%" y="239.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,331 samples, 2.21%)</title><rect x="16.7387%" y="213" width="2.2111%" height="15" fill="rgb(253,11,6)" fg:x="10076" fg:w="1331"/><text x="16.9887%" y="223.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,331 samples, 2.21%)</title><rect x="16.7387%" y="197" width="2.2111%" height="15" fill="rgb(247,143,39)" fg:x="10076" fg:w="1331"/><text x="16.9887%" y="207.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,331 samples, 2.21%)</title><rect x="16.7387%" y="181" width="2.2111%" height="15" fill="rgb(236,97,10)" fg:x="10076" fg:w="1331"/><text x="16.9887%" y="191.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,331 samples, 2.21%)</title><rect x="16.7387%" y="165" width="2.2111%" height="15" fill="rgb(233,208,19)" fg:x="10076" fg:w="1331"/><text x="16.9887%" y="175.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (93 samples, 0.15%)</title><rect x="18.9498%" y="213" width="0.1545%" height="15" fill="rgb(216,164,2)" fg:x="11407" fg:w="93"/><text x="19.1998%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.08%)</title><rect x="19.1043%" y="213" width="0.0797%" height="15" fill="rgb(220,129,5)" fg:x="11500" fg:w="48"/><text x="19.3543%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (427 samples, 0.71%)</title><rect x="19.1840%" y="213" width="0.7093%" height="15" fill="rgb(242,17,10)" fg:x="11548" fg:w="427"/><text x="19.4340%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (110 samples, 0.18%)</title><rect x="19.8933%" y="213" width="0.1827%" height="15" fill="rgb(242,107,0)" fg:x="11975" fg:w="110"/><text x="20.1433%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (112 samples, 0.19%)</title><rect x="20.0761%" y="213" width="0.1861%" height="15" fill="rgb(251,28,31)" fg:x="12085" fg:w="112"/><text x="20.3261%" y="223.50"></text></g><g><title>gj`__rdl_alloc (130 samples, 0.22%)</title><rect x="20.2621%" y="213" width="0.2160%" height="15" fill="rgb(233,223,10)" fg:x="12197" fg:w="130"/><text x="20.5121%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (81 samples, 0.13%)</title><rect x="20.4798%" y="213" width="0.1346%" height="15" fill="rgb(215,21,27)" fg:x="12328" fg:w="81"/><text x="20.7298%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (88 samples, 0.15%)</title><rect x="26.0997%" y="165" width="0.1462%" height="15" fill="rgb(232,23,21)" fg:x="15711" fg:w="88"/><text x="26.3497%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (388 samples, 0.64%)</title><rect x="28.4055%" y="133" width="0.6446%" height="15" fill="rgb(244,5,23)" fg:x="17099" fg:w="388"/><text x="28.6555%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,340 samples, 2.23%)</title><rect x="26.8340%" y="149" width="2.2261%" height="15" fill="rgb(226,81,46)" fg:x="16153" fg:w="1340"/><text x="27.0840%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,603 samples, 4.32%)</title><rect x="24.9236%" y="181" width="4.3242%" height="15" fill="rgb(247,70,30)" fg:x="15003" fg:w="2603"/><text x="25.1736%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,807 samples, 3.00%)</title><rect x="26.2459%" y="165" width="3.0019%" height="15" fill="rgb(212,68,19)" fg:x="15799" fg:w="1807"/><text x="26.4959%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (113 samples, 0.19%)</title><rect x="29.0601%" y="149" width="0.1877%" height="15" fill="rgb(240,187,13)" fg:x="17493" fg:w="113"/><text x="29.3101%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (178 samples, 0.30%)</title><rect x="29.2478%" y="181" width="0.2957%" height="15" fill="rgb(223,113,26)" fg:x="17606" fg:w="178"/><text x="29.4978%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,960 samples, 4.92%)</title><rect x="24.6362%" y="197" width="4.9173%" height="15" fill="rgb(206,192,2)" fg:x="14830" fg:w="2960"/><text x="24.8862%" y="207.50">gj`&lt;al..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (912 samples, 1.52%)</title><rect x="29.5535%" y="197" width="1.5151%" height="15" fill="rgb(241,108,4)" fg:x="17790" fg:w="912"/><text x="29.8035%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (2,211 samples, 3.67%)</title><rect x="31.0685%" y="197" width="3.6730%" height="15" fill="rgb(247,173,49)" fg:x="18702" fg:w="2211"/><text x="31.3185%" y="207.50">gj`&lt;..</text></g><g><title>gj`DYLD-STUB$$malloc (47 samples, 0.08%)</title><rect x="36.7616%" y="149" width="0.0781%" height="15" fill="rgb(224,114,35)" fg:x="22129" fg:w="47"/><text x="37.0116%" y="159.50"></text></g><g><title>gj`__rdl_alloc (65 samples, 0.11%)</title><rect x="36.8397%" y="149" width="0.1080%" height="15" fill="rgb(245,159,27)" fg:x="22176" fg:w="65"/><text x="37.0897%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (101 samples, 0.17%)</title><rect x="37.7185%" y="117" width="0.1678%" height="15" fill="rgb(245,172,44)" fg:x="22705" fg:w="101"/><text x="37.9685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.06%)</title><rect x="38.1221%" y="101" width="0.0581%" height="15" fill="rgb(236,23,11)" fg:x="22948" fg:w="35"/><text x="38.3721%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (275 samples, 0.46%)</title><rect x="39.0807%" y="85" width="0.4568%" height="15" fill="rgb(205,117,38)" fg:x="23525" fg:w="275"/><text x="39.3307%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,544 samples, 2.56%)</title><rect x="37.8862%" y="117" width="2.5650%" height="15" fill="rgb(237,72,25)" fg:x="22806" fg:w="1544"/><text x="38.1362%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,367 samples, 2.27%)</title><rect x="38.1803%" y="101" width="2.2709%" height="15" fill="rgb(244,70,9)" fg:x="22983" fg:w="1367"/><text x="38.4303%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (550 samples, 0.91%)</title><rect x="39.5375%" y="85" width="0.9137%" height="15" fill="rgb(217,125,39)" fg:x="23800" fg:w="550"/><text x="39.7875%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (136 samples, 0.23%)</title><rect x="40.2253%" y="69" width="0.2259%" height="15" fill="rgb(235,36,10)" fg:x="24214" fg:w="136"/><text x="40.4753%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,064 samples, 3.43%)</title><rect x="37.1570%" y="133" width="3.4288%" height="15" fill="rgb(251,123,47)" fg:x="22367" fg:w="2064"/><text x="37.4070%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (81 samples, 0.13%)</title><rect x="40.4512%" y="117" width="0.1346%" height="15" fill="rgb(221,13,13)" fg:x="24350" fg:w="81"/><text x="40.7012%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (93 samples, 0.15%)</title><rect x="40.5858%" y="133" width="0.1545%" height="15" fill="rgb(238,131,9)" fg:x="24431" fg:w="93"/><text x="40.8358%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.07%)</title><rect x="40.7402%" y="133" width="0.0731%" height="15" fill="rgb(211,50,8)" fg:x="24524" fg:w="44"/><text x="40.9902%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (2,380 samples, 3.95%)</title><rect x="36.9476%" y="149" width="3.9538%" height="15" fill="rgb(245,182,24)" fg:x="22241" fg:w="2380"/><text x="37.1976%" y="159.50">gj`a..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.09%)</title><rect x="40.8133%" y="133" width="0.0880%" height="15" fill="rgb(242,14,37)" fg:x="24568" fg:w="53"/><text x="41.0633%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,670 samples, 4.44%)</title><rect x="36.4908%" y="165" width="4.4355%" height="15" fill="rgb(246,228,12)" fg:x="21966" fg:w="2670"/><text x="36.7408%" y="175.50">gj`al..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.02%)</title><rect x="40.9014%" y="149" width="0.0249%" height="15" fill="rgb(213,55,15)" fg:x="24621" fg:w="15"/><text x="41.1514%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (119 samples, 0.20%)</title><rect x="40.9263%" y="165" width="0.1977%" height="15" fill="rgb(209,9,3)" fg:x="24636" fg:w="119"/><text x="41.1763%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (587 samples, 0.98%)</title><rect x="41.1240%" y="165" width="0.9751%" height="15" fill="rgb(230,59,30)" fg:x="24755" fg:w="587"/><text x="41.3740%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (455 samples, 0.76%)</title><rect x="42.8583%" y="149" width="0.7559%" height="15" fill="rgb(209,121,21)" fg:x="25799" fg:w="455"/><text x="43.1083%" y="159.50"></text></g><g><title>gj`core::str::converts::from_utf8 (20 samples, 0.03%)</title><rect x="45.0744%" y="133" width="0.0332%" height="15" fill="rgb(220,109,13)" fg:x="27133" fg:w="20"/><text x="45.3244%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="45.1459%" y="85" width="0.0332%" height="15" fill="rgb(232,18,1)" fg:x="27176" fg:w="20"/><text x="45.3959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.06%)</title><rect x="45.1243%" y="117" width="0.0565%" height="15" fill="rgb(215,41,42)" fg:x="27163" fg:w="34"/><text x="45.3743%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.04%)</title><rect x="45.1409%" y="101" width="0.0399%" height="15" fill="rgb(224,123,36)" fg:x="27173" fg:w="24"/><text x="45.3909%" y="111.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (47 samples, 0.08%)</title><rect x="45.1076%" y="133" width="0.0781%" height="15" fill="rgb(240,125,3)" fg:x="27153" fg:w="47"/><text x="45.3576%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (989 samples, 1.64%)</title><rect x="43.6142%" y="149" width="1.6430%" height="15" fill="rgb(205,98,50)" fg:x="26254" fg:w="989"/><text x="43.8642%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.07%)</title><rect x="45.1890%" y="133" width="0.0681%" height="15" fill="rgb(205,185,37)" fg:x="27202" fg:w="41"/><text x="45.4390%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (71 samples, 0.12%)</title><rect x="45.4715%" y="101" width="0.1179%" height="15" fill="rgb(238,207,15)" fg:x="27372" fg:w="71"/><text x="45.7215%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (27 samples, 0.04%)</title><rect x="45.5446%" y="85" width="0.0449%" height="15" fill="rgb(213,199,42)" fg:x="27416" fg:w="27"/><text x="45.7946%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (137 samples, 0.23%)</title><rect x="45.3950%" y="117" width="0.2276%" height="15" fill="rgb(235,201,11)" fg:x="27326" fg:w="137"/><text x="45.6450%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (20 samples, 0.03%)</title><rect x="45.5894%" y="101" width="0.0332%" height="15" fill="rgb(207,46,11)" fg:x="27443" fg:w="20"/><text x="45.8394%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (10 samples, 0.02%)</title><rect x="45.6226%" y="117" width="0.0166%" height="15" fill="rgb(241,35,35)" fg:x="27463" fg:w="10"/><text x="45.8726%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (198 samples, 0.33%)</title><rect x="45.3917%" y="133" width="0.3289%" height="15" fill="rgb(243,32,47)" fg:x="27324" fg:w="198"/><text x="45.6417%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (48 samples, 0.08%)</title><rect x="45.6409%" y="117" width="0.0797%" height="15" fill="rgb(247,202,23)" fg:x="27474" fg:w="48"/><text x="45.8909%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (2,194 samples, 3.64%)</title><rect x="42.0991%" y="165" width="3.6448%" height="15" fill="rgb(219,102,11)" fg:x="25342" fg:w="2194"/><text x="42.3491%" y="175.50">gj`p..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (293 samples, 0.49%)</title><rect x="45.2572%" y="149" width="0.4867%" height="15" fill="rgb(243,110,44)" fg:x="27243" fg:w="293"/><text x="45.5072%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (14 samples, 0.02%)</title><rect x="45.7206%" y="133" width="0.0233%" height="15" fill="rgb(222,74,54)" fg:x="27522" fg:w="14"/><text x="45.9706%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (118 samples, 0.20%)</title><rect x="45.7439%" y="165" width="0.1960%" height="15" fill="rgb(216,99,12)" fg:x="27536" fg:w="118"/><text x="45.9939%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (183 samples, 0.30%)</title><rect x="45.9399%" y="165" width="0.3040%" height="15" fill="rgb(226,22,26)" fg:x="27654" fg:w="183"/><text x="46.1899%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (231 samples, 0.38%)</title><rect x="46.2439%" y="165" width="0.3837%" height="15" fill="rgb(217,163,10)" fg:x="27837" fg:w="231"/><text x="46.4939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (169 samples, 0.28%)</title><rect x="47.6693%" y="149" width="0.2807%" height="15" fill="rgb(213,25,53)" fg:x="28695" fg:w="169"/><text x="47.9193%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,253 samples, 2.08%)</title><rect x="48.5331%" y="133" width="2.0815%" height="15" fill="rgb(252,105,26)" fg:x="29215" fg:w="1253"/><text x="48.7831%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (372 samples, 0.62%)</title><rect x="49.9967%" y="117" width="0.6180%" height="15" fill="rgb(220,39,43)" fg:x="30096" fg:w="372"/><text x="50.2467%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,529 samples, 4.20%)</title><rect x="46.6277%" y="165" width="4.2013%" height="15" fill="rgb(229,68,48)" fg:x="28068" fg:w="2529"/><text x="46.8777%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,733 samples, 2.88%)</title><rect x="47.9500%" y="149" width="2.8789%" height="15" fill="rgb(252,8,32)" fg:x="28864" fg:w="1733"/><text x="48.2000%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (129 samples, 0.21%)</title><rect x="50.6147%" y="133" width="0.2143%" height="15" fill="rgb(223,20,43)" fg:x="30468" fg:w="129"/><text x="50.8647%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (173 samples, 0.29%)</title><rect x="50.8290%" y="165" width="0.2874%" height="15" fill="rgb(229,81,49)" fg:x="30597" fg:w="173"/><text x="51.0790%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (9,735 samples, 16.17%)</title><rect x="34.9674%" y="181" width="16.1722%" height="15" fill="rgb(236,28,36)" fg:x="21049" fg:w="9735"/><text x="35.2174%" y="191.50">gj`&lt;parquet::record::read..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.02%)</title><rect x="51.1164%" y="165" width="0.0233%" height="15" fill="rgb(249,185,26)" fg:x="30770" fg:w="14"/><text x="51.3664%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (104 samples, 0.17%)</title><rect x="51.1396%" y="181" width="0.1728%" height="15" fill="rgb(249,174,33)" fg:x="30784" fg:w="104"/><text x="51.3896%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (95 samples, 0.16%)</title><rect x="51.3124%" y="181" width="0.1578%" height="15" fill="rgb(233,201,37)" fg:x="30888" fg:w="95"/><text x="51.5624%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (108 samples, 0.18%)</title><rect x="51.4702%" y="181" width="0.1794%" height="15" fill="rgb(221,78,26)" fg:x="30983" fg:w="108"/><text x="51.7202%" y="191.50"></text></g><g><title>gj`__rdl_alloc (134 samples, 0.22%)</title><rect x="51.6496%" y="181" width="0.2226%" height="15" fill="rgb(250,127,30)" fg:x="31091" fg:w="134"/><text x="51.8996%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (113 samples, 0.19%)</title><rect x="51.8722%" y="181" width="0.1877%" height="15" fill="rgb(230,49,44)" fg:x="31225" fg:w="113"/><text x="52.1222%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="52.0616%" y="133" width="0.0199%" height="15" fill="rgb(229,67,23)" fg:x="31339" fg:w="12"/><text x="52.3116%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (12 samples, 0.02%)</title><rect x="52.0616%" y="117" width="0.0199%" height="15" fill="rgb(249,83,47)" fg:x="31339" fg:w="12"/><text x="52.3116%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (12 samples, 0.02%)</title><rect x="52.0616%" y="101" width="0.0199%" height="15" fill="rgb(215,43,3)" fg:x="31339" fg:w="12"/><text x="52.3116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.02%)</title><rect x="52.0616%" y="85" width="0.0199%" height="15" fill="rgb(238,154,13)" fg:x="31339" fg:w="12"/><text x="52.3116%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="52.0616%" y="69" width="0.0199%" height="15" fill="rgb(219,56,2)" fg:x="31339" fg:w="12"/><text x="52.3116%" y="79.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (16 samples, 0.03%)</title><rect x="52.0616%" y="149" width="0.0266%" height="15" fill="rgb(233,0,4)" fg:x="31339" fg:w="16"/><text x="52.3116%" y="159.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (19 samples, 0.03%)</title><rect x="52.0599%" y="181" width="0.0316%" height="15" fill="rgb(235,30,7)" fg:x="31338" fg:w="19"/><text x="52.3099%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (18 samples, 0.03%)</title><rect x="52.0616%" y="165" width="0.0299%" height="15" fill="rgb(250,79,13)" fg:x="31339" fg:w="18"/><text x="52.3116%" y="175.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (343 samples, 0.57%)</title><rect x="52.0998%" y="69" width="0.5698%" height="15" fill="rgb(211,146,34)" fg:x="31362" fg:w="343"/><text x="52.3498%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (375 samples, 0.62%)</title><rect x="52.0998%" y="85" width="0.6230%" height="15" fill="rgb(228,22,38)" fg:x="31362" fg:w="375"/><text x="52.3498%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (32 samples, 0.05%)</title><rect x="52.6696%" y="69" width="0.0532%" height="15" fill="rgb(235,168,5)" fg:x="31705" fg:w="32"/><text x="52.9196%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (400 samples, 0.66%)</title><rect x="52.0998%" y="101" width="0.6645%" height="15" fill="rgb(221,155,16)" fg:x="31362" fg:w="400"/><text x="52.3498%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (21 samples, 0.03%)</title><rect x="52.7294%" y="85" width="0.0349%" height="15" fill="rgb(215,215,53)" fg:x="31741" fg:w="21"/><text x="52.9794%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (22 samples, 0.04%)</title><rect x="52.7660%" y="69" width="0.0365%" height="15" fill="rgb(223,4,10)" fg:x="31763" fg:w="22"/><text x="53.0160%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (22 samples, 0.04%)</title><rect x="52.7660%" y="53" width="0.0365%" height="15" fill="rgb(234,103,6)" fg:x="31763" fg:w="22"/><text x="53.0160%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (21 samples, 0.03%)</title><rect x="52.7676%" y="37" width="0.0349%" height="15" fill="rgb(227,97,0)" fg:x="31764" fg:w="21"/><text x="53.0176%" y="47.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (25 samples, 0.04%)</title><rect x="52.7643%" y="85" width="0.0415%" height="15" fill="rgb(234,150,53)" fg:x="31762" fg:w="25"/><text x="53.0143%" y="95.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (27 samples, 0.04%)</title><rect x="52.7643%" y="101" width="0.0449%" height="15" fill="rgb(228,201,54)" fg:x="31762" fg:w="27"/><text x="53.0143%" y="111.50"></text></g><g><title>gj`std::io::default_read_buf (107 samples, 0.18%)</title><rect x="52.8092%" y="85" width="0.1778%" height="15" fill="rgb(222,22,37)" fg:x="31789" fg:w="107"/><text x="53.0592%" y="95.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (107 samples, 0.18%)</title><rect x="52.8092%" y="69" width="0.1778%" height="15" fill="rgb(237,53,32)" fg:x="31789" fg:w="107"/><text x="53.0592%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (106 samples, 0.18%)</title><rect x="52.8108%" y="53" width="0.1761%" height="15" fill="rgb(233,25,53)" fg:x="31790" fg:w="106"/><text x="53.0608%" y="63.50"></text></g><g><title>gj`std::io::Read::read_to_end (118 samples, 0.20%)</title><rect x="52.8092%" y="101" width="0.1960%" height="15" fill="rgb(210,40,34)" fg:x="31789" fg:w="118"/><text x="53.0592%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.02%)</title><rect x="52.9869%" y="85" width="0.0183%" height="15" fill="rgb(241,220,44)" fg:x="31896" fg:w="11"/><text x="53.2369%" y="95.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (549 samples, 0.91%)</title><rect x="52.0981%" y="117" width="0.9120%" height="15" fill="rgb(235,28,35)" fg:x="31361" fg:w="549"/><text x="52.3481%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (554 samples, 0.92%)</title><rect x="52.0915%" y="181" width="0.9203%" height="15" fill="rgb(210,56,17)" fg:x="31357" fg:w="554"/><text x="52.3415%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (554 samples, 0.92%)</title><rect x="52.0915%" y="165" width="0.9203%" height="15" fill="rgb(224,130,29)" fg:x="31357" fg:w="554"/><text x="52.3415%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (554 samples, 0.92%)</title><rect x="52.0915%" y="149" width="0.9203%" height="15" fill="rgb(235,212,8)" fg:x="31357" fg:w="554"/><text x="52.3415%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (550 samples, 0.91%)</title><rect x="52.0981%" y="133" width="0.9137%" height="15" fill="rgb(223,33,50)" fg:x="31361" fg:w="550"/><text x="52.3481%" y="143.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (215 samples, 0.36%)</title><rect x="53.0135%" y="181" width="0.3572%" height="15" fill="rgb(219,149,13)" fg:x="31912" fg:w="215"/><text x="53.2635%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (12 samples, 0.02%)</title><rect x="53.3707%" y="181" width="0.0199%" height="15" fill="rgb(250,156,29)" fg:x="32127" fg:w="12"/><text x="53.6207%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::reader_tree (9 samples, 0.01%)</title><rect x="53.3756%" y="165" width="0.0150%" height="15" fill="rgb(216,193,19)" fg:x="32130" fg:w="9"/><text x="53.6256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (140 samples, 0.23%)</title><rect x="53.3906%" y="181" width="0.2326%" height="15" fill="rgb(216,135,14)" fg:x="32139" fg:w="140"/><text x="53.6406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (21 samples, 0.03%)</title><rect x="53.6232%" y="181" width="0.0349%" height="15" fill="rgb(241,47,5)" fg:x="32279" fg:w="21"/><text x="53.8732%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (12,028 samples, 19.98%)</title><rect x="34.7415%" y="197" width="19.9814%" height="15" fill="rgb(233,42,35)" fg:x="20913" fg:w="12028"/><text x="34.9915%" y="207.50">gj`&lt;parquet::record::reader::Ro..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (641 samples, 1.06%)</title><rect x="53.6581%" y="181" width="1.0649%" height="15" fill="rgb(231,13,6)" fg:x="32300" fg:w="641"/><text x="53.9081%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (94 samples, 0.16%)</title><rect x="54.7229%" y="197" width="0.1562%" height="15" fill="rgb(207,181,40)" fg:x="32941" fg:w="94"/><text x="54.9729%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (306 samples, 0.51%)</title><rect x="54.8791%" y="197" width="0.5083%" height="15" fill="rgb(254,173,49)" fg:x="33035" fg:w="306"/><text x="55.1291%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (95 samples, 0.16%)</title><rect x="55.3874%" y="197" width="0.1578%" height="15" fill="rgb(221,1,38)" fg:x="33341" fg:w="95"/><text x="55.6374%" y="207.50"></text></g><g><title>gj`__rdl_alloc (89 samples, 0.15%)</title><rect x="55.5452%" y="197" width="0.1479%" height="15" fill="rgb(206,124,46)" fg:x="33436" fg:w="89"/><text x="55.7952%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (20 samples, 0.03%)</title><rect x="55.6931%" y="117" width="0.0332%" height="15" fill="rgb(249,21,11)" fg:x="33525" fg:w="20"/><text x="55.9431%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (20 samples, 0.03%)</title><rect x="55.6931%" y="101" width="0.0332%" height="15" fill="rgb(222,201,40)" fg:x="33525" fg:w="20"/><text x="55.9431%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.02%)</title><rect x="55.7263%" y="117" width="0.0249%" height="15" fill="rgb(235,61,29)" fg:x="33545" fg:w="15"/><text x="55.9763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.02%)</title><rect x="55.7263%" y="101" width="0.0249%" height="15" fill="rgb(219,207,3)" fg:x="33545" fg:w="15"/><text x="55.9763%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.02%)</title><rect x="55.7263%" y="85" width="0.0249%" height="15" fill="rgb(222,56,46)" fg:x="33545" fg:w="15"/><text x="55.9763%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (41 samples, 0.07%)</title><rect x="55.6931%" y="133" width="0.0681%" height="15" fill="rgb(239,76,54)" fg:x="33525" fg:w="41"/><text x="55.9431%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (54 samples, 0.09%)</title><rect x="55.6931%" y="149" width="0.0897%" height="15" fill="rgb(231,124,27)" fg:x="33525" fg:w="54"/><text x="55.9431%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.02%)</title><rect x="55.7612%" y="133" width="0.0216%" height="15" fill="rgb(249,195,6)" fg:x="33566" fg:w="13"/><text x="56.0112%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (55 samples, 0.09%)</title><rect x="55.6931%" y="197" width="0.0914%" height="15" fill="rgb(237,174,47)" fg:x="33525" fg:w="55"/><text x="55.9431%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (55 samples, 0.09%)</title><rect x="55.6931%" y="181" width="0.0914%" height="15" fill="rgb(206,201,31)" fg:x="33525" fg:w="55"/><text x="55.9431%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (55 samples, 0.09%)</title><rect x="55.6931%" y="165" width="0.0914%" height="15" fill="rgb(231,57,52)" fg:x="33525" fg:w="55"/><text x="55.9431%" y="175.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (347 samples, 0.58%)</title><rect x="55.7844%" y="197" width="0.5765%" height="15" fill="rgb(248,177,22)" fg:x="33580" fg:w="347"/><text x="56.0344%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (231 samples, 0.38%)</title><rect x="56.3609%" y="197" width="0.3837%" height="15" fill="rgb(215,211,37)" fg:x="33927" fg:w="231"/><text x="56.6109%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,335 samples, 3.88%)</title><rect x="57.9391%" y="181" width="3.8790%" height="15" fill="rgb(241,128,51)" fg:x="34877" fg:w="2335"/><text x="58.1891%" y="191.50">gj`&lt;..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4,107 samples, 6.82%)</title><rect x="56.7446%" y="197" width="6.8227%" height="15" fill="rgb(227,165,31)" fg:x="34158" fg:w="4107"/><text x="56.9946%" y="207.50">gj`hashbr..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (1,053 samples, 1.75%)</title><rect x="61.8181%" y="181" width="1.7493%" height="15" fill="rgb(228,167,24)" fg:x="37212" fg:w="1053"/><text x="62.0681%" y="191.50"></text></g><g><title>gj`parquet::file::footer::decode_metadata (10 samples, 0.02%)</title><rect x="63.5673%" y="165" width="0.0166%" height="15" fill="rgb(228,143,12)" fg:x="38265" fg:w="10"/><text x="63.8173%" y="175.50"></text></g><g><title>gj`parquet_format::parquet_format::FileMetaData::read_from_in_protocol (7 samples, 0.01%)</title><rect x="63.5723%" y="149" width="0.0116%" height="15" fill="rgb(249,149,8)" fg:x="38268" fg:w="7"/><text x="63.8223%" y="159.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (11 samples, 0.02%)</title><rect x="63.5673%" y="197" width="0.0183%" height="15" fill="rgb(243,35,44)" fg:x="38265" fg:w="11"/><text x="63.8173%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (11 samples, 0.02%)</title><rect x="63.5673%" y="181" width="0.0183%" height="15" fill="rgb(246,89,9)" fg:x="38265" fg:w="11"/><text x="63.8173%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (201 samples, 0.33%)</title><rect x="64.7850%" y="181" width="0.3339%" height="15" fill="rgb(233,213,13)" fg:x="38998" fg:w="201"/><text x="65.0350%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (445 samples, 0.74%)</title><rect x="67.0543%" y="149" width="0.7393%" height="15" fill="rgb(233,141,41)" fg:x="40364" fg:w="445"/><text x="67.3043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,287 samples, 2.14%)</title><rect x="65.6605%" y="165" width="2.1380%" height="15" fill="rgb(239,167,4)" fg:x="39525" fg:w="1287"/><text x="65.9105%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,682 samples, 4.46%)</title><rect x="63.5856%" y="197" width="4.4554%" height="15" fill="rgb(209,217,16)" fg:x="38276" fg:w="2682"/><text x="63.8356%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,759 samples, 2.92%)</title><rect x="65.1189%" y="181" width="2.9221%" height="15" fill="rgb(219,88,35)" fg:x="39199" fg:w="1759"/><text x="65.3689%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (146 samples, 0.24%)</title><rect x="67.7985%" y="165" width="0.2425%" height="15" fill="rgb(220,193,23)" fg:x="40812" fg:w="146"/><text x="68.0485%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (182 samples, 0.30%)</title><rect x="68.0411%" y="197" width="0.3023%" height="15" fill="rgb(230,90,52)" fg:x="40958" fg:w="182"/><text x="68.2911%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2,746 samples, 4.56%)</title><rect x="75.9386%" y="181" width="4.5618%" height="15" fill="rgb(252,106,19)" fg:x="45712" fg:w="2746"/><text x="76.1886%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (94 samples, 0.16%)</title><rect x="80.5004%" y="181" width="0.1562%" height="15" fill="rgb(206,74,20)" fg:x="48458" fg:w="94"/><text x="80.7504%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7,914 samples, 13.15%)</title><rect x="68.3434%" y="197" width="13.1471%" height="15" fill="rgb(230,138,44)" fg:x="41140" fg:w="7914"/><text x="68.5934%" y="207.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`szone_size (502 samples, 0.83%)</title><rect x="80.6565%" y="181" width="0.8339%" height="15" fill="rgb(235,182,43)" fg:x="48552" fg:w="502"/><text x="80.9065%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (454 samples, 0.75%)</title><rect x="80.7363%" y="165" width="0.7542%" height="15" fill="rgb(242,16,51)" fg:x="48600" fg:w="454"/><text x="80.9863%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (598 samples, 0.99%)</title><rect x="83.0288%" y="165" width="0.9934%" height="15" fill="rgb(248,9,4)" fg:x="49980" fg:w="598"/><text x="83.2788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,601 samples, 2.66%)</title><rect x="81.4905%" y="197" width="2.6596%" height="15" fill="rgb(210,31,22)" fg:x="49054" fg:w="1601"/><text x="81.7405%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,110 samples, 1.84%)</title><rect x="82.3061%" y="181" width="1.8440%" height="15" fill="rgb(239,54,39)" fg:x="49545" fg:w="1110"/><text x="82.5561%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (77 samples, 0.13%)</title><rect x="84.0222%" y="165" width="0.1279%" height="15" fill="rgb(230,99,41)" fg:x="50578" fg:w="77"/><text x="84.2722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (402 samples, 0.67%)</title><rect x="84.1551%" y="197" width="0.6678%" height="15" fill="rgb(253,106,12)" fg:x="50658" fg:w="402"/><text x="84.4051%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,787 samples, 2.97%)</title><rect x="84.8229%" y="197" width="2.9686%" height="15" fill="rgb(213,46,41)" fg:x="51060" fg:w="1787"/><text x="85.0729%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (35 samples, 0.06%)</title><rect x="87.7915%" y="197" width="0.0581%" height="15" fill="rgb(215,133,35)" fg:x="52847" fg:w="35"/><text x="88.0415%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (707 samples, 1.17%)</title><rect x="87.8497%" y="197" width="1.1745%" height="15" fill="rgb(213,28,5)" fg:x="52882" fg:w="707"/><text x="88.0997%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (137 samples, 0.23%)</title><rect x="89.0242%" y="197" width="0.2276%" height="15" fill="rgb(215,77,49)" fg:x="53589" fg:w="137"/><text x="89.2742%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (93 samples, 0.15%)</title><rect x="89.2518%" y="197" width="0.1545%" height="15" fill="rgb(248,100,22)" fg:x="53726" fg:w="93"/><text x="89.5018%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (119 samples, 0.20%)</title><rect x="89.4063%" y="197" width="0.1977%" height="15" fill="rgb(208,67,9)" fg:x="53819" fg:w="119"/><text x="89.6563%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,752 samples, 2.91%)</title><rect x="89.6040%" y="197" width="2.9105%" height="15" fill="rgb(219,133,21)" fg:x="53938" fg:w="1752"/><text x="89.8540%" y="207.50">li..</text></g><g><title>gj`gj::util::from_parquet (43,581 samples, 72.40%)</title><rect x="20.6143%" y="213" width="72.3985%" height="15" fill="rgb(246,46,29)" fg:x="12409" fg:w="43581"/><text x="20.8643%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (300 samples, 0.50%)</title><rect x="92.5145%" y="197" width="0.4984%" height="15" fill="rgb(246,185,52)" fg:x="55690" fg:w="300"/><text x="92.7645%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (403 samples, 0.67%)</title><rect x="93.0128%" y="213" width="0.6695%" height="15" fill="rgb(252,136,11)" fg:x="55990" fg:w="403"/><text x="93.2628%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (89 samples, 0.15%)</title><rect x="93.6823%" y="213" width="0.1479%" height="15" fill="rgb(219,138,53)" fg:x="56393" fg:w="89"/><text x="93.9323%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 0.21%)</title><rect x="93.8318%" y="213" width="0.2126%" height="15" fill="rgb(211,51,23)" fg:x="56483" fg:w="128"/><text x="94.0818%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (756 samples, 1.26%)</title><rect x="94.0445%" y="213" width="1.2559%" height="15" fill="rgb(247,221,28)" fg:x="56611" fg:w="756"/><text x="94.2945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1,105 samples, 1.84%)</title><rect x="95.3004%" y="213" width="1.8357%" height="15" fill="rgb(251,222,45)" fg:x="57367" fg:w="1105"/><text x="95.5504%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (54 samples, 0.09%)</title><rect x="97.1360%" y="213" width="0.0897%" height="15" fill="rgb(217,162,53)" fg:x="58472" fg:w="54"/><text x="97.3860%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (653 samples, 1.08%)</title><rect x="97.2274%" y="213" width="1.0848%" height="15" fill="rgb(229,93,14)" fg:x="58527" fg:w="653"/><text x="97.4774%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (556 samples, 0.92%)</title><rect x="98.3122%" y="213" width="0.9236%" height="15" fill="rgb(209,67,49)" fg:x="59180" fg:w="556"/><text x="98.5622%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (42 samples, 0.07%)</title><rect x="99.2358%" y="213" width="0.0698%" height="15" fill="rgb(213,87,29)" fg:x="59736" fg:w="42"/><text x="99.4858%" y="223.50"></text></g><g><title>gj`gj::util::load_db (48,657 samples, 80.83%)</title><rect x="18.9498%" y="229" width="80.8310%" height="15" fill="rgb(205,151,52)" fg:x="11407" fg:w="48657"/><text x="19.1998%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (286 samples, 0.48%)</title><rect x="99.3056%" y="213" width="0.4751%" height="15" fill="rgb(253,215,39)" fg:x="59778" fg:w="286"/><text x="99.5556%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.05%)</title><rect x="99.7824%" y="229" width="0.0482%" height="15" fill="rgb(221,220,41)" fg:x="60065" fg:w="29"/><text x="100.0324%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (25 samples, 0.04%)</title><rect x="99.8306%" y="229" width="0.0415%" height="15" fill="rgb(218,133,21)" fg:x="60094" fg:w="25"/><text x="100.0806%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.03%)</title><rect x="99.8721%" y="229" width="0.0282%" height="15" fill="rgb(221,193,43)" fg:x="60119" fg:w="17"/><text x="100.1221%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="99.9003%" y="229" width="0.0332%" height="15" fill="rgb(240,128,52)" fg:x="60136" fg:w="20"/><text x="100.1503%" y="239.50"></text></g><g><title>gj`gj::main (60,173 samples, 99.96%)</title><rect x="0.0017%" y="245" width="99.9618%" height="15" fill="rgb(253,114,12)" fg:x="1" fg:w="60173"/><text x="0.2517%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (18 samples, 0.03%)</title><rect x="99.9336%" y="229" width="0.0299%" height="15" fill="rgb(215,223,47)" fg:x="60156" fg:w="18"/><text x="100.1836%" y="239.50"></text></g><g><title>dyld`start (60,183 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9784%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="60183"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>gj`main (60,183 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9784%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="60183"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (60,183 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9784%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="60183"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (60,183 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9784%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="60183"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (60,183 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9784%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="60183"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.01%)</title><rect x="99.9635%" y="245" width="0.0150%" height="15" fill="rgb(210,195,18)" fg:x="60174" fg:w="9"/><text x="100.2135%" y="255.50"></text></g><g><title>all (60,196 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="60196"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.02%)</title><rect x="99.9784%" y="325" width="0.0216%" height="15" fill="rgb(221,65,9)" fg:x="60183" fg:w="13"/><text x="100.2284%" y="335.50"></text></g></svg></svg>