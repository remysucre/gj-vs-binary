<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="37750"><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 0.13%)</title><rect x="0.1325%" y="229" width="0.1325%" height="15" fill="rgb(227,0,7)" fg:x="50" fg:w="50"/><text x="0.3825%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="0.2649%" y="229" width="0.0106%" height="15" fill="rgb(217,0,24)" fg:x="100" fg:w="4"/><text x="0.5149%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.06%)</title><rect x="1.2503%" y="197" width="0.0583%" height="15" fill="rgb(221,193,54)" fg:x="472" fg:w="22"/><text x="1.5003%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.02%)</title><rect x="1.2901%" y="181" width="0.0185%" height="15" fill="rgb(248,212,6)" fg:x="487" fg:w="7"/><text x="1.5401%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (38 samples, 0.10%)</title><rect x="1.3086%" y="197" width="0.1007%" height="15" fill="rgb(208,68,35)" fg:x="494" fg:w="38"/><text x="1.5586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (38 samples, 0.10%)</title><rect x="1.3086%" y="181" width="0.1007%" height="15" fill="rgb(232,128,0)" fg:x="494" fg:w="38"/><text x="1.5586%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (38 samples, 0.10%)</title><rect x="1.3086%" y="165" width="0.1007%" height="15" fill="rgb(207,160,47)" fg:x="494" fg:w="38"/><text x="1.5586%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.06%)</title><rect x="1.4119%" y="197" width="0.0556%" height="15" fill="rgb(228,23,34)" fg:x="533" fg:w="21"/><text x="1.6619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.01%)</title><rect x="1.4570%" y="181" width="0.0106%" height="15" fill="rgb(218,30,26)" fg:x="550" fg:w="4"/><text x="1.7070%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="1.4570%" y="165" width="0.0106%" height="15" fill="rgb(220,122,19)" fg:x="550" fg:w="4"/><text x="1.7070%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (406 samples, 1.08%)</title><rect x="0.4053%" y="213" width="1.0755%" height="15" fill="rgb(250,228,42)" fg:x="153" fg:w="406"/><text x="0.6553%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.01%)</title><rect x="1.4675%" y="197" width="0.0132%" height="15" fill="rgb(240,193,28)" fg:x="554" fg:w="5"/><text x="1.7175%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="1.4808%" y="197" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="559" fg:w="5"/><text x="1.7308%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (26 samples, 0.07%)</title><rect x="1.4808%" y="213" width="0.0689%" height="15" fill="rgb(206,188,39)" fg:x="559" fg:w="26"/><text x="1.7308%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (21 samples, 0.06%)</title><rect x="1.4940%" y="197" width="0.0556%" height="15" fill="rgb(217,207,13)" fg:x="564" fg:w="21"/><text x="1.7440%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (21 samples, 0.06%)</title><rect x="1.4940%" y="181" width="0.0556%" height="15" fill="rgb(231,73,38)" fg:x="564" fg:w="21"/><text x="1.7440%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.06%)</title><rect x="1.4940%" y="165" width="0.0556%" height="15" fill="rgb(225,20,46)" fg:x="564" fg:w="21"/><text x="1.7440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (56 samples, 0.15%)</title><rect x="2.1775%" y="197" width="0.1483%" height="15" fill="rgb(210,31,41)" fg:x="822" fg:w="56"/><text x="2.4275%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (293 samples, 0.78%)</title><rect x="1.5550%" y="213" width="0.7762%" height="15" fill="rgb(221,200,47)" fg:x="587" fg:w="293"/><text x="1.8050%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.03%)</title><rect x="2.3338%" y="213" width="0.0291%" height="15" fill="rgb(226,26,5)" fg:x="881" fg:w="11"/><text x="2.5838%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (148 samples, 0.39%)</title><rect x="2.3629%" y="213" width="0.3921%" height="15" fill="rgb(249,33,26)" fg:x="892" fg:w="148"/><text x="2.6129%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (56 samples, 0.15%)</title><rect x="2.6066%" y="197" width="0.1483%" height="15" fill="rgb(235,183,28)" fg:x="984" fg:w="56"/><text x="2.8566%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (56 samples, 0.15%)</title><rect x="2.6066%" y="181" width="0.1483%" height="15" fill="rgb(221,5,38)" fg:x="984" fg:w="56"/><text x="2.8566%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (960 samples, 2.54%)</title><rect x="0.2755%" y="229" width="2.5430%" height="15" fill="rgb(247,18,42)" fg:x="104" fg:w="960"/><text x="0.5255%" y="239.50">gj..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (24 samples, 0.06%)</title><rect x="2.7550%" y="213" width="0.0636%" height="15" fill="rgb(241,131,45)" fg:x="1040" fg:w="24"/><text x="3.0050%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (131 samples, 0.35%)</title><rect x="2.8185%" y="229" width="0.3470%" height="15" fill="rgb(249,31,29)" fg:x="1064" fg:w="131"/><text x="3.0685%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (115 samples, 0.30%)</title><rect x="3.1656%" y="229" width="0.3046%" height="15" fill="rgb(225,111,53)" fg:x="1195" fg:w="115"/><text x="3.4156%" y="239.50"></text></g><g><title>gj`__rdl_alloc (40 samples, 0.11%)</title><rect x="3.4702%" y="229" width="0.1060%" height="15" fill="rgb(238,160,17)" fg:x="1310" fg:w="40"/><text x="3.7202%" y="239.50"></text></g><g><title>gj`__rust_dealloc (21 samples, 0.06%)</title><rect x="3.5788%" y="229" width="0.0556%" height="15" fill="rgb(214,148,48)" fg:x="1351" fg:w="21"/><text x="3.8288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.05%)</title><rect x="6.0053%" y="181" width="0.0477%" height="15" fill="rgb(232,36,49)" fg:x="2267" fg:w="18"/><text x="6.2553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (191 samples, 0.51%)</title><rect x="6.1828%" y="165" width="0.5060%" height="15" fill="rgb(209,103,24)" fg:x="2334" fg:w="191"/><text x="6.4328%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (55 samples, 0.15%)</title><rect x="6.5430%" y="149" width="0.1457%" height="15" fill="rgb(229,88,8)" fg:x="2470" fg:w="55"/><text x="6.7930%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (359 samples, 0.95%)</title><rect x="5.7589%" y="197" width="0.9510%" height="15" fill="rgb(213,181,19)" fg:x="2174" fg:w="359"/><text x="6.0089%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (248 samples, 0.66%)</title><rect x="6.0530%" y="181" width="0.6570%" height="15" fill="rgb(254,191,54)" fg:x="2285" fg:w="248"/><text x="6.3030%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.02%)</title><rect x="6.6887%" y="165" width="0.0212%" height="15" fill="rgb(241,83,37)" fg:x="2525" fg:w="8"/><text x="6.9387%" y="175.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (925 samples, 2.45%)</title><rect x="4.3338%" y="213" width="2.4503%" height="15" fill="rgb(233,36,39)" fg:x="1636" fg:w="925"/><text x="4.5838%" y="223.50">gj..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.07%)</title><rect x="6.7099%" y="197" width="0.0742%" height="15" fill="rgb(226,3,54)" fg:x="2533" fg:w="28"/><text x="6.9599%" y="207.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.03%)</title><rect x="6.7841%" y="213" width="0.0318%" height="15" fill="rgb(245,192,40)" fg:x="2561" fg:w="12"/><text x="7.0341%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.29%)</title><rect x="7.2053%" y="181" width="0.2914%" height="15" fill="rgb(238,167,29)" fg:x="2720" fg:w="110"/><text x="7.4553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (251 samples, 0.66%)</title><rect x="7.4967%" y="181" width="0.6649%" height="15" fill="rgb(232,182,51)" fg:x="2830" fg:w="251"/><text x="7.7467%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (108 samples, 0.29%)</title><rect x="7.8755%" y="165" width="0.2861%" height="15" fill="rgb(231,60,39)" fg:x="2973" fg:w="108"/><text x="8.1255%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.04%)</title><rect x="8.1616%" y="181" width="0.0424%" height="15" fill="rgb(208,69,12)" fg:x="3081" fg:w="16"/><text x="8.4116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (48 samples, 0.13%)</title><rect x="8.2040%" y="181" width="0.1272%" height="15" fill="rgb(235,93,37)" fg:x="3097" fg:w="48"/><text x="8.4540%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (526 samples, 1.39%)</title><rect x="7.0119%" y="197" width="1.3934%" height="15" fill="rgb(213,116,39)" fg:x="2647" fg:w="526"/><text x="7.2619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.07%)</title><rect x="8.3311%" y="181" width="0.0742%" height="15" fill="rgb(222,207,29)" fg:x="3145" fg:w="28"/><text x="8.5811%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$free (50 samples, 0.13%)</title><rect x="8.4053%" y="197" width="0.1325%" height="15" fill="rgb(206,96,30)" fg:x="3173" fg:w="50"/><text x="8.6553%" y="207.50"></text></g><g><title>gj`__rust_dealloc (15 samples, 0.04%)</title><rect x="8.5377%" y="197" width="0.0397%" height="15" fill="rgb(218,138,4)" fg:x="3223" fg:w="15"/><text x="8.7877%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (26 samples, 0.07%)</title><rect x="8.5775%" y="197" width="0.0689%" height="15" fill="rgb(250,191,14)" fg:x="3238" fg:w="26"/><text x="8.8275%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (130 samples, 0.34%)</title><rect x="9.2503%" y="181" width="0.3444%" height="15" fill="rgb(239,60,40)" fg:x="3492" fg:w="130"/><text x="9.5003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (359 samples, 0.95%)</title><rect x="8.6464%" y="197" width="0.9510%" height="15" fill="rgb(206,27,48)" fg:x="3264" fg:w="359"/><text x="8.8964%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (54 samples, 0.14%)</title><rect x="9.5974%" y="197" width="0.1430%" height="15" fill="rgb(225,35,8)" fg:x="3623" fg:w="54"/><text x="9.8474%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (113 samples, 0.30%)</title><rect x="9.7404%" y="197" width="0.2993%" height="15" fill="rgb(250,213,24)" fg:x="3677" fg:w="113"/><text x="9.9904%" y="207.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,250 samples, 3.31%)</title><rect x="6.8159%" y="213" width="3.3113%" height="15" fill="rgb(247,123,22)" fg:x="2573" fg:w="1250"/><text x="7.0659%" y="223.50">gj`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (33 samples, 0.09%)</title><rect x="10.0397%" y="197" width="0.0874%" height="15" fill="rgb(231,138,38)" fg:x="3790" fg:w="33"/><text x="10.2897%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$free (60 samples, 0.16%)</title><rect x="10.1272%" y="213" width="0.1589%" height="15" fill="rgb(231,145,46)" fg:x="3823" fg:w="60"/><text x="10.3772%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (20 samples, 0.05%)</title><rect x="10.2861%" y="213" width="0.0530%" height="15" fill="rgb(251,118,11)" fg:x="3883" fg:w="20"/><text x="10.5361%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (14 samples, 0.04%)</title><rect x="10.3391%" y="213" width="0.0371%" height="15" fill="rgb(217,147,25)" fg:x="3903" fg:w="14"/><text x="10.5891%" y="223.50"></text></g><g><title>gj`__rdl_alloc (18 samples, 0.05%)</title><rect x="10.3762%" y="213" width="0.0477%" height="15" fill="rgb(247,81,37)" fg:x="3917" fg:w="18"/><text x="10.6262%" y="223.50"></text></g><g><title>gj`__rust_dealloc (5 samples, 0.01%)</title><rect x="10.4238%" y="213" width="0.0132%" height="15" fill="rgb(209,12,38)" fg:x="3935" fg:w="5"/><text x="10.6738%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (523 samples, 1.39%)</title><rect x="11.7722%" y="181" width="1.3854%" height="15" fill="rgb(227,1,9)" fg:x="4444" fg:w="523"/><text x="12.0222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.04%)</title><rect x="13.4066%" y="165" width="0.0371%" height="15" fill="rgb(248,47,43)" fg:x="5061" fg:w="14"/><text x="13.6566%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (173 samples, 0.46%)</title><rect x="13.5550%" y="149" width="0.4583%" height="15" fill="rgb(221,10,30)" fg:x="5117" fg:w="173"/><text x="13.8050%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.12%)</title><rect x="13.8940%" y="133" width="0.1192%" height="15" fill="rgb(210,229,1)" fg:x="5245" fg:w="45"/><text x="14.1440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (347 samples, 0.92%)</title><rect x="13.1576%" y="181" width="0.9192%" height="15" fill="rgb(222,148,37)" fg:x="4967" fg:w="347"/><text x="13.4076%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (239 samples, 0.63%)</title><rect x="13.4437%" y="165" width="0.6331%" height="15" fill="rgb(234,67,33)" fg:x="5075" fg:w="239"/><text x="13.6937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.06%)</title><rect x="14.0132%" y="149" width="0.0636%" height="15" fill="rgb(247,98,35)" fg:x="5290" fg:w="24"/><text x="14.2632%" y="159.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,074 samples, 2.85%)</title><rect x="11.3219%" y="197" width="2.8450%" height="15" fill="rgb(247,138,52)" fg:x="4274" fg:w="1074"/><text x="11.5719%" y="207.50">gj..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (34 samples, 0.09%)</title><rect x="14.0768%" y="181" width="0.0901%" height="15" fill="rgb(213,79,30)" fg:x="5314" fg:w="34"/><text x="14.3268%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104 samples, 0.28%)</title><rect x="14.1669%" y="197" width="0.2755%" height="15" fill="rgb(246,177,23)" fg:x="5348" fg:w="104"/><text x="14.4169%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$free (9 samples, 0.02%)</title><rect x="14.4477%" y="197" width="0.0238%" height="15" fill="rgb(230,62,27)" fg:x="5454" fg:w="9"/><text x="14.6977%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$malloc (8 samples, 0.02%)</title><rect x="14.4715%" y="197" width="0.0212%" height="15" fill="rgb(216,154,8)" fg:x="5463" fg:w="8"/><text x="14.7215%" y="207.50"></text></g><g><title>gj`__rdl_alloc (18 samples, 0.05%)</title><rect x="14.5007%" y="197" width="0.0477%" height="15" fill="rgb(244,35,45)" fg:x="5474" fg:w="18"/><text x="14.7507%" y="207.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (406 samples, 1.08%)</title><rect x="14.8609%" y="165" width="1.0755%" height="15" fill="rgb(251,115,12)" fg:x="5610" fg:w="406"/><text x="15.1109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.08%)</title><rect x="16.0053%" y="133" width="0.0795%" height="15" fill="rgb(240,54,50)" fg:x="6042" fg:w="30"/><text x="16.2553%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.02%)</title><rect x="16.0689%" y="117" width="0.0159%" height="15" fill="rgb(233,84,52)" fg:x="6066" fg:w="6"/><text x="16.3189%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (58 samples, 0.15%)</title><rect x="15.9364%" y="165" width="0.1536%" height="15" fill="rgb(207,117,47)" fg:x="6016" fg:w="58"/><text x="16.1864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.10%)</title><rect x="15.9894%" y="149" width="0.1007%" height="15" fill="rgb(249,43,39)" fg:x="6036" fg:w="38"/><text x="16.2394%" y="159.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (508 samples, 1.35%)</title><rect x="14.7550%" y="181" width="1.3457%" height="15" fill="rgb(209,38,44)" fg:x="5570" fg:w="508"/><text x="15.0050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.01%)</title><rect x="16.0901%" y="165" width="0.0106%" height="15" fill="rgb(236,212,23)" fg:x="6074" fg:w="4"/><text x="16.3401%" y="175.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.09%)</title><rect x="16.1007%" y="181" width="0.0927%" height="15" fill="rgb(242,79,21)" fg:x="6078" fg:w="35"/><text x="16.3507%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="16.1987%" y="181" width="0.0159%" height="15" fill="rgb(211,96,35)" fg:x="6115" fg:w="6"/><text x="16.4487%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 0.04%)</title><rect x="16.3073%" y="149" width="0.0397%" height="15" fill="rgb(253,215,40)" fg:x="6156" fg:w="15"/><text x="16.5573%" y="159.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.07%)</title><rect x="16.2861%" y="165" width="0.0662%" height="15" fill="rgb(211,81,21)" fg:x="6148" fg:w="25"/><text x="16.5361%" y="175.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.15%)</title><rect x="16.3523%" y="165" width="0.1457%" height="15" fill="rgb(208,190,38)" fg:x="6173" fg:w="55"/><text x="16.6023%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="16.9060%" y="117" width="0.0106%" height="15" fill="rgb(235,213,38)" fg:x="6382" fg:w="4"/><text x="17.1560%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.01%)</title><rect x="17.1046%" y="53" width="0.0132%" height="15" fill="rgb(237,122,38)" fg:x="6457" fg:w="5"/><text x="17.3546%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (58 samples, 0.15%)</title><rect x="17.0040%" y="69" width="0.1536%" height="15" fill="rgb(244,218,35)" fg:x="6419" fg:w="58"/><text x="17.2540%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.04%)</title><rect x="17.1179%" y="53" width="0.0397%" height="15" fill="rgb(240,68,47)" fg:x="6462" fg:w="15"/><text x="17.3679%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (88 samples, 0.23%)</title><rect x="16.9616%" y="101" width="0.2331%" height="15" fill="rgb(210,16,53)" fg:x="6403" fg:w="88"/><text x="17.2116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (75 samples, 0.20%)</title><rect x="16.9960%" y="85" width="0.1987%" height="15" fill="rgb(235,124,12)" fg:x="6416" fg:w="75"/><text x="17.2460%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.04%)</title><rect x="17.1576%" y="69" width="0.0371%" height="15" fill="rgb(224,169,11)" fg:x="6477" fg:w="14"/><text x="17.4076%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.02%)</title><rect x="17.1947%" y="101" width="0.0212%" height="15" fill="rgb(250,166,2)" fg:x="6491" fg:w="8"/><text x="17.4447%" y="111.50"></text></g><g><title>gj`gj::join::materialize (115 samples, 0.30%)</title><rect x="16.9192%" y="117" width="0.3046%" height="15" fill="rgb(242,216,29)" fg:x="6387" fg:w="115"/><text x="17.1692%" y="127.50"></text></g><g><title>gj`gj::join::materialize (277 samples, 0.73%)</title><rect x="16.5007%" y="165" width="0.7338%" height="15" fill="rgb(230,116,27)" fg:x="6229" fg:w="277"/><text x="16.7507%" y="175.50"></text></g><g><title>gj`gj::join::materialize (261 samples, 0.69%)</title><rect x="16.5430%" y="149" width="0.6914%" height="15" fill="rgb(228,99,48)" fg:x="6245" fg:w="261"/><text x="16.7930%" y="159.50"></text></g><g><title>gj`gj::join::materialize (217 samples, 0.57%)</title><rect x="16.6596%" y="133" width="0.5748%" height="15" fill="rgb(253,11,6)" fg:x="6289" fg:w="217"/><text x="16.9096%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.01%)</title><rect x="17.2238%" y="117" width="0.0106%" height="15" fill="rgb(247,143,39)" fg:x="6502" fg:w="4"/><text x="17.4738%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="17.2344%" y="165" width="0.0185%" height="15" fill="rgb(236,97,10)" fg:x="6506" fg:w="7"/><text x="17.4844%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.01%)</title><rect x="17.2556%" y="165" width="0.0132%" height="15" fill="rgb(233,208,19)" fg:x="6514" fg:w="5"/><text x="17.5056%" y="175.50"></text></g><g><title>gj`gj::join::bushy_join_inner (400 samples, 1.06%)</title><rect x="16.2199%" y="181" width="1.0596%" height="15" fill="rgb(216,164,2)" fg:x="6123" fg:w="400"/><text x="16.4699%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4 samples, 0.01%)</title><rect x="17.2689%" y="165" width="0.0106%" height="15" fill="rgb(220,129,5)" fg:x="6519" fg:w="4"/><text x="17.5189%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.01%)</title><rect x="18.2172%" y="165" width="0.0106%" height="15" fill="rgb(242,17,10)" fg:x="6877" fg:w="4"/><text x="18.4672%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (33 samples, 0.09%)</title><rect x="18.2728%" y="149" width="0.0874%" height="15" fill="rgb(242,107,0)" fg:x="6898" fg:w="33"/><text x="18.5228%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.02%)</title><rect x="18.3391%" y="133" width="0.0212%" height="15" fill="rgb(251,28,31)" fg:x="6923" fg:w="8"/><text x="18.5891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (409 samples, 1.08%)</title><rect x="17.2821%" y="181" width="1.0834%" height="15" fill="rgb(233,223,10)" fg:x="6524" fg:w="409"/><text x="17.5321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 0.14%)</title><rect x="18.2278%" y="165" width="0.1377%" height="15" fill="rgb(215,21,27)" fg:x="6881" fg:w="52"/><text x="18.4778%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.02%)</title><rect x="18.3656%" y="181" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="6933" fg:w="6"/><text x="18.6156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (103 samples, 0.27%)</title><rect x="18.3815%" y="181" width="0.2728%" height="15" fill="rgb(244,5,23)" fg:x="6939" fg:w="103"/><text x="18.6315%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (45 samples, 0.12%)</title><rect x="18.5351%" y="165" width="0.1192%" height="15" fill="rgb(226,81,46)" fg:x="6997" fg:w="45"/><text x="18.7851%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.03%)</title><rect x="18.6543%" y="181" width="0.0291%" height="15" fill="rgb(247,70,30)" fg:x="7042" fg:w="11"/><text x="18.9043%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (380 samples, 1.01%)</title><rect x="18.6834%" y="181" width="1.0066%" height="15" fill="rgb(212,68,19)" fg:x="7053" fg:w="380"/><text x="18.9334%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (307 samples, 0.81%)</title><rect x="19.6901%" y="181" width="0.8132%" height="15" fill="rgb(240,187,13)" fg:x="7433" fg:w="307"/><text x="19.9401%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.02%)</title><rect x="20.5033%" y="181" width="0.0238%" height="15" fill="rgb(223,113,26)" fg:x="7740" fg:w="9"/><text x="20.7533%" y="191.50"></text></g><g><title>gj`gj::join::bushy_join_inner (2,258 samples, 5.98%)</title><rect x="14.5483%" y="197" width="5.9815%" height="15" fill="rgb(206,192,2)" fg:x="5492" fg:w="2258"/><text x="14.7983%" y="207.50">gj`gj::j..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.03%)</title><rect x="20.5801%" y="133" width="0.0318%" height="15" fill="rgb(241,108,4)" fg:x="7769" fg:w="12"/><text x="20.8301%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.05%)</title><rect x="20.5616%" y="165" width="0.0530%" height="15" fill="rgb(247,173,49)" fg:x="7762" fg:w="20"/><text x="20.8116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.04%)</title><rect x="20.5775%" y="149" width="0.0371%" height="15" fill="rgb(224,114,35)" fg:x="7768" fg:w="14"/><text x="20.8275%" y="159.50"></text></g><g><title>gj`gj::join::materialize (33 samples, 0.09%)</title><rect x="20.5298%" y="197" width="0.0874%" height="15" fill="rgb(245,159,27)" fg:x="7750" fg:w="33"/><text x="20.7798%" y="207.50"></text></g><g><title>gj`gj::join::materialize (31 samples, 0.08%)</title><rect x="20.5351%" y="181" width="0.0821%" height="15" fill="rgb(245,172,44)" fg:x="7752" fg:w="31"/><text x="20.7851%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.01%)</title><rect x="21.1338%" y="181" width="0.0132%" height="15" fill="rgb(236,23,11)" fg:x="7978" fg:w="5"/><text x="21.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (74 samples, 0.20%)</title><rect x="21.2026%" y="165" width="0.1960%" height="15" fill="rgb(205,117,38)" fg:x="8004" fg:w="74"/><text x="21.4526%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.05%)</title><rect x="21.3457%" y="149" width="0.0530%" height="15" fill="rgb(237,72,25)" fg:x="8058" fg:w="20"/><text x="21.5957%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (307 samples, 0.81%)</title><rect x="20.6172%" y="197" width="0.8132%" height="15" fill="rgb(244,70,9)" fg:x="7783" fg:w="307"/><text x="20.8672%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (107 samples, 0.28%)</title><rect x="21.1470%" y="181" width="0.2834%" height="15" fill="rgb(217,125,39)" fg:x="7983" fg:w="107"/><text x="21.3970%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.03%)</title><rect x="21.3987%" y="165" width="0.0318%" height="15" fill="rgb(235,36,10)" fg:x="8078" fg:w="12"/><text x="21.6487%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (6 samples, 0.02%)</title><rect x="21.4305%" y="197" width="0.0159%" height="15" fill="rgb(251,123,47)" fg:x="8090" fg:w="6"/><text x="21.6805%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (17 samples, 0.05%)</title><rect x="21.4464%" y="197" width="0.0450%" height="15" fill="rgb(221,13,13)" fg:x="8096" fg:w="17"/><text x="21.6964%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (394 samples, 1.04%)</title><rect x="21.4914%" y="197" width="1.0437%" height="15" fill="rgb(238,131,9)" fg:x="8113" fg:w="394"/><text x="21.7414%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (178 samples, 0.47%)</title><rect x="22.0636%" y="181" width="0.4715%" height="15" fill="rgb(211,50,8)" fg:x="8329" fg:w="178"/><text x="22.3136%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.08%)</title><rect x="22.5351%" y="197" width="0.0848%" height="15" fill="rgb(245,182,24)" fg:x="8507" fg:w="32"/><text x="22.7851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (251 samples, 0.66%)</title><rect x="22.6199%" y="197" width="0.6649%" height="15" fill="rgb(242,14,37)" fg:x="8539" fg:w="251"/><text x="22.8699%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (20 samples, 0.05%)</title><rect x="23.2848%" y="197" width="0.0530%" height="15" fill="rgb(246,228,12)" fg:x="8790" fg:w="20"/><text x="23.5348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (34 samples, 0.09%)</title><rect x="23.3377%" y="197" width="0.0901%" height="15" fill="rgb(213,55,15)" fg:x="8810" fg:w="34"/><text x="23.5877%" y="207.50"></text></g><g><title>gj`gj::join::bushy_join_inner (4,909 samples, 13.00%)</title><rect x="10.4424%" y="213" width="13.0040%" height="15" fill="rgb(209,9,3)" fg:x="3942" fg:w="4909"/><text x="10.6924%" y="223.50">gj`gj::join::bushy_j..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.02%)</title><rect x="23.4278%" y="197" width="0.0185%" height="15" fill="rgb(230,59,30)" fg:x="8844" fg:w="7"/><text x="23.6778%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$malloc (48 samples, 0.13%)</title><rect x="24.1854%" y="197" width="0.1272%" height="15" fill="rgb(209,121,21)" fg:x="9130" fg:w="48"/><text x="24.4354%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memset (80 samples, 0.21%)</title><rect x="24.3126%" y="197" width="0.2119%" height="15" fill="rgb(220,109,13)" fg:x="9178" fg:w="80"/><text x="24.5626%" y="207.50"></text></g><g><title>gj`__rdl_alloc (31 samples, 0.08%)</title><rect x="24.5245%" y="197" width="0.0821%" height="15" fill="rgb(232,18,1)" fg:x="9258" fg:w="31"/><text x="24.7745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.03%)</title><rect x="24.6358%" y="133" width="0.0265%" height="15" fill="rgb(215,41,42)" fg:x="9300" fg:w="10"/><text x="24.8858%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="24.6517%" y="117" width="0.0106%" height="15" fill="rgb(224,123,36)" fg:x="9306" fg:w="4"/><text x="24.9017%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.04%)</title><rect x="24.6252%" y="165" width="0.0397%" height="15" fill="rgb(240,125,3)" fg:x="9296" fg:w="15"/><text x="24.8752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.03%)</title><rect x="24.6305%" y="149" width="0.0344%" height="15" fill="rgb(205,98,50)" fg:x="9298" fg:w="13"/><text x="24.8805%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.06%)</title><rect x="24.6066%" y="197" width="0.0609%" height="15" fill="rgb(205,185,37)" fg:x="9289" fg:w="23"/><text x="24.8566%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (16 samples, 0.04%)</title><rect x="24.6252%" y="181" width="0.0424%" height="15" fill="rgb(238,207,15)" fg:x="9296" fg:w="16"/><text x="24.8752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (27 samples, 0.07%)</title><rect x="26.5245%" y="165" width="0.0715%" height="15" fill="rgb(213,199,42)" fg:x="10013" fg:w="27"/><text x="26.7745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (490 samples, 1.30%)</title><rect x="27.0199%" y="149" width="1.2980%" height="15" fill="rgb(235,201,11)" fg:x="10200" fg:w="490"/><text x="27.2699%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (128 samples, 0.34%)</title><rect x="27.9788%" y="133" width="0.3391%" height="15" fill="rgb(207,46,11)" fg:x="10562" fg:w="128"/><text x="28.2288%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,043 samples, 2.76%)</title><rect x="25.7166%" y="181" width="2.7629%" height="15" fill="rgb(241,35,35)" fg:x="9708" fg:w="1043"/><text x="25.9666%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (711 samples, 1.88%)</title><rect x="26.5960%" y="165" width="1.8834%" height="15" fill="rgb(243,32,47)" fg:x="10040" fg:w="711"/><text x="26.8460%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (61 samples, 0.16%)</title><rect x="28.3179%" y="149" width="0.1616%" height="15" fill="rgb(247,202,23)" fg:x="10690" fg:w="61"/><text x="28.5679%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (76 samples, 0.20%)</title><rect x="28.4795%" y="181" width="0.2013%" height="15" fill="rgb(219,102,11)" fg:x="10751" fg:w="76"/><text x="28.7295%" y="191.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,538 samples, 4.07%)</title><rect x="24.6675%" y="197" width="4.0742%" height="15" fill="rgb(243,110,44)" fg:x="9312" fg:w="1538"/><text x="24.9175%" y="207.50">gj`h..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.06%)</title><rect x="28.6808%" y="181" width="0.0609%" height="15" fill="rgb(222,74,54)" fg:x="10827" fg:w="23"/><text x="28.9308%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.09%)</title><rect x="28.7417%" y="197" width="0.0901%" height="15" fill="rgb(216,99,12)" fg:x="10850" fg:w="34"/><text x="28.9917%" y="207.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (2,245 samples, 5.95%)</title><rect x="23.4517%" y="213" width="5.9470%" height="15" fill="rgb(226,22,26)" fg:x="8853" fg:w="2245"/><text x="23.7017%" y="223.50">gj`gj::t..</text></g><g><title>libsystem_platform.dylib`_platform_memset (214 samples, 0.57%)</title><rect x="28.8318%" y="197" width="0.5669%" height="15" fill="rgb(217,163,10)" fg:x="10884" fg:w="214"/><text x="29.0818%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (144 samples, 0.38%)</title><rect x="29.3987%" y="213" width="0.3815%" height="15" fill="rgb(213,25,53)" fg:x="11098" fg:w="144"/><text x="29.6487%" y="223.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (47 samples, 0.12%)</title><rect x="29.7801%" y="213" width="0.1245%" height="15" fill="rgb(252,105,26)" fg:x="11242" fg:w="47"/><text x="30.0301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (22 samples, 0.06%)</title><rect x="30.2702%" y="197" width="0.0583%" height="15" fill="rgb(220,39,43)" fg:x="11427" fg:w="22"/><text x="30.5202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (164 samples, 0.43%)</title><rect x="30.4636%" y="181" width="0.4344%" height="15" fill="rgb(229,68,48)" fg:x="11500" fg:w="164"/><text x="30.7136%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.11%)</title><rect x="30.7894%" y="165" width="0.1086%" height="15" fill="rgb(252,8,32)" fg:x="11623" fg:w="41"/><text x="31.0394%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (390 samples, 1.03%)</title><rect x="29.9046%" y="213" width="1.0331%" height="15" fill="rgb(223,20,43)" fg:x="11289" fg:w="390"/><text x="30.1546%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (230 samples, 0.61%)</title><rect x="30.3285%" y="197" width="0.6093%" height="15" fill="rgb(229,81,49)" fg:x="11449" fg:w="230"/><text x="30.5785%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.04%)</title><rect x="30.8980%" y="181" width="0.0397%" height="15" fill="rgb(236,28,36)" fg:x="11664" fg:w="15"/><text x="31.1480%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (68 samples, 0.18%)</title><rect x="30.9377%" y="213" width="0.1801%" height="15" fill="rgb(249,185,26)" fg:x="11679" fg:w="68"/><text x="31.1877%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (28 samples, 0.07%)</title><rect x="31.1179%" y="213" width="0.0742%" height="15" fill="rgb(249,174,33)" fg:x="11747" fg:w="28"/><text x="31.3679%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (326 samples, 0.86%)</title><rect x="32.7417%" y="197" width="0.8636%" height="15" fill="rgb(233,201,37)" fg:x="12360" fg:w="326"/><text x="32.9917%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (913 samples, 2.42%)</title><rect x="31.1921%" y="213" width="2.4185%" height="15" fill="rgb(221,78,26)" fg:x="11775" fg:w="913"/><text x="31.4421%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (97 samples, 0.26%)</title><rect x="33.6106%" y="213" width="0.2570%" height="15" fill="rgb(250,127,30)" fg:x="12688" fg:w="97"/><text x="33.8606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (919 samples, 2.43%)</title><rect x="33.8675%" y="213" width="2.4344%" height="15" fill="rgb(230,49,44)" fg:x="12785" fg:w="919"/><text x="34.1175%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (87 samples, 0.23%)</title><rect x="36.3073%" y="213" width="0.2305%" height="15" fill="rgb(229,67,23)" fg:x="13706" fg:w="87"/><text x="36.5573%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (12,461 samples, 33.01%)</title><rect x="3.6344%" y="229" width="33.0093%" height="15" fill="rgb(249,83,47)" fg:x="1372" fg:w="12461"/><text x="3.8844%" y="239.50">gj`gj::join::bushy_join</text></g><g><title>libsystem_platform.dylib`_platform_memmove (40 samples, 0.11%)</title><rect x="36.5377%" y="213" width="0.1060%" height="15" fill="rgb(215,43,3)" fg:x="13793" fg:w="40"/><text x="36.7877%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join_inner (91 samples, 0.24%)</title><rect x="36.6437%" y="229" width="0.2411%" height="15" fill="rgb(238,154,13)" fg:x="13833" fg:w="91"/><text x="36.8937%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (27 samples, 0.07%)</title><rect x="36.8848%" y="229" width="0.0715%" height="15" fill="rgb(219,56,2)" fg:x="13924" fg:w="27"/><text x="37.1348%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.04%)</title><rect x="37.2159%" y="213" width="0.0371%" height="15" fill="rgb(233,0,4)" fg:x="14049" fg:w="14"/><text x="37.4659%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (77 samples, 0.20%)</title><rect x="37.6583%" y="133" width="0.2040%" height="15" fill="rgb(235,30,7)" fg:x="14216" fg:w="77"/><text x="37.9083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (25 samples, 0.07%)</title><rect x="37.7960%" y="117" width="0.0662%" height="15" fill="rgb(250,79,13)" fg:x="14268" fg:w="25"/><text x="38.0460%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (88 samples, 0.23%)</title><rect x="37.6344%" y="165" width="0.2331%" height="15" fill="rgb(211,146,34)" fg:x="14207" fg:w="88"/><text x="37.8844%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (82 samples, 0.22%)</title><rect x="37.6503%" y="149" width="0.2172%" height="15" fill="rgb(228,22,38)" fg:x="14213" fg:w="82"/><text x="37.9003%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (98 samples, 0.26%)</title><rect x="37.6212%" y="197" width="0.2596%" height="15" fill="rgb(235,168,5)" fg:x="14202" fg:w="98"/><text x="37.8712%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (94 samples, 0.25%)</title><rect x="37.6318%" y="181" width="0.2490%" height="15" fill="rgb(221,155,16)" fg:x="14206" fg:w="94"/><text x="37.8818%" y="191.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (172 samples, 0.46%)</title><rect x="37.8834%" y="197" width="0.4556%" height="15" fill="rgb(215,215,53)" fg:x="14301" fg:w="172"/><text x="38.1334%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.01%)</title><rect x="38.3391%" y="197" width="0.0132%" height="15" fill="rgb(223,4,10)" fg:x="14473" fg:w="5"/><text x="38.5891%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.01%)</title><rect x="38.3523%" y="197" width="0.0106%" height="15" fill="rgb(234,103,6)" fg:x="14478" fg:w="4"/><text x="38.6023%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.01%)</title><rect x="38.3523%" y="181" width="0.0106%" height="15" fill="rgb(227,97,0)" fg:x="14478" fg:w="4"/><text x="38.6023%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.01%)</title><rect x="38.3523%" y="165" width="0.0106%" height="15" fill="rgb(234,150,53)" fg:x="14478" fg:w="4"/><text x="38.6023%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (419 samples, 1.11%)</title><rect x="37.2556%" y="213" width="1.1099%" height="15" fill="rgb(228,201,54)" fg:x="14064" fg:w="419"/><text x="37.5056%" y="223.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (94 samples, 0.25%)</title><rect x="38.3656%" y="213" width="0.2490%" height="15" fill="rgb(222,22,37)" fg:x="14483" fg:w="94"/><text x="38.6156%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (8 samples, 0.02%)</title><rect x="38.7099%" y="197" width="0.0212%" height="15" fill="rgb(237,53,32)" fg:x="14613" fg:w="8"/><text x="38.9599%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (22 samples, 0.06%)</title><rect x="39.0013%" y="165" width="0.0583%" height="15" fill="rgb(233,25,53)" fg:x="14723" fg:w="22"/><text x="39.2513%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.30%)</title><rect x="38.7841%" y="181" width="0.3046%" height="15" fill="rgb(210,40,34)" fg:x="14641" fg:w="115"/><text x="39.0341%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (11 samples, 0.03%)</title><rect x="39.0596%" y="165" width="0.0291%" height="15" fill="rgb(241,220,44)" fg:x="14745" fg:w="11"/><text x="39.3096%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (191 samples, 0.51%)</title><rect x="38.6146%" y="213" width="0.5060%" height="15" fill="rgb(235,28,35)" fg:x="14577" fg:w="191"/><text x="38.8646%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (147 samples, 0.39%)</title><rect x="38.7311%" y="197" width="0.3894%" height="15" fill="rgb(210,56,17)" fg:x="14621" fg:w="147"/><text x="38.9811%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (12 samples, 0.03%)</title><rect x="39.0887%" y="181" width="0.0318%" height="15" fill="rgb(224,130,29)" fg:x="14756" fg:w="12"/><text x="39.3387%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.04%)</title><rect x="39.1205%" y="213" width="0.0397%" height="15" fill="rgb(235,212,8)" fg:x="14768" fg:w="15"/><text x="39.3705%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (29 samples, 0.08%)</title><rect x="39.2715%" y="197" width="0.0768%" height="15" fill="rgb(223,33,50)" fg:x="14825" fg:w="29"/><text x="39.5215%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (72 samples, 0.19%)</title><rect x="39.1603%" y="213" width="0.1907%" height="15" fill="rgb(219,149,13)" fg:x="14783" fg:w="72"/><text x="39.4103%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (247 samples, 0.65%)</title><rect x="39.3589%" y="213" width="0.6543%" height="15" fill="rgb(250,156,29)" fg:x="14858" fg:w="247"/><text x="39.6089%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.01%)</title><rect x="40.0132%" y="213" width="0.0132%" height="15" fill="rgb(216,193,19)" fg:x="15105" fg:w="5"/><text x="40.2632%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (1,169 samples, 3.10%)</title><rect x="36.9563%" y="229" width="3.0967%" height="15" fill="rgb(216,135,14)" fg:x="13951" fg:w="1169"/><text x="37.2063%" y="239.50">gj`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.03%)</title><rect x="40.0265%" y="213" width="0.0265%" height="15" fill="rgb(241,47,5)" fg:x="15110" fg:w="10"/><text x="40.2765%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (1,081 samples, 2.86%)</title><rect x="40.0530%" y="229" width="2.8636%" height="15" fill="rgb(233,42,35)" fg:x="15120" fg:w="1081"/><text x="40.3030%" y="239.50">gj..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,081 samples, 2.86%)</title><rect x="40.0530%" y="213" width="2.8636%" height="15" fill="rgb(231,13,6)" fg:x="15120" fg:w="1081"/><text x="40.3030%" y="223.50">gj..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,081 samples, 2.86%)</title><rect x="40.0530%" y="197" width="2.8636%" height="15" fill="rgb(207,181,40)" fg:x="15120" fg:w="1081"/><text x="40.3030%" y="207.50">gj..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,081 samples, 2.86%)</title><rect x="40.0530%" y="181" width="2.8636%" height="15" fill="rgb(254,173,49)" fg:x="15120" fg:w="1081"/><text x="40.3030%" y="191.50">gj..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (54 samples, 0.14%)</title><rect x="42.9166%" y="213" width="0.1430%" height="15" fill="rgb(221,1,38)" fg:x="16201" fg:w="54"/><text x="43.1666%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.03%)</title><rect x="43.0596%" y="213" width="0.0291%" height="15" fill="rgb(206,124,46)" fg:x="16255" fg:w="11"/><text x="43.3096%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (214 samples, 0.57%)</title><rect x="43.0887%" y="213" width="0.5669%" height="15" fill="rgb(249,21,11)" fg:x="16266" fg:w="214"/><text x="43.3387%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (68 samples, 0.18%)</title><rect x="43.6556%" y="213" width="0.1801%" height="15" fill="rgb(222,201,40)" fg:x="16480" fg:w="68"/><text x="43.9056%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (39 samples, 0.10%)</title><rect x="43.8358%" y="213" width="0.1033%" height="15" fill="rgb(235,61,29)" fg:x="16548" fg:w="39"/><text x="44.0858%" y="223.50"></text></g><g><title>gj`__rdl_alloc (51 samples, 0.14%)</title><rect x="43.9391%" y="213" width="0.1351%" height="15" fill="rgb(219,207,3)" fg:x="16587" fg:w="51"/><text x="44.1891%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (40 samples, 0.11%)</title><rect x="44.0742%" y="213" width="0.1060%" height="15" fill="rgb(222,56,46)" fg:x="16638" fg:w="40"/><text x="44.3242%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (31 samples, 0.08%)</title><rect x="48.1245%" y="165" width="0.0821%" height="15" fill="rgb(239,76,54)" fg:x="18167" fg:w="31"/><text x="48.3745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (169 samples, 0.45%)</title><rect x="49.8517%" y="133" width="0.4477%" height="15" fill="rgb(231,124,27)" fg:x="18819" fg:w="169"/><text x="50.1017%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (639 samples, 1.69%)</title><rect x="48.6225%" y="149" width="1.6927%" height="15" fill="rgb(249,195,6)" fg:x="18355" fg:w="639"/><text x="48.8725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.02%)</title><rect x="50.2993%" y="133" width="0.0159%" height="15" fill="rgb(237,174,47)" fg:x="18988" fg:w="6"/><text x="50.5493%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,184 samples, 3.14%)</title><rect x="47.2768%" y="181" width="3.1364%" height="15" fill="rgb(206,201,31)" fg:x="17847" fg:w="1184"/><text x="47.5268%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (833 samples, 2.21%)</title><rect x="48.2066%" y="165" width="2.2066%" height="15" fill="rgb(231,57,52)" fg:x="18198" fg:w="833"/><text x="48.4566%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (37 samples, 0.10%)</title><rect x="50.3152%" y="149" width="0.0980%" height="15" fill="rgb(248,177,22)" fg:x="18994" fg:w="37"/><text x="50.5652%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (72 samples, 0.19%)</title><rect x="50.4132%" y="181" width="0.1907%" height="15" fill="rgb(215,211,37)" fg:x="19031" fg:w="72"/><text x="50.6632%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,338 samples, 3.54%)</title><rect x="47.0623%" y="197" width="3.5444%" height="15" fill="rgb(241,128,51)" fg:x="17766" fg:w="1338"/><text x="47.3123%" y="207.50">gj`&lt;..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (311 samples, 0.82%)</title><rect x="50.6066%" y="197" width="0.8238%" height="15" fill="rgb(227,165,31)" fg:x="19104" fg:w="311"/><text x="50.8566%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (711 samples, 1.88%)</title><rect x="51.4305%" y="197" width="1.8834%" height="15" fill="rgb(228,167,24)" fg:x="19415" fg:w="711"/><text x="51.6805%" y="207.50">g..</text></g><g><title>gj`DYLD-STUB$$malloc (14 samples, 0.04%)</title><rect x="54.5457%" y="149" width="0.0371%" height="15" fill="rgb(228,143,12)" fg:x="20591" fg:w="14"/><text x="54.7957%" y="159.50"></text></g><g><title>gj`__rdl_alloc (18 samples, 0.05%)</title><rect x="54.5828%" y="149" width="0.0477%" height="15" fill="rgb(249,149,8)" fg:x="20605" fg:w="18"/><text x="54.8328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.07%)</title><rect x="55.0384%" y="117" width="0.0742%" height="15" fill="rgb(243,35,44)" fg:x="20777" fg:w="28"/><text x="55.2884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.06%)</title><rect x="55.2079%" y="101" width="0.0583%" height="15" fill="rgb(246,89,9)" fg:x="20841" fg:w="22"/><text x="55.4579%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (72 samples, 0.19%)</title><rect x="55.6768%" y="85" width="0.1907%" height="15" fill="rgb(233,213,13)" fg:x="21018" fg:w="72"/><text x="55.9268%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (634 samples, 1.68%)</title><rect x="55.1126%" y="117" width="1.6795%" height="15" fill="rgb(233,141,41)" fg:x="20805" fg:w="634"/><text x="55.3626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (576 samples, 1.53%)</title><rect x="55.2662%" y="101" width="1.5258%" height="15" fill="rgb(239,167,4)" fg:x="20863" fg:w="576"/><text x="55.5162%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (349 samples, 0.92%)</title><rect x="55.8675%" y="85" width="0.9245%" height="15" fill="rgb(209,217,16)" fg:x="21090" fg:w="349"/><text x="56.1175%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (136 samples, 0.36%)</title><rect x="56.4318%" y="69" width="0.3603%" height="15" fill="rgb(219,88,35)" fg:x="21303" fg:w="136"/><text x="56.6818%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (819 samples, 2.17%)</title><rect x="54.7258%" y="133" width="2.1695%" height="15" fill="rgb(220,193,23)" fg:x="20659" fg:w="819"/><text x="54.9758%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (39 samples, 0.10%)</title><rect x="56.7921%" y="117" width="0.1033%" height="15" fill="rgb(230,90,52)" fg:x="21439" fg:w="39"/><text x="57.0421%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (34 samples, 0.09%)</title><rect x="56.8954%" y="133" width="0.0901%" height="15" fill="rgb(252,106,19)" fg:x="21478" fg:w="34"/><text x="57.1454%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.05%)</title><rect x="56.9854%" y="133" width="0.0450%" height="15" fill="rgb(206,74,20)" fg:x="21512" fg:w="17"/><text x="57.2354%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (927 samples, 2.46%)</title><rect x="54.6305%" y="149" width="2.4556%" height="15" fill="rgb(230,138,44)" fg:x="20623" fg:w="927"/><text x="54.8805%" y="159.50">gj..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.06%)</title><rect x="57.0305%" y="133" width="0.0556%" height="15" fill="rgb(235,182,43)" fg:x="21529" fg:w="21"/><text x="57.2805%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,029 samples, 2.73%)</title><rect x="54.3788%" y="165" width="2.7258%" height="15" fill="rgb(242,16,51)" fg:x="20528" fg:w="1029"/><text x="54.6288%" y="175.50">gj..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.02%)</title><rect x="57.0861%" y="149" width="0.0185%" height="15" fill="rgb(248,9,4)" fg:x="21550" fg:w="7"/><text x="57.3361%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (25 samples, 0.07%)</title><rect x="57.1046%" y="165" width="0.0662%" height="15" fill="rgb(210,31,22)" fg:x="21557" fg:w="25"/><text x="57.3546%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (251 samples, 0.66%)</title><rect x="57.1709%" y="165" width="0.6649%" height="15" fill="rgb(239,54,39)" fg:x="21582" fg:w="251"/><text x="57.4209%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (219 samples, 0.58%)</title><rect x="58.4954%" y="149" width="0.5801%" height="15" fill="rgb(230,99,41)" fg:x="22082" fg:w="219"/><text x="58.7454%" y="159.50"></text></g><g><title>gj`core::str::converts::from_utf8 (30 samples, 0.08%)</title><rect x="60.0265%" y="133" width="0.0795%" height="15" fill="rgb(253,106,12)" fg:x="22660" fg:w="30"/><text x="60.2765%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.02%)</title><rect x="60.1801%" y="85" width="0.0238%" height="15" fill="rgb(213,46,41)" fg:x="22718" fg:w="9"/><text x="60.4301%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.06%)</title><rect x="60.1430%" y="117" width="0.0636%" height="15" fill="rgb(215,133,35)" fg:x="22704" fg:w="24"/><text x="60.3930%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.04%)</title><rect x="60.1669%" y="101" width="0.0397%" height="15" fill="rgb(213,28,5)" fg:x="22713" fg:w="15"/><text x="60.4169%" y="111.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (43 samples, 0.11%)</title><rect x="60.1060%" y="133" width="0.1139%" height="15" fill="rgb(215,77,49)" fg:x="22690" fg:w="43"/><text x="60.3560%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.01%)</title><rect x="60.2066%" y="117" width="0.0132%" height="15" fill="rgb(248,100,22)" fg:x="22728" fg:w="5"/><text x="60.4566%" y="127.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (472 samples, 1.25%)</title><rect x="59.0755%" y="149" width="1.2503%" height="15" fill="rgb(208,67,9)" fg:x="22301" fg:w="472"/><text x="59.3255%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.10%)</title><rect x="60.2225%" y="133" width="0.1033%" height="15" fill="rgb(219,133,21)" fg:x="22734" fg:w="39"/><text x="60.4725%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (44 samples, 0.12%)</title><rect x="60.5404%" y="101" width="0.1166%" height="15" fill="rgb(246,46,29)" fg:x="22854" fg:w="44"/><text x="60.7904%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (20 samples, 0.05%)</title><rect x="60.6040%" y="85" width="0.0530%" height="15" fill="rgb(246,185,52)" fg:x="22878" fg:w="20"/><text x="60.8540%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (99 samples, 0.26%)</title><rect x="60.4424%" y="117" width="0.2623%" height="15" fill="rgb(252,136,11)" fg:x="22817" fg:w="99"/><text x="60.6924%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (18 samples, 0.05%)</title><rect x="60.6570%" y="101" width="0.0477%" height="15" fill="rgb(219,138,53)" fg:x="22898" fg:w="18"/><text x="60.9070%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (8 samples, 0.02%)</title><rect x="60.7046%" y="117" width="0.0212%" height="15" fill="rgb(211,51,23)" fg:x="22916" fg:w="8"/><text x="60.9546%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (128 samples, 0.34%)</title><rect x="60.4397%" y="133" width="0.3391%" height="15" fill="rgb(247,221,28)" fg:x="22816" fg:w="128"/><text x="60.6897%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.05%)</title><rect x="60.7285%" y="117" width="0.0503%" height="15" fill="rgb(251,222,45)" fg:x="22925" fg:w="19"/><text x="60.9785%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (1,121 samples, 2.97%)</title><rect x="57.8358%" y="165" width="2.9695%" height="15" fill="rgb(217,162,53)" fg:x="21833" fg:w="1121"/><text x="58.0858%" y="175.50">gj`..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (181 samples, 0.48%)</title><rect x="60.3258%" y="149" width="0.4795%" height="15" fill="rgb(229,93,14)" fg:x="22773" fg:w="181"/><text x="60.5758%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (10 samples, 0.03%)</title><rect x="60.7788%" y="133" width="0.0265%" height="15" fill="rgb(209,67,49)" fg:x="22944" fg:w="10"/><text x="61.0288%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (28 samples, 0.07%)</title><rect x="60.8053%" y="165" width="0.0742%" height="15" fill="rgb(213,87,29)" fg:x="22954" fg:w="28"/><text x="61.0553%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (74 samples, 0.20%)</title><rect x="60.8795%" y="165" width="0.1960%" height="15" fill="rgb(205,151,52)" fg:x="22982" fg:w="74"/><text x="61.1295%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (109 samples, 0.29%)</title><rect x="61.0755%" y="165" width="0.2887%" height="15" fill="rgb(253,215,39)" fg:x="23056" fg:w="109"/><text x="61.3255%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (70 samples, 0.19%)</title><rect x="62.1245%" y="149" width="0.1854%" height="15" fill="rgb(221,220,41)" fg:x="23452" fg:w="70"/><text x="62.3745%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (172 samples, 0.46%)</title><rect x="63.6503%" y="117" width="0.4556%" height="15" fill="rgb(218,133,21)" fg:x="24028" fg:w="172"/><text x="63.9003%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (514 samples, 1.36%)</title><rect x="62.7470%" y="133" width="1.3616%" height="15" fill="rgb(221,193,43)" fg:x="23687" fg:w="514"/><text x="62.9970%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,091 samples, 2.89%)</title><rect x="61.3642%" y="165" width="2.8901%" height="15" fill="rgb(240,128,52)" fg:x="23165" fg:w="1091"/><text x="61.6142%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (734 samples, 1.94%)</title><rect x="62.3099%" y="149" width="1.9444%" height="15" fill="rgb(253,114,12)" fg:x="23522" fg:w="734"/><text x="62.5599%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (55 samples, 0.15%)</title><rect x="64.1086%" y="133" width="0.1457%" height="15" fill="rgb(215,223,47)" fg:x="24201" fg:w="55"/><text x="64.3586%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (89 samples, 0.24%)</title><rect x="64.2543%" y="165" width="0.2358%" height="15" fill="rgb(248,225,23)" fg:x="24256" fg:w="89"/><text x="64.5043%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (4,196 samples, 11.12%)</title><rect x="53.3854%" y="181" width="11.1152%" height="15" fill="rgb(250,108,0)" fg:x="20153" fg:w="4196"/><text x="53.6354%" y="191.50">gj`&lt;parquet::rec..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="64.4901%" y="165" width="0.0106%" height="15" fill="rgb(228,208,7)" fg:x="24345" fg:w="4"/><text x="64.7401%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (40 samples, 0.11%)</title><rect x="64.5007%" y="181" width="0.1060%" height="15" fill="rgb(244,45,10)" fg:x="24349" fg:w="40"/><text x="64.7507%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (52 samples, 0.14%)</title><rect x="64.6066%" y="181" width="0.1377%" height="15" fill="rgb(207,125,25)" fg:x="24389" fg:w="52"/><text x="64.8566%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (39 samples, 0.10%)</title><rect x="64.7444%" y="181" width="0.1033%" height="15" fill="rgb(210,195,18)" fg:x="24441" fg:w="39"/><text x="64.9944%" y="191.50"></text></g><g><title>gj`__rdl_alloc (47 samples, 0.12%)</title><rect x="64.8477%" y="181" width="0.1245%" height="15" fill="rgb(249,80,12)" fg:x="24480" fg:w="47"/><text x="65.0977%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.08%)</title><rect x="64.9722%" y="181" width="0.0821%" height="15" fill="rgb(221,65,9)" fg:x="24527" fg:w="31"/><text x="65.2222%" y="191.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (153 samples, 0.41%)</title><rect x="65.0675%" y="69" width="0.4053%" height="15" fill="rgb(235,49,36)" fg:x="24563" fg:w="153"/><text x="65.3175%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (163 samples, 0.43%)</title><rect x="65.0675%" y="85" width="0.4318%" height="15" fill="rgb(225,32,20)" fg:x="24563" fg:w="163"/><text x="65.3175%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.03%)</title><rect x="65.4728%" y="69" width="0.0265%" height="15" fill="rgb(215,141,46)" fg:x="24716" fg:w="10"/><text x="65.7228%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (177 samples, 0.47%)</title><rect x="65.0675%" y="101" width="0.4689%" height="15" fill="rgb(250,160,47)" fg:x="24563" fg:w="177"/><text x="65.3175%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (13 samples, 0.03%)</title><rect x="65.5020%" y="85" width="0.0344%" height="15" fill="rgb(216,222,40)" fg:x="24727" fg:w="13"/><text x="65.7520%" y="95.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (31 samples, 0.08%)</title><rect x="65.5364%" y="101" width="0.0821%" height="15" fill="rgb(234,217,39)" fg:x="24740" fg:w="31"/><text x="65.7864%" y="111.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (31 samples, 0.08%)</title><rect x="65.5364%" y="85" width="0.0821%" height="15" fill="rgb(207,178,40)" fg:x="24740" fg:w="31"/><text x="65.7864%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (31 samples, 0.08%)</title><rect x="65.5364%" y="69" width="0.0821%" height="15" fill="rgb(221,136,13)" fg:x="24740" fg:w="31"/><text x="65.7864%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.08%)</title><rect x="65.5364%" y="53" width="0.0821%" height="15" fill="rgb(249,199,10)" fg:x="24740" fg:w="31"/><text x="65.7864%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (29 samples, 0.08%)</title><rect x="65.5417%" y="37" width="0.0768%" height="15" fill="rgb(249,222,13)" fg:x="24742" fg:w="29"/><text x="65.7917%" y="47.50"></text></g><g><title>gj`std::io::default_read_buf (73 samples, 0.19%)</title><rect x="65.6185%" y="85" width="0.1934%" height="15" fill="rgb(244,185,38)" fg:x="24771" fg:w="73"/><text x="65.8685%" y="95.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (73 samples, 0.19%)</title><rect x="65.6185%" y="69" width="0.1934%" height="15" fill="rgb(236,202,9)" fg:x="24771" fg:w="73"/><text x="65.8685%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (72 samples, 0.19%)</title><rect x="65.6212%" y="53" width="0.1907%" height="15" fill="rgb(250,229,37)" fg:x="24772" fg:w="72"/><text x="65.8712%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (8 samples, 0.02%)</title><rect x="65.8119%" y="85" width="0.0212%" height="15" fill="rgb(206,174,23)" fg:x="24844" fg:w="8"/><text x="66.0619%" y="95.50"></text></g><g><title>gj`std::io::Read::read_to_end (83 samples, 0.22%)</title><rect x="65.6185%" y="101" width="0.2199%" height="15" fill="rgb(211,33,43)" fg:x="24771" fg:w="83"/><text x="65.8685%" y="111.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (294 samples, 0.78%)</title><rect x="65.0675%" y="117" width="0.7788%" height="15" fill="rgb(245,58,50)" fg:x="24563" fg:w="294"/><text x="65.3175%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (299 samples, 0.79%)</title><rect x="65.0623%" y="181" width="0.7921%" height="15" fill="rgb(244,68,36)" fg:x="24561" fg:w="299"/><text x="65.3123%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (299 samples, 0.79%)</title><rect x="65.0623%" y="165" width="0.7921%" height="15" fill="rgb(232,229,15)" fg:x="24561" fg:w="299"/><text x="65.3123%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (299 samples, 0.79%)</title><rect x="65.0623%" y="149" width="0.7921%" height="15" fill="rgb(254,30,23)" fg:x="24561" fg:w="299"/><text x="65.3123%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (297 samples, 0.79%)</title><rect x="65.0675%" y="133" width="0.7868%" height="15" fill="rgb(235,160,14)" fg:x="24563" fg:w="297"/><text x="65.3175%" y="143.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (7 samples, 0.02%)</title><rect x="65.8543%" y="181" width="0.0185%" height="15" fill="rgb(212,155,44)" fg:x="24860" fg:w="7"/><text x="66.1043%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (98 samples, 0.26%)</title><rect x="65.8728%" y="181" width="0.2596%" height="15" fill="rgb(226,2,50)" fg:x="24867" fg:w="98"/><text x="66.1228%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (6 samples, 0.02%)</title><rect x="66.1325%" y="181" width="0.0159%" height="15" fill="rgb(234,177,6)" fg:x="24965" fg:w="6"/><text x="66.3825%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.16%)</title><rect x="66.1483%" y="181" width="0.1589%" height="15" fill="rgb(217,24,9)" fg:x="24971" fg:w="60"/><text x="66.3983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.01%)</title><rect x="66.3073%" y="181" width="0.0106%" height="15" fill="rgb(220,13,46)" fg:x="25031" fg:w="4"/><text x="66.5573%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (5,222 samples, 13.83%)</title><rect x="53.3139%" y="197" width="13.8331%" height="15" fill="rgb(239,221,27)" fg:x="20126" fg:w="5222"/><text x="53.5639%" y="207.50">gj`&lt;parquet::record::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (313 samples, 0.83%)</title><rect x="66.3179%" y="181" width="0.8291%" height="15" fill="rgb(222,198,25)" fg:x="25035" fg:w="313"/><text x="66.5679%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (33 samples, 0.09%)</title><rect x="67.1470%" y="197" width="0.0874%" height="15" fill="rgb(211,99,13)" fg:x="25348" fg:w="33"/><text x="67.3970%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (106 samples, 0.28%)</title><rect x="67.2344%" y="197" width="0.2808%" height="15" fill="rgb(232,111,31)" fg:x="25381" fg:w="106"/><text x="67.4844%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (39 samples, 0.10%)</title><rect x="67.5152%" y="197" width="0.1033%" height="15" fill="rgb(245,82,37)" fg:x="25487" fg:w="39"/><text x="67.7652%" y="207.50"></text></g><g><title>gj`__rdl_alloc (40 samples, 0.11%)</title><rect x="67.6185%" y="197" width="0.1060%" height="15" fill="rgb(227,149,46)" fg:x="25526" fg:w="40"/><text x="67.8685%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (6 samples, 0.02%)</title><rect x="67.7245%" y="117" width="0.0159%" height="15" fill="rgb(218,36,50)" fg:x="25566" fg:w="6"/><text x="67.9745%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (6 samples, 0.02%)</title><rect x="67.7245%" y="101" width="0.0159%" height="15" fill="rgb(226,80,48)" fg:x="25566" fg:w="6"/><text x="67.9745%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.01%)</title><rect x="67.7404%" y="117" width="0.0132%" height="15" fill="rgb(238,224,15)" fg:x="25572" fg:w="5"/><text x="67.9904%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.01%)</title><rect x="67.7404%" y="101" width="0.0132%" height="15" fill="rgb(241,136,10)" fg:x="25572" fg:w="5"/><text x="67.9904%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.01%)</title><rect x="67.7404%" y="85" width="0.0132%" height="15" fill="rgb(208,32,45)" fg:x="25572" fg:w="5"/><text x="67.9904%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.03%)</title><rect x="67.7245%" y="133" width="0.0344%" height="15" fill="rgb(207,135,9)" fg:x="25566" fg:w="13"/><text x="67.9745%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.05%)</title><rect x="67.7245%" y="197" width="0.0477%" height="15" fill="rgb(206,86,44)" fg:x="25566" fg:w="18"/><text x="67.9745%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (18 samples, 0.05%)</title><rect x="67.7245%" y="181" width="0.0477%" height="15" fill="rgb(245,177,15)" fg:x="25566" fg:w="18"/><text x="67.9745%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.05%)</title><rect x="67.7245%" y="165" width="0.0477%" height="15" fill="rgb(206,64,50)" fg:x="25566" fg:w="18"/><text x="67.9745%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.05%)</title><rect x="67.7245%" y="149" width="0.0477%" height="15" fill="rgb(234,36,40)" fg:x="25566" fg:w="18"/><text x="67.9745%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.01%)</title><rect x="67.7589%" y="133" width="0.0132%" height="15" fill="rgb(213,64,8)" fg:x="25579" fg:w="5"/><text x="68.0089%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (155 samples, 0.41%)</title><rect x="67.7722%" y="197" width="0.4106%" height="15" fill="rgb(210,75,36)" fg:x="25584" fg:w="155"/><text x="68.0222%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (104 samples, 0.28%)</title><rect x="68.1828%" y="197" width="0.2755%" height="15" fill="rgb(229,88,21)" fg:x="25739" fg:w="104"/><text x="68.4328%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,048 samples, 2.78%)</title><rect x="69.2159%" y="181" width="2.7762%" height="15" fill="rgb(252,204,47)" fg:x="26129" fg:w="1048"/><text x="69.4659%" y="191.50">gj..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,826 samples, 4.84%)</title><rect x="68.4583%" y="197" width="4.8371%" height="15" fill="rgb(208,77,27)" fg:x="25843" fg:w="1826"/><text x="68.7083%" y="207.50">gj`has..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (492 samples, 1.30%)</title><rect x="71.9921%" y="181" width="1.3033%" height="15" fill="rgb(221,76,26)" fg:x="27177" fg:w="492"/><text x="72.2421%" y="191.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (4 samples, 0.01%)</title><rect x="73.2954%" y="197" width="0.0106%" height="15" fill="rgb(225,139,18)" fg:x="27669" fg:w="4"/><text x="73.5454%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (4 samples, 0.01%)</title><rect x="73.2954%" y="181" width="0.0106%" height="15" fill="rgb(230,137,11)" fg:x="27669" fg:w="4"/><text x="73.5454%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (59 samples, 0.16%)</title><rect x="74.2305%" y="181" width="0.1563%" height="15" fill="rgb(212,28,1)" fg:x="28022" fg:w="59"/><text x="74.4805%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (172 samples, 0.46%)</title><rect x="75.9391%" y="149" width="0.4556%" height="15" fill="rgb(248,164,17)" fg:x="28667" fg:w="172"/><text x="76.1891%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (578 samples, 1.53%)</title><rect x="74.8689%" y="165" width="1.5311%" height="15" fill="rgb(222,171,42)" fg:x="28263" fg:w="578"/><text x="75.1189%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,221 samples, 3.23%)</title><rect x="73.3086%" y="197" width="3.2344%" height="15" fill="rgb(243,84,45)" fg:x="27674" fg:w="1221"/><text x="73.5586%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (814 samples, 2.16%)</title><rect x="74.3868%" y="181" width="2.1563%" height="15" fill="rgb(252,49,23)" fg:x="28081" fg:w="814"/><text x="74.6368%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (54 samples, 0.14%)</title><rect x="76.4000%" y="165" width="0.1430%" height="15" fill="rgb(215,19,7)" fg:x="28841" fg:w="54"/><text x="76.6500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (100 samples, 0.26%)</title><rect x="76.5430%" y="197" width="0.2649%" height="15" fill="rgb(238,81,41)" fg:x="28895" fg:w="100"/><text x="76.7930%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1,155 samples, 3.06%)</title><rect x="82.1086%" y="181" width="3.0596%" height="15" fill="rgb(210,199,37)" fg:x="30996" fg:w="1155"/><text x="82.3586%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (17 samples, 0.05%)</title><rect x="85.1682%" y="181" width="0.0450%" height="15" fill="rgb(244,192,49)" fg:x="32151" fg:w="17"/><text x="85.4182%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3,333 samples, 8.83%)</title><rect x="76.8079%" y="197" width="8.8291%" height="15" fill="rgb(226,211,11)" fg:x="28995" fg:w="3333"/><text x="77.0579%" y="207.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`szone_size (160 samples, 0.42%)</title><rect x="85.2132%" y="181" width="0.4238%" height="15" fill="rgb(236,162,54)" fg:x="32168" fg:w="160"/><text x="85.4632%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (139 samples, 0.37%)</title><rect x="85.2689%" y="165" width="0.3682%" height="15" fill="rgb(220,229,9)" fg:x="32189" fg:w="139"/><text x="85.5189%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (81 samples, 0.21%)</title><rect x="86.7338%" y="165" width="0.2146%" height="15" fill="rgb(250,87,22)" fg:x="32742" fg:w="81"/><text x="86.9838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (558 samples, 1.48%)</title><rect x="85.6371%" y="197" width="1.4781%" height="15" fill="rgb(239,43,17)" fg:x="32328" fg:w="558"/><text x="85.8871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (390 samples, 1.03%)</title><rect x="86.0821%" y="181" width="1.0331%" height="15" fill="rgb(231,177,25)" fg:x="32496" fg:w="390"/><text x="86.3321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (63 samples, 0.17%)</title><rect x="86.9483%" y="165" width="0.1669%" height="15" fill="rgb(219,179,1)" fg:x="32823" fg:w="63"/><text x="87.1983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (200 samples, 0.53%)</title><rect x="87.1152%" y="197" width="0.5298%" height="15" fill="rgb(238,219,53)" fg:x="32886" fg:w="200"/><text x="87.3652%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (741 samples, 1.96%)</title><rect x="87.6450%" y="197" width="1.9629%" height="15" fill="rgb(232,167,36)" fg:x="33086" fg:w="741"/><text x="87.8950%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (302 samples, 0.80%)</title><rect x="89.6106%" y="197" width="0.8000%" height="15" fill="rgb(244,19,51)" fg:x="33828" fg:w="302"/><text x="89.8606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (46 samples, 0.12%)</title><rect x="90.4106%" y="197" width="0.1219%" height="15" fill="rgb(224,6,22)" fg:x="34130" fg:w="46"/><text x="90.6606%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (28 samples, 0.07%)</title><rect x="90.5325%" y="197" width="0.0742%" height="15" fill="rgb(224,145,5)" fg:x="34176" fg:w="28"/><text x="90.7825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.12%)</title><rect x="90.6066%" y="197" width="0.1192%" height="15" fill="rgb(234,130,49)" fg:x="34204" fg:w="45"/><text x="90.8566%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (711 samples, 1.88%)</title><rect x="90.7258%" y="197" width="1.8834%" height="15" fill="rgb(254,6,2)" fg:x="34249" fg:w="711"/><text x="90.9758%" y="207.50">l..</text></g><g><title>gj`gj::util::from_parquet (18,768 samples, 49.72%)</title><rect x="44.1801%" y="213" width="49.7166%" height="15" fill="rgb(208,96,46)" fg:x="16678" fg:w="18768"/><text x="44.4301%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (486 samples, 1.29%)</title><rect x="92.6093%" y="197" width="1.2874%" height="15" fill="rgb(239,3,39)" fg:x="34960" fg:w="486"/><text x="92.8593%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (172 samples, 0.46%)</title><rect x="93.8967%" y="213" width="0.4556%" height="15" fill="rgb(233,210,1)" fg:x="35446" fg:w="172"/><text x="94.1467%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (15 samples, 0.04%)</title><rect x="94.3523%" y="213" width="0.0397%" height="15" fill="rgb(244,137,37)" fg:x="35618" fg:w="15"/><text x="94.6023%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (48 samples, 0.13%)</title><rect x="94.3921%" y="213" width="0.1272%" height="15" fill="rgb(240,136,2)" fg:x="35633" fg:w="48"/><text x="94.6421%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (308 samples, 0.82%)</title><rect x="94.5192%" y="213" width="0.8159%" height="15" fill="rgb(239,18,37)" fg:x="35681" fg:w="308"/><text x="94.7692%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (442 samples, 1.17%)</title><rect x="95.3351%" y="213" width="1.1709%" height="15" fill="rgb(218,185,22)" fg:x="35989" fg:w="442"/><text x="95.5851%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.05%)</title><rect x="96.5060%" y="213" width="0.0477%" height="15" fill="rgb(225,218,4)" fg:x="36431" fg:w="18"/><text x="96.7560%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (282 samples, 0.75%)</title><rect x="96.5536%" y="213" width="0.7470%" height="15" fill="rgb(230,182,32)" fg:x="36449" fg:w="282"/><text x="96.8036%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (237 samples, 0.63%)</title><rect x="97.3007%" y="213" width="0.6278%" height="15" fill="rgb(242,56,43)" fg:x="36731" fg:w="237"/><text x="97.5507%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (10 samples, 0.03%)</title><rect x="97.9285%" y="213" width="0.0265%" height="15" fill="rgb(233,99,24)" fg:x="36968" fg:w="10"/><text x="98.1785%" y="223.50"></text></g><g><title>gj`gj::util::load_db (20,901 samples, 55.37%)</title><rect x="42.9166%" y="229" width="55.3669%" height="15" fill="rgb(234,209,42)" fg:x="16201" fg:w="20901"/><text x="43.1666%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (124 samples, 0.33%)</title><rect x="97.9550%" y="213" width="0.3285%" height="15" fill="rgb(227,7,12)" fg:x="36978" fg:w="124"/><text x="98.2050%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (50 samples, 0.13%)</title><rect x="98.2861%" y="229" width="0.1325%" height="15" fill="rgb(245,203,43)" fg:x="37103" fg:w="50"/><text x="98.5361%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (98 samples, 0.26%)</title><rect x="98.4185%" y="229" width="0.2596%" height="15" fill="rgb(238,205,33)" fg:x="37153" fg:w="98"/><text x="98.6685%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (234 samples, 0.62%)</title><rect x="98.6781%" y="229" width="0.6199%" height="15" fill="rgb(231,56,7)" fg:x="37251" fg:w="234"/><text x="98.9281%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.01%)</title><rect x="99.2980%" y="229" width="0.0132%" height="15" fill="rgb(244,186,29)" fg:x="37485" fg:w="5"/><text x="99.5480%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.01%)</title><rect x="99.2980%" y="213" width="0.0132%" height="15" fill="rgb(234,111,31)" fg:x="37485" fg:w="5"/><text x="99.5480%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.01%)</title><rect x="99.2980%" y="197" width="0.0132%" height="15" fill="rgb(241,149,10)" fg:x="37485" fg:w="5"/><text x="99.5480%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (135 samples, 0.36%)</title><rect x="99.3113%" y="229" width="0.3576%" height="15" fill="rgb(249,206,44)" fg:x="37490" fg:w="135"/><text x="99.5613%" y="239.50"></text></g><g><title>gj`gj::main (37,709 samples, 99.89%)</title><rect x="0.0026%" y="245" width="99.8914%" height="15" fill="rgb(251,153,30)" fg:x="1" fg:w="37709"/><text x="0.2526%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (85 samples, 0.23%)</title><rect x="99.6689%" y="229" width="0.2252%" height="15" fill="rgb(239,152,38)" fg:x="37625" fg:w="85"/><text x="99.9189%" y="239.50"></text></g><g><title>gj`main (37,734 samples, 99.96%)</title><rect x="0.0000%" y="309" width="99.9576%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="37734"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (37,734 samples, 99.96%)</title><rect x="0.0000%" y="293" width="99.9576%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="37734"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (37,734 samples, 99.96%)</title><rect x="0.0000%" y="277" width="99.9576%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="37734"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (37,734 samples, 99.96%)</title><rect x="0.0000%" y="261" width="99.9576%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="37734"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (24 samples, 0.06%)</title><rect x="99.8940%" y="245" width="0.0636%" height="15" fill="rgb(249,42,33)" fg:x="37710" fg:w="24"/><text x="100.1440%" y="255.50"></text></g><g><title>dyld`start (37,735 samples, 99.96%)</title><rect x="0.0000%" y="325" width="99.9603%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="37735"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>all (37,750 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="37750"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (14 samples, 0.04%)</title><rect x="99.9629%" y="325" width="0.0371%" height="15" fill="rgb(220,130,37)" fg:x="37736" fg:w="14"/><text x="100.2129%" y="335.50"></text></g></svg></svg>