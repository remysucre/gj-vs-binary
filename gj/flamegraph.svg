<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="59046"><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 0.44%)</title><rect x="0.1270%" y="197" width="0.4420%" height="15" fill="rgb(227,0,7)" fg:x="75" fg:w="261"/><text x="0.3770%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (45 samples, 0.08%)</title><rect x="0.9332%" y="181" width="0.0762%" height="15" fill="rgb(217,0,24)" fg:x="551" fg:w="45"/><text x="1.1832%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (267 samples, 0.45%)</title><rect x="0.5690%" y="197" width="0.4522%" height="15" fill="rgb(221,193,54)" fg:x="336" fg:w="267"/><text x="0.8190%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.01%)</title><rect x="1.0212%" y="197" width="0.0102%" height="15" fill="rgb(248,212,6)" fg:x="603" fg:w="6"/><text x="1.2712%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (11 samples, 0.02%)</title><rect x="1.0771%" y="165" width="0.0186%" height="15" fill="rgb(208,68,35)" fg:x="636" fg:w="11"/><text x="1.3271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.03%)</title><rect x="1.0958%" y="165" width="0.0271%" height="15" fill="rgb(232,128,0)" fg:x="647" fg:w="16"/><text x="1.3458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (66 samples, 0.11%)</title><rect x="1.0314%" y="197" width="0.1118%" height="15" fill="rgb(207,160,47)" fg:x="609" fg:w="66"/><text x="1.2814%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.11%)</title><rect x="1.0331%" y="181" width="0.1101%" height="15" fill="rgb(228,23,34)" fg:x="610" fg:w="65"/><text x="1.2831%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (6 samples, 0.01%)</title><rect x="1.1330%" y="165" width="0.0102%" height="15" fill="rgb(218,30,26)" fg:x="669" fg:w="6"/><text x="1.3830%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="1.1330%" y="149" width="0.0102%" height="15" fill="rgb(220,122,19)" fg:x="669" fg:w="6"/><text x="1.3830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.01%)</title><rect x="1.1432%" y="197" width="0.0135%" height="15" fill="rgb(250,228,42)" fg:x="675" fg:w="8"/><text x="1.3932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (161 samples, 0.27%)</title><rect x="1.1567%" y="197" width="0.2727%" height="15" fill="rgb(240,193,28)" fg:x="683" fg:w="161"/><text x="1.4067%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (69 samples, 0.12%)</title><rect x="1.3125%" y="181" width="0.1169%" height="15" fill="rgb(216,20,37)" fg:x="775" fg:w="69"/><text x="1.5625%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (69 samples, 0.12%)</title><rect x="1.3125%" y="165" width="0.1169%" height="15" fill="rgb(206,188,39)" fg:x="775" fg:w="69"/><text x="1.5625%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.03%)</title><rect x="1.4294%" y="197" width="0.0271%" height="15" fill="rgb(217,207,13)" fg:x="844" fg:w="16"/><text x="1.6794%" y="207.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (858 samples, 1.45%)</title><rect x="0.0051%" y="213" width="1.4531%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="858"/><text x="0.2551%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (10 samples, 0.02%)</title><rect x="1.4582%" y="213" width="0.0169%" height="15" fill="rgb(225,20,46)" fg:x="861" fg:w="10"/><text x="1.7082%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="1.4819%" y="213" width="0.0119%" height="15" fill="rgb(210,31,41)" fg:x="875" fg:w="7"/><text x="1.7319%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (34 samples, 0.06%)</title><rect x="1.4938%" y="213" width="0.0576%" height="15" fill="rgb(221,200,47)" fg:x="882" fg:w="34"/><text x="1.7438%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (94 samples, 0.16%)</title><rect x="1.5513%" y="213" width="0.1592%" height="15" fill="rgb(226,26,5)" fg:x="916" fg:w="94"/><text x="1.8013%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.02%)</title><rect x="1.7105%" y="213" width="0.0152%" height="15" fill="rgb(249,33,26)" fg:x="1010" fg:w="9"/><text x="1.9605%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.02%)</title><rect x="1.7105%" y="197" width="0.0152%" height="15" fill="rgb(235,183,28)" fg:x="1010" fg:w="9"/><text x="1.9605%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.02%)</title><rect x="1.7105%" y="181" width="0.0152%" height="15" fill="rgb(221,5,38)" fg:x="1010" fg:w="9"/><text x="1.9605%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (38 samples, 0.06%)</title><rect x="1.7258%" y="213" width="0.0644%" height="15" fill="rgb(247,18,42)" fg:x="1019" fg:w="38"/><text x="1.9758%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,062 samples, 1.80%)</title><rect x="0.0051%" y="229" width="1.7986%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="1062"/><text x="0.2551%" y="239.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.01%)</title><rect x="1.7901%" y="213" width="0.0135%" height="15" fill="rgb(249,31,29)" fg:x="1057" fg:w="8"/><text x="2.0401%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.02%)</title><rect x="1.8037%" y="229" width="0.0152%" height="15" fill="rgb(225,111,53)" fg:x="1065" fg:w="9"/><text x="2.0537%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (18 samples, 0.03%)</title><rect x="2.8419%" y="181" width="0.0305%" height="15" fill="rgb(238,160,17)" fg:x="1678" fg:w="18"/><text x="3.0919%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (38 samples, 0.06%)</title><rect x="2.8097%" y="197" width="0.0644%" height="15" fill="rgb(214,148,48)" fg:x="1659" fg:w="38"/><text x="3.0597%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (85 samples, 0.14%)</title><rect x="2.8740%" y="197" width="0.1440%" height="15" fill="rgb(232,36,49)" fg:x="1697" fg:w="85"/><text x="3.1240%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (85 samples, 0.14%)</title><rect x="2.8740%" y="181" width="0.1440%" height="15" fill="rgb(209,103,24)" fg:x="1697" fg:w="85"/><text x="3.1240%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (85 samples, 0.14%)</title><rect x="2.8740%" y="165" width="0.1440%" height="15" fill="rgb(229,88,8)" fg:x="1697" fg:w="85"/><text x="3.1240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (16 samples, 0.03%)</title><rect x="3.0214%" y="197" width="0.0271%" height="15" fill="rgb(213,181,19)" fg:x="1784" fg:w="16"/><text x="3.2714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.01%)</title><rect x="3.0383%" y="181" width="0.0102%" height="15" fill="rgb(254,191,54)" fg:x="1794" fg:w="6"/><text x="3.2883%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="3.0383%" y="165" width="0.0102%" height="15" fill="rgb(241,83,37)" fg:x="1794" fg:w="6"/><text x="3.2883%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (726 samples, 1.23%)</title><rect x="1.8240%" y="213" width="1.2295%" height="15" fill="rgb(233,36,39)" fg:x="1077" fg:w="726"/><text x="2.0740%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.03%)</title><rect x="3.0536%" y="197" width="0.0288%" height="15" fill="rgb(226,3,54)" fg:x="1803" fg:w="17"/><text x="3.3036%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (48 samples, 0.08%)</title><rect x="3.0823%" y="197" width="0.0813%" height="15" fill="rgb(245,192,40)" fg:x="1820" fg:w="48"/><text x="3.3323%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (48 samples, 0.08%)</title><rect x="3.0823%" y="181" width="0.0813%" height="15" fill="rgb(238,167,29)" fg:x="1820" fg:w="48"/><text x="3.3323%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (48 samples, 0.08%)</title><rect x="3.0823%" y="165" width="0.0813%" height="15" fill="rgb(232,182,51)" fg:x="1820" fg:w="48"/><text x="3.3323%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (66 samples, 0.11%)</title><rect x="3.0536%" y="213" width="0.1118%" height="15" fill="rgb(231,60,39)" fg:x="1803" fg:w="66"/><text x="3.3036%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (813 samples, 1.38%)</title><rect x="1.8189%" y="229" width="1.3769%" height="15" fill="rgb(208,69,12)" fg:x="1074" fg:w="813"/><text x="2.0689%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.02%)</title><rect x="3.1806%" y="213" width="0.0152%" height="15" fill="rgb(235,93,37)" fg:x="1878" fg:w="9"/><text x="3.4306%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6 samples, 0.01%)</title><rect x="3.1857%" y="197" width="0.0102%" height="15" fill="rgb(213,116,39)" fg:x="1881" fg:w="6"/><text x="3.4357%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.01%)</title><rect x="3.1857%" y="181" width="0.0102%" height="15" fill="rgb(222,207,29)" fg:x="1881" fg:w="6"/><text x="3.4357%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$free (23 samples, 0.04%)</title><rect x="3.1958%" y="229" width="0.0390%" height="15" fill="rgb(206,96,30)" fg:x="1887" fg:w="23"/><text x="3.4458%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (108 samples, 0.18%)</title><rect x="3.2348%" y="229" width="0.1829%" height="15" fill="rgb(218,138,4)" fg:x="1910" fg:w="108"/><text x="3.4848%" y="239.50"></text></g><g><title>gj`__rdl_alloc (24 samples, 0.04%)</title><rect x="3.4177%" y="229" width="0.0406%" height="15" fill="rgb(250,191,14)" fg:x="2018" fg:w="24"/><text x="3.6677%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (18 samples, 0.03%)</title><rect x="3.9969%" y="213" width="0.0305%" height="15" fill="rgb(239,60,40)" fg:x="2360" fg:w="18"/><text x="4.2469%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.03%)</title><rect x="9.7195%" y="117" width="0.0288%" height="15" fill="rgb(206,27,48)" fg:x="5739" fg:w="17"/><text x="9.9695%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.03%)</title><rect x="9.7229%" y="101" width="0.0254%" height="15" fill="rgb(225,35,8)" fg:x="5741" fg:w="15"/><text x="9.9729%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.02%)</title><rect x="9.7280%" y="85" width="0.0203%" height="15" fill="rgb(250,213,24)" fg:x="5744" fg:w="12"/><text x="9.9780%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (12 samples, 0.02%)</title><rect x="9.7280%" y="69" width="0.0203%" height="15" fill="rgb(247,123,22)" fg:x="5744" fg:w="12"/><text x="9.9780%" y="79.50"></text></g><g><title>gj`gj::join::materialize (35 samples, 0.06%)</title><rect x="9.6907%" y="165" width="0.0593%" height="15" fill="rgb(231,138,38)" fg:x="5722" fg:w="35"/><text x="9.9407%" y="175.50"></text></g><g><title>gj`gj::join::materialize (31 samples, 0.05%)</title><rect x="9.6975%" y="149" width="0.0525%" height="15" fill="rgb(231,145,46)" fg:x="5726" fg:w="31"/><text x="9.9475%" y="159.50"></text></g><g><title>gj`gj::join::materialize (22 samples, 0.04%)</title><rect x="9.7128%" y="133" width="0.0373%" height="15" fill="rgb(251,118,11)" fg:x="5735" fg:w="22"/><text x="9.9628%" y="143.50"></text></g><g><title>gj`gj::join::singleton_join_inner (3,385 samples, 5.73%)</title><rect x="4.0274%" y="213" width="5.7328%" height="15" fill="rgb(217,147,25)" fg:x="2378" fg:w="3385"/><text x="4.2774%" y="223.50">gj`gj::..</text></g><g><title>gj`gj::join::singleton_join_inner (584 samples, 0.99%)</title><rect x="8.7711%" y="197" width="0.9891%" height="15" fill="rgb(247,81,37)" fg:x="5179" fg:w="584"/><text x="9.0211%" y="207.50"></text></g><g><title>gj`gj::join::singleton_join_inner (42 samples, 0.07%)</title><rect x="9.6891%" y="181" width="0.0711%" height="15" fill="rgb(209,12,38)" fg:x="5721" fg:w="42"/><text x="9.9391%" y="191.50"></text></g><g><title>gj`gj::join::bushy_join (3,783 samples, 6.41%)</title><rect x="3.4600%" y="229" width="6.4069%" height="15" fill="rgb(227,1,9)" fg:x="2043" fg:w="3783"/><text x="3.7100%" y="239.50">gj`gj::j..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.11%)</title><rect x="9.7602%" y="213" width="0.1067%" height="15" fill="rgb(248,47,43)" fg:x="5763" fg:w="63"/><text x="10.0102%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (70 samples, 0.12%)</title><rect x="9.8669%" y="229" width="0.1186%" height="15" fill="rgb(221,10,30)" fg:x="5826" fg:w="70"/><text x="10.1169%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (11 samples, 0.02%)</title><rect x="9.9888%" y="229" width="0.0186%" height="15" fill="rgb(210,229,1)" fg:x="5898" fg:w="11"/><text x="10.2388%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.07%)</title><rect x="10.4122%" y="213" width="0.0661%" height="15" fill="rgb(222,148,37)" fg:x="6148" fg:w="39"/><text x="10.6622%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (47 samples, 0.08%)</title><rect x="11.2912%" y="133" width="0.0796%" height="15" fill="rgb(234,67,33)" fg:x="6667" fg:w="47"/><text x="11.5412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.01%)</title><rect x="11.3589%" y="117" width="0.0119%" height="15" fill="rgb(247,98,35)" fg:x="6707" fg:w="7"/><text x="11.6089%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (57 samples, 0.10%)</title><rect x="11.2793%" y="165" width="0.0965%" height="15" fill="rgb(247,138,52)" fg:x="6660" fg:w="57"/><text x="11.5293%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 0.09%)</title><rect x="11.2878%" y="149" width="0.0881%" height="15" fill="rgb(213,79,30)" fg:x="6665" fg:w="52"/><text x="11.5378%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (73 samples, 0.12%)</title><rect x="11.2692%" y="197" width="0.1236%" height="15" fill="rgb(246,177,23)" fg:x="6654" fg:w="73"/><text x="11.5192%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (68 samples, 0.12%)</title><rect x="11.2776%" y="181" width="0.1152%" height="15" fill="rgb(230,62,27)" fg:x="6659" fg:w="68"/><text x="11.5276%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.01%)</title><rect x="11.3827%" y="165" width="0.0102%" height="15" fill="rgb(216,154,8)" fg:x="6721" fg:w="6"/><text x="11.6327%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.02%)</title><rect x="12.3074%" y="133" width="0.0186%" height="15" fill="rgb(244,35,45)" fg:x="7267" fg:w="11"/><text x="12.5574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (82 samples, 0.14%)</title><rect x="12.2244%" y="149" width="0.1389%" height="15" fill="rgb(251,115,12)" fg:x="7218" fg:w="82"/><text x="12.4744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (22 samples, 0.04%)</title><rect x="12.3260%" y="133" width="0.0373%" height="15" fill="rgb(240,54,50)" fg:x="7278" fg:w="22"/><text x="12.5760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (85 samples, 0.14%)</title><rect x="12.2210%" y="165" width="0.1440%" height="15" fill="rgb(233,84,52)" fg:x="7216" fg:w="85"/><text x="12.4710%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (117 samples, 0.20%)</title><rect x="12.2024%" y="181" width="0.1982%" height="15" fill="rgb(207,117,47)" fg:x="7205" fg:w="117"/><text x="12.4524%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.04%)</title><rect x="12.3649%" y="165" width="0.0356%" height="15" fill="rgb(249,43,39)" fg:x="7301" fg:w="21"/><text x="12.6149%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.03%)</title><rect x="12.3734%" y="149" width="0.0271%" height="15" fill="rgb(209,38,44)" fg:x="7306" fg:w="16"/><text x="12.6234%" y="159.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (596 samples, 1.01%)</title><rect x="11.3945%" y="197" width="1.0094%" height="15" fill="rgb(236,212,23)" fg:x="6728" fg:w="596"/><text x="11.6445%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.03%)</title><rect x="12.4039%" y="197" width="0.0271%" height="15" fill="rgb(242,79,21)" fg:x="7324" fg:w="16"/><text x="12.6539%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.01%)</title><rect x="12.4344%" y="197" width="0.0119%" height="15" fill="rgb(211,96,35)" fg:x="7342" fg:w="7"/><text x="12.6844%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (8 samples, 0.01%)</title><rect x="12.4462%" y="197" width="0.0135%" height="15" fill="rgb(253,215,40)" fg:x="7349" fg:w="8"/><text x="12.6962%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.01%)</title><rect x="12.4462%" y="181" width="0.0135%" height="15" fill="rgb(211,81,21)" fg:x="7349" fg:w="8"/><text x="12.6962%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.01%)</title><rect x="12.4462%" y="165" width="0.0135%" height="15" fill="rgb(208,190,38)" fg:x="7349" fg:w="8"/><text x="12.6962%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (1,235 samples, 2.09%)</title><rect x="10.4800%" y="213" width="2.0916%" height="15" fill="rgb(235,213,38)" fg:x="6188" fg:w="1235"/><text x="10.7300%" y="223.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (57 samples, 0.10%)</title><rect x="12.4750%" y="197" width="0.0965%" height="15" fill="rgb(237,122,38)" fg:x="7366" fg:w="57"/><text x="12.7250%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (167 samples, 0.28%)</title><rect x="12.5716%" y="213" width="0.2828%" height="15" fill="rgb(244,218,35)" fg:x="7423" fg:w="167"/><text x="12.8216%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="12.9712%" y="197" width="0.0288%" height="15" fill="rgb(240,68,47)" fg:x="7659" fg:w="17"/><text x="13.2212%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (106 samples, 0.18%)</title><rect x="13.4946%" y="165" width="0.1795%" height="15" fill="rgb(210,16,53)" fg:x="7968" fg:w="106"/><text x="13.7446%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (369 samples, 0.62%)</title><rect x="13.0593%" y="181" width="0.6249%" height="15" fill="rgb(235,124,12)" fg:x="7711" fg:w="369"/><text x="13.3093%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.01%)</title><rect x="13.6741%" y="165" width="0.0102%" height="15" fill="rgb(224,169,11)" fg:x="8074" fg:w="6"/><text x="13.9241%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (502 samples, 0.85%)</title><rect x="12.8561%" y="213" width="0.8502%" height="15" fill="rgb(250,166,2)" fg:x="7591" fg:w="502"/><text x="13.1061%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (417 samples, 0.71%)</title><rect x="13.0000%" y="197" width="0.7062%" height="15" fill="rgb(242,216,29)" fg:x="7676" fg:w="417"/><text x="13.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="13.6842%" y="181" width="0.0220%" height="15" fill="rgb(230,116,27)" fg:x="8080" fg:w="13"/><text x="13.9342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (27 samples, 0.05%)</title><rect x="13.7080%" y="213" width="0.0457%" height="15" fill="rgb(228,99,48)" fg:x="8094" fg:w="27"/><text x="13.9580%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (74 samples, 0.13%)</title><rect x="13.9349%" y="197" width="0.1253%" height="15" fill="rgb(253,11,6)" fg:x="8228" fg:w="74"/><text x="14.1849%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (184 samples, 0.31%)</title><rect x="13.7537%" y="213" width="0.3116%" height="15" fill="rgb(247,143,39)" fg:x="8121" fg:w="184"/><text x="14.0037%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (16 samples, 0.03%)</title><rect x="14.0653%" y="213" width="0.0271%" height="15" fill="rgb(236,97,10)" fg:x="8305" fg:w="16"/><text x="14.3153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (734 samples, 1.24%)</title><rect x="14.0924%" y="213" width="1.2431%" height="15" fill="rgb(233,208,19)" fg:x="8321" fg:w="734"/><text x="14.3424%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (3,161 samples, 5.35%)</title><rect x="10.0075%" y="229" width="5.3535%" height="15" fill="rgb(216,164,2)" fg:x="5909" fg:w="3161"/><text x="10.2575%" y="239.50">gj`gj::..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.02%)</title><rect x="15.3406%" y="213" width="0.0203%" height="15" fill="rgb(220,129,5)" fg:x="9058" fg:w="12"/><text x="15.5906%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (1,216 samples, 2.06%)</title><rect x="15.3626%" y="229" width="2.0594%" height="15" fill="rgb(242,17,10)" fg:x="9071" fg:w="1216"/><text x="15.6126%" y="239.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,216 samples, 2.06%)</title><rect x="15.3626%" y="213" width="2.0594%" height="15" fill="rgb(242,107,0)" fg:x="9071" fg:w="1216"/><text x="15.6126%" y="223.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,216 samples, 2.06%)</title><rect x="15.3626%" y="197" width="2.0594%" height="15" fill="rgb(251,28,31)" fg:x="9071" fg:w="1216"/><text x="15.6126%" y="207.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,216 samples, 2.06%)</title><rect x="15.3626%" y="181" width="2.0594%" height="15" fill="rgb(233,223,10)" fg:x="9071" fg:w="1216"/><text x="15.6126%" y="191.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (80 samples, 0.14%)</title><rect x="17.4220%" y="213" width="0.1355%" height="15" fill="rgb(215,21,27)" fg:x="10287" fg:w="80"/><text x="17.6720%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.09%)</title><rect x="17.5575%" y="213" width="0.0864%" height="15" fill="rgb(232,23,21)" fg:x="10367" fg:w="51"/><text x="17.8075%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (461 samples, 0.78%)</title><rect x="17.6439%" y="213" width="0.7807%" height="15" fill="rgb(244,5,23)" fg:x="10418" fg:w="461"/><text x="17.8939%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (93 samples, 0.16%)</title><rect x="18.4246%" y="213" width="0.1575%" height="15" fill="rgb(226,81,46)" fg:x="10879" fg:w="93"/><text x="18.6746%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (122 samples, 0.21%)</title><rect x="18.5821%" y="213" width="0.2066%" height="15" fill="rgb(247,70,30)" fg:x="10972" fg:w="122"/><text x="18.8321%" y="223.50"></text></g><g><title>gj`__rdl_alloc (136 samples, 0.23%)</title><rect x="18.7887%" y="213" width="0.2303%" height="15" fill="rgb(212,68,19)" fg:x="11094" fg:w="136"/><text x="19.0387%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (91 samples, 0.15%)</title><rect x="19.0191%" y="213" width="0.1541%" height="15" fill="rgb(240,187,13)" fg:x="11230" fg:w="91"/><text x="19.2691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (88 samples, 0.15%)</title><rect x="24.6587%" y="165" width="0.1490%" height="15" fill="rgb(223,113,26)" fg:x="14560" fg:w="88"/><text x="24.9087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (414 samples, 0.70%)</title><rect x="26.9332%" y="133" width="0.7011%" height="15" fill="rgb(206,192,2)" fg:x="15903" fg:w="414"/><text x="27.1832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,328 samples, 2.25%)</title><rect x="25.4005%" y="149" width="2.2491%" height="15" fill="rgb(241,108,4)" fg:x="14998" fg:w="1328"/><text x="25.6505%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.02%)</title><rect x="27.6344%" y="133" width="0.0152%" height="15" fill="rgb(247,173,49)" fg:x="16317" fg:w="9"/><text x="27.8844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,541 samples, 4.30%)</title><rect x="23.5257%" y="181" width="4.3034%" height="15" fill="rgb(224,114,35)" fg:x="13891" fg:w="2541"/><text x="23.7757%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,784 samples, 3.02%)</title><rect x="24.8078%" y="165" width="3.0214%" height="15" fill="rgb(245,159,27)" fg:x="14648" fg:w="1784"/><text x="25.0578%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (106 samples, 0.18%)</title><rect x="27.6496%" y="149" width="0.1795%" height="15" fill="rgb(245,172,44)" fg:x="16326" fg:w="106"/><text x="27.8996%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (181 samples, 0.31%)</title><rect x="27.8292%" y="181" width="0.3065%" height="15" fill="rgb(236,23,11)" fg:x="16432" fg:w="181"/><text x="28.0792%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,914 samples, 4.94%)</title><rect x="23.2073%" y="197" width="4.9351%" height="15" fill="rgb(205,117,38)" fg:x="13703" fg:w="2914"/><text x="23.4573%" y="207.50">gj`&lt;al..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (870 samples, 1.47%)</title><rect x="28.1425%" y="197" width="1.4734%" height="15" fill="rgb(237,72,25)" fg:x="16617" fg:w="870"/><text x="28.3925%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (2,177 samples, 3.69%)</title><rect x="29.6159%" y="197" width="3.6870%" height="15" fill="rgb(244,70,9)" fg:x="17487" fg:w="2177"/><text x="29.8659%" y="207.50">gj`&lt;..</text></g><g><title>gj`DYLD-STUB$$malloc (42 samples, 0.07%)</title><rect x="35.3284%" y="149" width="0.0711%" height="15" fill="rgb(217,125,39)" fg:x="20860" fg:w="42"/><text x="35.5784%" y="159.50"></text></g><g><title>gj`__rdl_alloc (42 samples, 0.07%)</title><rect x="35.3995%" y="149" width="0.0711%" height="15" fill="rgb(235,36,10)" fg:x="20902" fg:w="42"/><text x="35.6495%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (98 samples, 0.17%)</title><rect x="36.2751%" y="117" width="0.1660%" height="15" fill="rgb(251,123,47)" fg:x="21419" fg:w="98"/><text x="36.5251%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (63 samples, 0.11%)</title><rect x="36.6799%" y="101" width="0.1067%" height="15" fill="rgb(221,13,13)" fg:x="21658" fg:w="63"/><text x="36.9299%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (331 samples, 0.56%)</title><rect x="37.6723%" y="85" width="0.5606%" height="15" fill="rgb(238,131,9)" fg:x="22244" fg:w="331"/><text x="37.9223%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,552 samples, 2.63%)</title><rect x="36.4411%" y="117" width="2.6285%" height="15" fill="rgb(211,50,8)" fg:x="21517" fg:w="1552"/><text x="36.6911%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,348 samples, 2.28%)</title><rect x="36.7866%" y="101" width="2.2830%" height="15" fill="rgb(245,182,24)" fg:x="21721" fg:w="1348"/><text x="37.0366%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (494 samples, 0.84%)</title><rect x="38.2329%" y="85" width="0.8366%" height="15" fill="rgb(242,14,37)" fg:x="22575" fg:w="494"/><text x="38.4829%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (86 samples, 0.15%)</title><rect x="38.9239%" y="69" width="0.1456%" height="15" fill="rgb(246,228,12)" fg:x="22983" fg:w="86"/><text x="39.1739%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,087 samples, 3.53%)</title><rect x="35.6942%" y="133" width="3.5345%" height="15" fill="rgb(213,55,15)" fg:x="21076" fg:w="2087"/><text x="35.9442%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (94 samples, 0.16%)</title><rect x="39.0695%" y="117" width="0.1592%" height="15" fill="rgb(209,9,3)" fg:x="23069" fg:w="94"/><text x="39.3195%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (90 samples, 0.15%)</title><rect x="39.2287%" y="133" width="0.1524%" height="15" fill="rgb(230,59,30)" fg:x="23163" fg:w="90"/><text x="39.4787%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (52 samples, 0.09%)</title><rect x="39.3812%" y="133" width="0.0881%" height="15" fill="rgb(209,121,21)" fg:x="23253" fg:w="52"/><text x="39.6312%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (2,411 samples, 4.08%)</title><rect x="35.4707%" y="149" width="4.0833%" height="15" fill="rgb(220,109,13)" fg:x="20944" fg:w="2411"/><text x="35.7207%" y="159.50">gj`a..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="39.4692%" y="133" width="0.0847%" height="15" fill="rgb(232,18,1)" fg:x="23305" fg:w="50"/><text x="39.7192%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,666 samples, 4.52%)</title><rect x="35.0676%" y="165" width="4.5151%" height="15" fill="rgb(215,41,42)" fg:x="20706" fg:w="2666"/><text x="35.3176%" y="175.50">gj`al..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.03%)</title><rect x="39.5539%" y="149" width="0.0288%" height="15" fill="rgb(224,123,36)" fg:x="23355" fg:w="17"/><text x="39.8039%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (117 samples, 0.20%)</title><rect x="39.5827%" y="165" width="0.1982%" height="15" fill="rgb(240,125,3)" fg:x="23372" fg:w="117"/><text x="39.8327%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (552 samples, 0.93%)</title><rect x="39.7808%" y="165" width="0.9349%" height="15" fill="rgb(205,98,50)" fg:x="23489" fg:w="552"/><text x="40.0308%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (461 samples, 0.78%)</title><rect x="41.5625%" y="149" width="0.7807%" height="15" fill="rgb(205,185,37)" fg:x="24541" fg:w="461"/><text x="41.8125%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$malloc (6 samples, 0.01%)</title><rect x="43.7032%" y="133" width="0.0102%" height="15" fill="rgb(238,207,15)" fg:x="25805" fg:w="6"/><text x="43.9532%" y="143.50"></text></g><g><title>gj`core::str::converts::from_utf8 (16 samples, 0.03%)</title><rect x="43.7286%" y="133" width="0.0271%" height="15" fill="rgb(213,199,42)" fg:x="25820" fg:w="16"/><text x="43.9786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (19 samples, 0.03%)</title><rect x="43.8048%" y="85" width="0.0322%" height="15" fill="rgb(235,201,11)" fg:x="25865" fg:w="19"/><text x="44.0548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.06%)</title><rect x="43.7845%" y="117" width="0.0593%" height="15" fill="rgb(207,46,11)" fg:x="25853" fg:w="35"/><text x="44.0345%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.05%)</title><rect x="43.7964%" y="101" width="0.0474%" height="15" fill="rgb(241,35,35)" fg:x="25860" fg:w="28"/><text x="44.0464%" y="111.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (57 samples, 0.10%)</title><rect x="43.7557%" y="133" width="0.0965%" height="15" fill="rgb(243,32,47)" fg:x="25836" fg:w="57"/><text x="44.0057%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (936 samples, 1.59%)</title><rect x="42.3433%" y="149" width="1.5852%" height="15" fill="rgb(247,202,23)" fg:x="25002" fg:w="936"/><text x="42.5933%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (44 samples, 0.07%)</title><rect x="43.8539%" y="133" width="0.0745%" height="15" fill="rgb(219,102,11)" fg:x="25894" fg:w="44"/><text x="44.1039%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (52 samples, 0.09%)</title><rect x="44.1740%" y="101" width="0.0881%" height="15" fill="rgb(243,110,44)" fg:x="26083" fg:w="52"/><text x="44.4240%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (33 samples, 0.06%)</title><rect x="44.2062%" y="85" width="0.0559%" height="15" fill="rgb(222,74,54)" fg:x="26102" fg:w="33"/><text x="44.4562%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (131 samples, 0.22%)</title><rect x="44.0809%" y="117" width="0.2219%" height="15" fill="rgb(216,99,12)" fg:x="26028" fg:w="131"/><text x="44.3309%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (24 samples, 0.04%)</title><rect x="44.2621%" y="101" width="0.0406%" height="15" fill="rgb(226,22,26)" fg:x="26135" fg:w="24"/><text x="44.5121%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (11 samples, 0.02%)</title><rect x="44.3027%" y="117" width="0.0186%" height="15" fill="rgb(217,163,10)" fg:x="26159" fg:w="11"/><text x="44.5527%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (184 samples, 0.31%)</title><rect x="44.0792%" y="133" width="0.3116%" height="15" fill="rgb(213,25,53)" fg:x="26027" fg:w="184"/><text x="44.3292%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.07%)</title><rect x="44.3248%" y="117" width="0.0661%" height="15" fill="rgb(252,105,26)" fg:x="26172" fg:w="39"/><text x="44.5748%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (2,190 samples, 3.71%)</title><rect x="40.7157%" y="165" width="3.7090%" height="15" fill="rgb(220,39,43)" fg:x="24041" fg:w="2190"/><text x="40.9657%" y="175.50">gj`p..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (293 samples, 0.50%)</title><rect x="43.9285%" y="149" width="0.4962%" height="15" fill="rgb(229,68,48)" fg:x="25938" fg:w="293"/><text x="44.1785%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (20 samples, 0.03%)</title><rect x="44.3908%" y="133" width="0.0339%" height="15" fill="rgb(252,8,32)" fg:x="26211" fg:w="20"/><text x="44.6408%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (80 samples, 0.14%)</title><rect x="44.4247%" y="165" width="0.1355%" height="15" fill="rgb(223,20,43)" fg:x="26231" fg:w="80"/><text x="44.6747%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (169 samples, 0.29%)</title><rect x="44.5602%" y="165" width="0.2862%" height="15" fill="rgb(229,81,49)" fg:x="26311" fg:w="169"/><text x="44.8102%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (225 samples, 0.38%)</title><rect x="44.8464%" y="165" width="0.3811%" height="15" fill="rgb(236,28,36)" fg:x="26480" fg:w="225"/><text x="45.0964%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (149 samples, 0.25%)</title><rect x="46.2843%" y="149" width="0.2523%" height="15" fill="rgb(249,185,26)" fg:x="27329" fg:w="149"/><text x="46.5343%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (417 samples, 0.71%)</title><rect x="48.6367%" y="117" width="0.7062%" height="15" fill="rgb(249,174,33)" fg:x="28718" fg:w="417"/><text x="48.8867%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,324 samples, 2.24%)</title><rect x="47.1023%" y="133" width="2.2423%" height="15" fill="rgb(233,201,37)" fg:x="27812" fg:w="1324"/><text x="47.3523%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,580 samples, 4.37%)</title><rect x="45.2274%" y="165" width="4.3695%" height="15" fill="rgb(221,78,26)" fg:x="26705" fg:w="2580"/><text x="45.4774%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,807 samples, 3.06%)</title><rect x="46.5366%" y="149" width="3.0603%" height="15" fill="rgb(250,127,30)" fg:x="27478" fg:w="1807"/><text x="46.7866%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (149 samples, 0.25%)</title><rect x="49.3446%" y="133" width="0.2523%" height="15" fill="rgb(230,49,44)" fg:x="29136" fg:w="149"/><text x="49.5946%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (183 samples, 0.31%)</title><rect x="49.5969%" y="165" width="0.3099%" height="15" fill="rgb(229,67,23)" fg:x="29285" fg:w="183"/><text x="49.8469%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (9,668 samples, 16.37%)</title><rect x="33.5501%" y="181" width="16.3737%" height="15" fill="rgb(249,83,47)" fg:x="19810" fg:w="9668"/><text x="33.8001%" y="191.50">gj`&lt;parquet::record::read..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.02%)</title><rect x="49.9069%" y="165" width="0.0169%" height="15" fill="rgb(215,43,3)" fg:x="29468" fg:w="10"/><text x="50.1569%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (107 samples, 0.18%)</title><rect x="49.9238%" y="181" width="0.1812%" height="15" fill="rgb(238,154,13)" fg:x="29478" fg:w="107"/><text x="50.1738%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (95 samples, 0.16%)</title><rect x="50.1050%" y="181" width="0.1609%" height="15" fill="rgb(219,56,2)" fg:x="29585" fg:w="95"/><text x="50.3550%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (119 samples, 0.20%)</title><rect x="50.2659%" y="181" width="0.2015%" height="15" fill="rgb(233,0,4)" fg:x="29680" fg:w="119"/><text x="50.5159%" y="191.50"></text></g><g><title>gj`__rdl_alloc (104 samples, 0.18%)</title><rect x="50.4674%" y="181" width="0.1761%" height="15" fill="rgb(235,30,7)" fg:x="29799" fg:w="104"/><text x="50.7174%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (112 samples, 0.19%)</title><rect x="50.6436%" y="181" width="0.1897%" height="15" fill="rgb(250,79,13)" fg:x="29903" fg:w="112"/><text x="50.8936%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.02%)</title><rect x="50.8349%" y="69" width="0.0169%" height="15" fill="rgb(211,146,34)" fg:x="30016" fg:w="10"/><text x="51.0849%" y="79.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="50.8349%" y="133" width="0.0186%" height="15" fill="rgb(228,22,38)" fg:x="30016" fg:w="11"/><text x="51.0849%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (11 samples, 0.02%)</title><rect x="50.8349%" y="117" width="0.0186%" height="15" fill="rgb(235,168,5)" fg:x="30016" fg:w="11"/><text x="51.0849%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (11 samples, 0.02%)</title><rect x="50.8349%" y="101" width="0.0186%" height="15" fill="rgb(221,155,16)" fg:x="30016" fg:w="11"/><text x="51.0849%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.02%)</title><rect x="50.8349%" y="85" width="0.0186%" height="15" fill="rgb(215,215,53)" fg:x="30016" fg:w="11"/><text x="51.0849%" y="95.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (16 samples, 0.03%)</title><rect x="50.8332%" y="181" width="0.0271%" height="15" fill="rgb(223,4,10)" fg:x="30015" fg:w="16"/><text x="51.0832%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (16 samples, 0.03%)</title><rect x="50.8332%" y="165" width="0.0271%" height="15" fill="rgb(234,103,6)" fg:x="30015" fg:w="16"/><text x="51.0832%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (15 samples, 0.03%)</title><rect x="50.8349%" y="149" width="0.0254%" height="15" fill="rgb(227,97,0)" fg:x="30016" fg:w="15"/><text x="51.0849%" y="159.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (327 samples, 0.55%)</title><rect x="50.8688%" y="69" width="0.5538%" height="15" fill="rgb(234,150,53)" fg:x="30036" fg:w="327"/><text x="51.1188%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (355 samples, 0.60%)</title><rect x="50.8671%" y="85" width="0.6012%" height="15" fill="rgb(228,201,54)" fg:x="30035" fg:w="355"/><text x="51.1171%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.05%)</title><rect x="51.4226%" y="69" width="0.0457%" height="15" fill="rgb(222,22,37)" fg:x="30363" fg:w="27"/><text x="51.6726%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (376 samples, 0.64%)</title><rect x="50.8671%" y="101" width="0.6368%" height="15" fill="rgb(237,53,32)" fg:x="30035" fg:w="376"/><text x="51.1171%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (20 samples, 0.03%)</title><rect x="51.4700%" y="85" width="0.0339%" height="15" fill="rgb(233,25,53)" fg:x="30391" fg:w="20"/><text x="51.7200%" y="95.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (31 samples, 0.05%)</title><rect x="51.5056%" y="85" width="0.0525%" height="15" fill="rgb(210,40,34)" fg:x="30412" fg:w="31"/><text x="51.7556%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (31 samples, 0.05%)</title><rect x="51.5056%" y="69" width="0.0525%" height="15" fill="rgb(241,220,44)" fg:x="30412" fg:w="31"/><text x="51.7556%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.05%)</title><rect x="51.5056%" y="53" width="0.0525%" height="15" fill="rgb(235,28,35)" fg:x="30412" fg:w="31"/><text x="51.7556%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (29 samples, 0.05%)</title><rect x="51.5090%" y="37" width="0.0491%" height="15" fill="rgb(210,56,17)" fg:x="30414" fg:w="29"/><text x="51.7590%" y="47.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (32 samples, 0.05%)</title><rect x="51.5056%" y="101" width="0.0542%" height="15" fill="rgb(224,130,29)" fg:x="30412" fg:w="32"/><text x="51.7556%" y="111.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (139 samples, 0.24%)</title><rect x="51.5598%" y="69" width="0.2354%" height="15" fill="rgb(235,212,8)" fg:x="30444" fg:w="139"/><text x="51.8098%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (137 samples, 0.23%)</title><rect x="51.5632%" y="53" width="0.2320%" height="15" fill="rgb(223,33,50)" fg:x="30446" fg:w="137"/><text x="51.8132%" y="63.50"></text></g><g><title>gj`std::io::default_read_buf (140 samples, 0.24%)</title><rect x="51.5598%" y="85" width="0.2371%" height="15" fill="rgb(219,149,13)" fg:x="30444" fg:w="140"/><text x="51.8098%" y="95.50"></text></g><g><title>gj`std::io::Read::read_to_end (151 samples, 0.26%)</title><rect x="51.5598%" y="101" width="0.2557%" height="15" fill="rgb(250,156,29)" fg:x="30444" fg:w="151"/><text x="51.8098%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.02%)</title><rect x="51.7969%" y="85" width="0.0186%" height="15" fill="rgb(216,193,19)" fg:x="30584" fg:w="11"/><text x="52.0469%" y="95.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (567 samples, 0.96%)</title><rect x="50.8603%" y="181" width="0.9603%" height="15" fill="rgb(216,135,14)" fg:x="30031" fg:w="567"/><text x="51.1103%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (567 samples, 0.96%)</title><rect x="50.8603%" y="165" width="0.9603%" height="15" fill="rgb(241,47,5)" fg:x="30031" fg:w="567"/><text x="51.1103%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (567 samples, 0.96%)</title><rect x="50.8603%" y="149" width="0.9603%" height="15" fill="rgb(233,42,35)" fg:x="30031" fg:w="567"/><text x="51.1103%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (564 samples, 0.96%)</title><rect x="50.8654%" y="133" width="0.9552%" height="15" fill="rgb(231,13,6)" fg:x="30034" fg:w="564"/><text x="51.1154%" y="143.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (563 samples, 0.95%)</title><rect x="50.8671%" y="117" width="0.9535%" height="15" fill="rgb(207,181,40)" fg:x="30035" fg:w="563"/><text x="51.1171%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (33 samples, 0.06%)</title><rect x="51.8206%" y="181" width="0.0559%" height="15" fill="rgb(254,173,49)" fg:x="30598" fg:w="33"/><text x="52.0706%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (200 samples, 0.34%)</title><rect x="51.8765%" y="181" width="0.3387%" height="15" fill="rgb(221,1,38)" fg:x="30631" fg:w="200"/><text x="52.1265%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (161 samples, 0.27%)</title><rect x="52.2220%" y="181" width="0.2727%" height="15" fill="rgb(206,124,46)" fg:x="30835" fg:w="161"/><text x="52.4720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (21 samples, 0.04%)</title><rect x="52.4964%" y="181" width="0.0356%" height="15" fill="rgb(249,21,11)" fg:x="30997" fg:w="21"/><text x="52.7464%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (12,042 samples, 20.39%)</title><rect x="33.3028%" y="197" width="20.3943%" height="15" fill="rgb(222,201,40)" fg:x="19664" fg:w="12042"/><text x="33.5528%" y="207.50">gj`&lt;parquet::record::reader::Row..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (687 samples, 1.16%)</title><rect x="52.5336%" y="181" width="1.1635%" height="15" fill="rgb(235,61,29)" fg:x="31019" fg:w="687"/><text x="52.7836%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (95 samples, 0.16%)</title><rect x="53.6971%" y="197" width="0.1609%" height="15" fill="rgb(219,207,3)" fg:x="31706" fg:w="95"/><text x="53.9471%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (268 samples, 0.45%)</title><rect x="53.8580%" y="197" width="0.4539%" height="15" fill="rgb(222,56,46)" fg:x="31801" fg:w="268"/><text x="54.1080%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (100 samples, 0.17%)</title><rect x="54.3119%" y="197" width="0.1694%" height="15" fill="rgb(239,76,54)" fg:x="32069" fg:w="100"/><text x="54.5619%" y="207.50"></text></g><g><title>gj`__rdl_alloc (88 samples, 0.15%)</title><rect x="54.4813%" y="197" width="0.1490%" height="15" fill="rgb(231,124,27)" fg:x="32169" fg:w="88"/><text x="54.7313%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (19 samples, 0.03%)</title><rect x="54.6303%" y="117" width="0.0322%" height="15" fill="rgb(249,195,6)" fg:x="32257" fg:w="19"/><text x="54.8803%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (19 samples, 0.03%)</title><rect x="54.6303%" y="101" width="0.0322%" height="15" fill="rgb(237,174,47)" fg:x="32257" fg:w="19"/><text x="54.8803%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.02%)</title><rect x="54.6625%" y="117" width="0.0152%" height="15" fill="rgb(206,201,31)" fg:x="32276" fg:w="9"/><text x="54.9125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.02%)</title><rect x="54.6625%" y="101" width="0.0152%" height="15" fill="rgb(231,57,52)" fg:x="32276" fg:w="9"/><text x="54.9125%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.02%)</title><rect x="54.6625%" y="85" width="0.0152%" height="15" fill="rgb(248,177,22)" fg:x="32276" fg:w="9"/><text x="54.9125%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (34 samples, 0.06%)</title><rect x="54.6303%" y="133" width="0.0576%" height="15" fill="rgb(215,211,37)" fg:x="32257" fg:w="34"/><text x="54.8803%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (46 samples, 0.08%)</title><rect x="54.6303%" y="197" width="0.0779%" height="15" fill="rgb(241,128,51)" fg:x="32257" fg:w="46"/><text x="54.8803%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (46 samples, 0.08%)</title><rect x="54.6303%" y="181" width="0.0779%" height="15" fill="rgb(227,165,31)" fg:x="32257" fg:w="46"/><text x="54.8803%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (46 samples, 0.08%)</title><rect x="54.6303%" y="165" width="0.0779%" height="15" fill="rgb(228,167,24)" fg:x="32257" fg:w="46"/><text x="54.8803%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.08%)</title><rect x="54.6303%" y="149" width="0.0779%" height="15" fill="rgb(228,143,12)" fg:x="32257" fg:w="46"/><text x="54.8803%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.02%)</title><rect x="54.6879%" y="133" width="0.0203%" height="15" fill="rgb(249,149,8)" fg:x="32291" fg:w="12"/><text x="54.9379%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (351 samples, 0.59%)</title><rect x="54.7082%" y="197" width="0.5945%" height="15" fill="rgb(243,35,44)" fg:x="32303" fg:w="351"/><text x="54.9582%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (229 samples, 0.39%)</title><rect x="55.3026%" y="197" width="0.3878%" height="15" fill="rgb(246,89,9)" fg:x="32654" fg:w="229"/><text x="55.5526%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,346 samples, 3.97%)</title><rect x="56.8269%" y="181" width="3.9732%" height="15" fill="rgb(233,213,13)" fg:x="33554" fg:w="2346"/><text x="57.0769%" y="191.50">gj`&lt;..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4,008 samples, 6.79%)</title><rect x="55.6905%" y="197" width="6.7879%" height="15" fill="rgb(233,141,41)" fg:x="32883" fg:w="4008"/><text x="55.9405%" y="207.50">gj`hashbr..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (991 samples, 1.68%)</title><rect x="60.8001%" y="181" width="1.6784%" height="15" fill="rgb(239,167,4)" fg:x="35900" fg:w="991"/><text x="61.0501%" y="191.50"></text></g><g><title>gj`parquet::file::footer::decode_metadata (7 samples, 0.01%)</title><rect x="62.4784%" y="165" width="0.0119%" height="15" fill="rgb(209,217,16)" fg:x="36891" fg:w="7"/><text x="62.7284%" y="175.50"></text></g><g><title>gj`parquet_format::parquet_format::FileMetaData::read_from_in_protocol (6 samples, 0.01%)</title><rect x="62.4801%" y="149" width="0.0102%" height="15" fill="rgb(219,88,35)" fg:x="36892" fg:w="6"/><text x="62.7301%" y="159.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (8 samples, 0.01%)</title><rect x="62.4784%" y="197" width="0.0135%" height="15" fill="rgb(220,193,23)" fg:x="36891" fg:w="8"/><text x="62.7284%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (8 samples, 0.01%)</title><rect x="62.4784%" y="181" width="0.0135%" height="15" fill="rgb(230,90,52)" fg:x="36891" fg:w="8"/><text x="62.7284%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (184 samples, 0.31%)</title><rect x="63.7351%" y="181" width="0.3116%" height="15" fill="rgb(252,106,19)" fg:x="37633" fg:w="184"/><text x="63.9851%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (395 samples, 0.67%)</title><rect x="66.0112%" y="149" width="0.6690%" height="15" fill="rgb(206,74,20)" fg:x="38977" fg:w="395"/><text x="66.2612%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,220 samples, 2.07%)</title><rect x="64.6174%" y="165" width="2.0662%" height="15" fill="rgb(230,138,44)" fg:x="38154" fg:w="1220"/><text x="64.8674%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,604 samples, 4.41%)</title><rect x="62.4970%" y="197" width="4.4101%" height="15" fill="rgb(235,182,43)" fg:x="36902" fg:w="2604"/><text x="62.7470%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,689 samples, 2.86%)</title><rect x="64.0467%" y="181" width="2.8605%" height="15" fill="rgb(242,16,51)" fg:x="37817" fg:w="1689"/><text x="64.2967%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (132 samples, 0.22%)</title><rect x="66.6836%" y="165" width="0.2236%" height="15" fill="rgb(248,9,4)" fg:x="39374" fg:w="132"/><text x="66.9336%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (182 samples, 0.31%)</title><rect x="66.9072%" y="197" width="0.3082%" height="15" fill="rgb(210,31,22)" fg:x="39506" fg:w="182"/><text x="67.1572%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2,782 samples, 4.71%)</title><rect x="75.0330%" y="181" width="4.7116%" height="15" fill="rgb(239,54,39)" fg:x="44304" fg:w="2782"/><text x="75.2830%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (54 samples, 0.09%)</title><rect x="79.7446%" y="181" width="0.0915%" height="15" fill="rgb(230,99,41)" fg:x="47086" fg:w="54"/><text x="79.9946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7,939 samples, 13.45%)</title><rect x="67.2154%" y="197" width="13.4454%" height="15" fill="rgb(253,106,12)" fg:x="39688" fg:w="7939"/><text x="67.4654%" y="207.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`szone_size (487 samples, 0.82%)</title><rect x="79.8361%" y="181" width="0.8248%" height="15" fill="rgb(213,46,41)" fg:x="47140" fg:w="487"/><text x="80.0861%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (438 samples, 0.74%)</title><rect x="79.9190%" y="165" width="0.7418%" height="15" fill="rgb(215,133,35)" fg:x="47189" fg:w="438"/><text x="80.1690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (624 samples, 1.06%)</title><rect x="82.3612%" y="165" width="1.0568%" height="15" fill="rgb(213,28,5)" fg:x="48631" fg:w="624"/><text x="82.6112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,676 samples, 2.84%)</title><rect x="80.6608%" y="197" width="2.8385%" height="15" fill="rgb(215,77,49)" fg:x="47627" fg:w="1676"/><text x="80.9108%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,130 samples, 1.91%)</title><rect x="81.5855%" y="181" width="1.9138%" height="15" fill="rgb(248,100,22)" fg:x="48173" fg:w="1130"/><text x="81.8355%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (48 samples, 0.08%)</title><rect x="83.4180%" y="165" width="0.0813%" height="15" fill="rgb(208,67,9)" fg:x="49255" fg:w="48"/><text x="83.6680%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (446 samples, 0.76%)</title><rect x="83.5010%" y="197" width="0.7553%" height="15" fill="rgb(219,133,21)" fg:x="49304" fg:w="446"/><text x="83.7510%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,739 samples, 2.95%)</title><rect x="84.2563%" y="197" width="2.9452%" height="15" fill="rgb(246,46,29)" fg:x="49750" fg:w="1739"/><text x="84.5063%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.03%)</title><rect x="87.2015%" y="197" width="0.0254%" height="15" fill="rgb(246,185,52)" fg:x="51489" fg:w="15"/><text x="87.4515%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (701 samples, 1.19%)</title><rect x="87.2269%" y="197" width="1.1872%" height="15" fill="rgb(252,136,11)" fg:x="51504" fg:w="701"/><text x="87.4769%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (132 samples, 0.22%)</title><rect x="88.4141%" y="197" width="0.2236%" height="15" fill="rgb(219,138,53)" fg:x="52205" fg:w="132"/><text x="88.6641%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (100 samples, 0.17%)</title><rect x="88.6377%" y="197" width="0.1694%" height="15" fill="rgb(211,51,23)" fg:x="52337" fg:w="100"/><text x="88.8877%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (124 samples, 0.21%)</title><rect x="88.8070%" y="197" width="0.2100%" height="15" fill="rgb(247,221,28)" fg:x="52437" fg:w="124"/><text x="89.0570%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,755 samples, 2.97%)</title><rect x="89.0170%" y="197" width="2.9723%" height="15" fill="rgb(251,222,45)" fg:x="52561" fg:w="1755"/><text x="89.2670%" y="207.50">lib..</text></g><g><title>gj`gj::util::from_parquet (43,307 samples, 73.34%)</title><rect x="19.1732%" y="213" width="73.3445%" height="15" fill="rgb(217,162,53)" fg:x="11321" fg:w="43307"/><text x="19.4232%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (312 samples, 0.53%)</title><rect x="91.9893%" y="197" width="0.5284%" height="15" fill="rgb(229,93,14)" fg:x="54316" fg:w="312"/><text x="92.2393%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (462 samples, 0.78%)</title><rect x="92.5177%" y="213" width="0.7824%" height="15" fill="rgb(209,67,49)" fg:x="54628" fg:w="462"/><text x="92.7677%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (53 samples, 0.09%)</title><rect x="93.3001%" y="213" width="0.0898%" height="15" fill="rgb(213,87,29)" fg:x="55090" fg:w="53"/><text x="93.5501%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (126 samples, 0.21%)</title><rect x="93.3899%" y="213" width="0.2134%" height="15" fill="rgb(205,151,52)" fg:x="55143" fg:w="126"/><text x="93.6399%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (762 samples, 1.29%)</title><rect x="93.6033%" y="213" width="1.2905%" height="15" fill="rgb(253,215,39)" fg:x="55269" fg:w="762"/><text x="93.8533%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1,120 samples, 1.90%)</title><rect x="94.8938%" y="213" width="1.8968%" height="15" fill="rgb(221,220,41)" fg:x="56031" fg:w="1120"/><text x="95.1438%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.07%)</title><rect x="96.7906%" y="213" width="0.0728%" height="15" fill="rgb(218,133,21)" fg:x="57151" fg:w="43"/><text x="97.0406%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (667 samples, 1.13%)</title><rect x="96.8652%" y="213" width="1.1296%" height="15" fill="rgb(221,193,43)" fg:x="57195" fg:w="667"/><text x="97.1152%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (544 samples, 0.92%)</title><rect x="97.9948%" y="213" width="0.9213%" height="15" fill="rgb(240,128,52)" fg:x="57862" fg:w="544"/><text x="98.2448%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (52 samples, 0.09%)</title><rect x="98.9161%" y="213" width="0.0881%" height="15" fill="rgb(253,114,12)" fg:x="58406" fg:w="52"/><text x="99.1661%" y="223.50"></text></g><g><title>gj`gj::util::load_db (48,441 samples, 82.04%)</title><rect x="17.4220%" y="229" width="82.0394%" height="15" fill="rgb(215,223,47)" fg:x="10287" fg:w="48441"/><text x="17.6720%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (270 samples, 0.46%)</title><rect x="99.0042%" y="213" width="0.4573%" height="15" fill="rgb(248,225,23)" fg:x="58458" fg:w="270"/><text x="99.2542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 0.06%)</title><rect x="99.4614%" y="229" width="0.0610%" height="15" fill="rgb(250,108,0)" fg:x="58728" fg:w="36"/><text x="99.7114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.03%)</title><rect x="99.5224%" y="229" width="0.0288%" height="15" fill="rgb(228,208,7)" fg:x="58764" fg:w="17"/><text x="99.7724%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.05%)</title><rect x="99.5512%" y="229" width="0.0525%" height="15" fill="rgb(244,45,10)" fg:x="58781" fg:w="31"/><text x="99.8012%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="99.6054%" y="229" width="0.0339%" height="15" fill="rgb(207,125,25)" fg:x="58813" fg:w="20"/><text x="99.8554%" y="239.50"></text></g><g><title>gj`gj::main (58,854 samples, 99.67%)</title><rect x="0.0017%" y="245" width="99.6748%" height="15" fill="rgb(210,195,18)" fg:x="1" fg:w="58854"/><text x="0.2517%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (22 samples, 0.04%)</title><rect x="99.6393%" y="229" width="0.0373%" height="15" fill="rgb(249,80,12)" fg:x="58833" fg:w="22"/><text x="99.8893%" y="239.50"></text></g><g><title>gj`std::rt::lang_start_internal (58,864 samples, 99.69%)</title><rect x="0.0000%" y="293" width="99.6918%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="58864"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (58,864 samples, 99.69%)</title><rect x="0.0000%" y="277" width="99.6918%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="58864"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (58,864 samples, 99.69%)</title><rect x="0.0000%" y="261" width="99.6918%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="58864"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.02%)</title><rect x="99.6765%" y="245" width="0.0152%" height="15" fill="rgb(215,141,46)" fg:x="58855" fg:w="9"/><text x="99.9265%" y="255.50"></text></g><g><title>gj`main (58,865 samples, 99.69%)</title><rect x="0.0000%" y="309" width="99.6935%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="58865"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>dyld`start (58,866 samples, 99.70%)</title><rect x="0.0000%" y="325" width="99.6952%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="58866"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (167 samples, 0.28%)</title><rect x="99.6952%" y="325" width="0.2828%" height="15" fill="rgb(234,217,39)" fg:x="58866" fg:w="167"/><text x="99.9452%" y="335.50"></text></g><g><title>all (59,046 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(207,178,40)" fg:x="0" fg:w="59046"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.02%)</title><rect x="99.9780%" y="325" width="0.0220%" height="15" fill="rgb(221,136,13)" fg:x="59033" fg:w="13"/><text x="100.2280%" y="335.50"></text></g></svg></svg>