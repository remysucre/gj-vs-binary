<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="21449"><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="0.0233%" y="229" width="0.0280%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="6"/><text x="0.2733%" y="239.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.34%)</title><rect x="0.1958%" y="213" width="0.3403%" height="15" fill="rgb(217,0,24)" fg:x="42" fg:w="73"/><text x="0.4458%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="1.3660%" y="197" width="0.0140%" height="15" fill="rgb(221,193,54)" fg:x="293" fg:w="3"/><text x="1.6160%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.07%)</title><rect x="1.3800%" y="197" width="0.0699%" height="15" fill="rgb(248,212,6)" fg:x="296" fg:w="15"/><text x="1.6300%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="1.4173%" y="181" width="0.0326%" height="15" fill="rgb(208,68,35)" fg:x="304" fg:w="7"/><text x="1.6673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (25 samples, 0.12%)</title><rect x="1.4500%" y="197" width="0.1166%" height="15" fill="rgb(232,128,0)" fg:x="311" fg:w="25"/><text x="1.7000%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (25 samples, 0.12%)</title><rect x="1.4500%" y="181" width="0.1166%" height="15" fill="rgb(207,160,47)" fg:x="311" fg:w="25"/><text x="1.7000%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (25 samples, 0.12%)</title><rect x="1.4500%" y="165" width="0.1166%" height="15" fill="rgb(228,23,34)" fg:x="311" fg:w="25"/><text x="1.7000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (7 samples, 0.03%)</title><rect x="1.5665%" y="197" width="0.0326%" height="15" fill="rgb(218,30,26)" fg:x="336" fg:w="7"/><text x="1.8165%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (227 samples, 1.06%)</title><rect x="0.5455%" y="213" width="1.0583%" height="15" fill="rgb(220,122,19)" fg:x="117" fg:w="227"/><text x="0.7955%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.03%)</title><rect x="1.6038%" y="197" width="0.0280%" height="15" fill="rgb(250,228,42)" fg:x="344" fg:w="6"/><text x="1.8538%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (27 samples, 0.13%)</title><rect x="1.6038%" y="213" width="0.1259%" height="15" fill="rgb(240,193,28)" fg:x="344" fg:w="27"/><text x="1.8538%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (21 samples, 0.10%)</title><rect x="1.6318%" y="197" width="0.0979%" height="15" fill="rgb(216,20,37)" fg:x="350" fg:w="21"/><text x="1.8818%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (21 samples, 0.10%)</title><rect x="1.6318%" y="181" width="0.0979%" height="15" fill="rgb(206,188,39)" fg:x="350" fg:w="21"/><text x="1.8818%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.10%)</title><rect x="1.6318%" y="165" width="0.0979%" height="15" fill="rgb(217,207,13)" fg:x="350" fg:w="21"/><text x="1.8818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.09%)</title><rect x="2.1493%" y="197" width="0.0932%" height="15" fill="rgb(231,73,38)" fg:x="461" fg:w="20"/><text x="2.3993%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (113 samples, 0.53%)</title><rect x="1.7343%" y="213" width="0.5268%" height="15" fill="rgb(225,20,46)" fg:x="372" fg:w="113"/><text x="1.9843%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="2.2472%" y="197" width="0.0140%" height="15" fill="rgb(210,31,41)" fg:x="482" fg:w="3"/><text x="2.4972%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.01%)</title><rect x="2.2472%" y="181" width="0.0140%" height="15" fill="rgb(221,200,47)" fg:x="482" fg:w="3"/><text x="2.4972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.02%)</title><rect x="2.2612%" y="213" width="0.0233%" height="15" fill="rgb(226,26,5)" fg:x="485" fg:w="5"/><text x="2.5112%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="2.3125%" y="181" width="0.0140%" height="15" fill="rgb(249,33,26)" fg:x="496" fg:w="3"/><text x="2.5625%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.07%)</title><rect x="2.2845%" y="213" width="0.0746%" height="15" fill="rgb(235,183,28)" fg:x="490" fg:w="16"/><text x="2.5345%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.07%)</title><rect x="2.2845%" y="197" width="0.0746%" height="15" fill="rgb(221,5,38)" fg:x="490" fg:w="16"/><text x="2.5345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (3 samples, 0.01%)</title><rect x="2.3451%" y="181" width="0.0140%" height="15" fill="rgb(247,18,42)" fg:x="503" fg:w="3"/><text x="2.5951%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="2.3451%" y="165" width="0.0140%" height="15" fill="rgb(241,131,45)" fg:x="503" fg:w="3"/><text x="2.5951%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.03%)</title><rect x="2.3591%" y="213" width="0.0280%" height="15" fill="rgb(249,31,29)" fg:x="506" fg:w="6"/><text x="2.6091%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (64 samples, 0.30%)</title><rect x="2.3871%" y="213" width="0.2984%" height="15" fill="rgb(225,111,53)" fg:x="512" fg:w="64"/><text x="2.6371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (36 samples, 0.17%)</title><rect x="2.5176%" y="197" width="0.1678%" height="15" fill="rgb(238,160,17)" fg:x="540" fg:w="36"/><text x="2.7676%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.17%)</title><rect x="2.5176%" y="181" width="0.1678%" height="15" fill="rgb(214,148,48)" fg:x="540" fg:w="36"/><text x="2.7676%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (572 samples, 2.67%)</title><rect x="0.0513%" y="229" width="2.6668%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="572"/><text x="0.3013%" y="239.50">gj..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.03%)</title><rect x="2.6854%" y="213" width="0.0326%" height="15" fill="rgb(209,103,24)" fg:x="576" fg:w="7"/><text x="2.9354%" y="223.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (29 samples, 0.14%)</title><rect x="2.7181%" y="229" width="0.1352%" height="15" fill="rgb(229,88,8)" fg:x="583" fg:w="29"/><text x="2.9681%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (15 samples, 0.07%)</title><rect x="2.8533%" y="229" width="0.0699%" height="15" fill="rgb(213,181,19)" fg:x="612" fg:w="15"/><text x="3.1033%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (62 samples, 0.29%)</title><rect x="2.9232%" y="229" width="0.2891%" height="15" fill="rgb(254,191,54)" fg:x="627" fg:w="62"/><text x="3.1732%" y="239.50"></text></g><g><title>gj`__rdl_alloc (7 samples, 0.03%)</title><rect x="3.2123%" y="229" width="0.0326%" height="15" fill="rgb(241,83,37)" fg:x="689" fg:w="7"/><text x="3.4623%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (430 samples, 2.00%)</title><rect x="3.6738%" y="213" width="2.0048%" height="15" fill="rgb(233,36,39)" fg:x="788" fg:w="430"/><text x="3.9238%" y="223.50">g..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (43 samples, 0.20%)</title><rect x="5.4781%" y="197" width="0.2005%" height="15" fill="rgb(226,3,54)" fg:x="1175" fg:w="43"/><text x="5.7281%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (6 samples, 0.03%)</title><rect x="5.6786%" y="213" width="0.0280%" height="15" fill="rgb(245,192,40)" fg:x="1218" fg:w="6"/><text x="5.9286%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,158 samples, 5.40%)</title><rect x="7.6181%" y="181" width="5.3989%" height="15" fill="rgb(238,167,29)" fg:x="1634" fg:w="1158"/><text x="7.8681%" y="191.50">gj`&lt;cor..</text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,320 samples, 6.15%)</title><rect x="6.9654%" y="197" width="6.1541%" height="15" fill="rgb(232,182,51)" fg:x="1494" fg:w="1320"/><text x="7.2154%" y="207.50">gj`&lt;smal..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (22 samples, 0.10%)</title><rect x="13.0169%" y="181" width="0.1026%" height="15" fill="rgb(231,60,39)" fg:x="2792" fg:w="22"/><text x="13.2669%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (82 samples, 0.38%)</title><rect x="13.7722%" y="165" width="0.3823%" height="15" fill="rgb(208,69,12)" fg:x="2954" fg:w="82"/><text x="14.0222%" y="175.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (125 samples, 0.58%)</title><rect x="13.6137%" y="181" width="0.5828%" height="15" fill="rgb(235,93,37)" fg:x="2920" fg:w="125"/><text x="13.8637%" y="191.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (9 samples, 0.04%)</title><rect x="14.1545%" y="165" width="0.0420%" height="15" fill="rgb(213,116,39)" fg:x="3036" fg:w="9"/><text x="14.4045%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.02%)</title><rect x="14.2850%" y="85" width="0.0186%" height="15" fill="rgb(222,207,29)" fg:x="3064" fg:w="4"/><text x="14.5350%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.07%)</title><rect x="14.2478%" y="101" width="0.0653%" height="15" fill="rgb(206,96,30)" fg:x="3056" fg:w="14"/><text x="14.4978%" y="111.50"></text></g><g><title>gj`gj::join::materialize (26 samples, 0.12%)</title><rect x="14.1965%" y="181" width="0.1212%" height="15" fill="rgb(218,138,4)" fg:x="3045" fg:w="26"/><text x="14.4465%" y="191.50"></text></g><g><title>gj`gj::join::materialize (23 samples, 0.11%)</title><rect x="14.2105%" y="165" width="0.1072%" height="15" fill="rgb(250,191,14)" fg:x="3048" fg:w="23"/><text x="14.4605%" y="175.50"></text></g><g><title>gj`gj::join::materialize (17 samples, 0.08%)</title><rect x="14.2384%" y="149" width="0.0793%" height="15" fill="rgb(239,60,40)" fg:x="3054" fg:w="17"/><text x="14.4884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.07%)</title><rect x="14.2431%" y="133" width="0.0746%" height="15" fill="rgb(206,27,48)" fg:x="3055" fg:w="16"/><text x="14.4931%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.07%)</title><rect x="14.2431%" y="117" width="0.0746%" height="15" fill="rgb(225,35,8)" fg:x="3055" fg:w="16"/><text x="14.4931%" y="127.50"></text></g><g><title>gj`gj::join::singleton_join_inner (3 samples, 0.01%)</title><rect x="14.3177%" y="181" width="0.0140%" height="15" fill="rgb(250,213,24)" fg:x="3071" fg:w="3"/><text x="14.5677%" y="191.50"></text></g><g><title>gj`gj::join::materialize (3 samples, 0.01%)</title><rect x="14.3177%" y="165" width="0.0140%" height="15" fill="rgb(247,123,22)" fg:x="3071" fg:w="3"/><text x="14.5677%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (263 samples, 1.23%)</title><rect x="13.1195%" y="197" width="1.2262%" height="15" fill="rgb(231,138,38)" fg:x="2814" fg:w="263"/><text x="13.3695%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (3 samples, 0.01%)</title><rect x="14.3317%" y="181" width="0.0140%" height="15" fill="rgb(231,145,46)" fg:x="3074" fg:w="3"/><text x="14.5817%" y="191.50"></text></g><g><title>gj`gj::join::singleton_join_inner (1,868 samples, 8.71%)</title><rect x="5.7066%" y="213" width="8.7090%" height="15" fill="rgb(251,118,11)" fg:x="1224" fg:w="1868"/><text x="5.9566%" y="223.50">gj`gj::join:..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (15 samples, 0.07%)</title><rect x="14.3457%" y="197" width="0.0699%" height="15" fill="rgb(217,147,25)" fg:x="3077" fg:w="15"/><text x="14.5957%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (24 samples, 0.11%)</title><rect x="14.4156%" y="213" width="0.1119%" height="15" fill="rgb(247,81,37)" fg:x="3092" fg:w="24"/><text x="14.6656%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (2,449 samples, 11.42%)</title><rect x="3.2449%" y="229" width="11.4178%" height="15" fill="rgb(209,12,38)" fg:x="696" fg:w="2449"/><text x="3.4949%" y="239.50">gj`gj::join::bush..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (29 samples, 0.14%)</title><rect x="14.5275%" y="213" width="0.1352%" height="15" fill="rgb(227,1,9)" fg:x="3116" fg:w="29"/><text x="14.7775%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (44 samples, 0.21%)</title><rect x="14.6627%" y="229" width="0.2051%" height="15" fill="rgb(248,47,43)" fg:x="3145" fg:w="44"/><text x="14.9127%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (10 samples, 0.05%)</title><rect x="14.8678%" y="229" width="0.0466%" height="15" fill="rgb(221,10,30)" fg:x="3189" fg:w="10"/><text x="15.1178%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.05%)</title><rect x="15.3667%" y="213" width="0.0466%" height="15" fill="rgb(210,229,1)" fg:x="3296" fg:w="10"/><text x="15.6167%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.10%)</title><rect x="16.2572%" y="133" width="0.0979%" height="15" fill="rgb(222,148,37)" fg:x="3487" fg:w="21"/><text x="16.5072%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="16.3411%" y="117" width="0.0140%" height="15" fill="rgb(234,67,33)" fg:x="3505" fg:w="3"/><text x="16.5911%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.14%)</title><rect x="16.2292%" y="165" width="0.1399%" height="15" fill="rgb(247,98,35)" fg:x="3481" fg:w="30"/><text x="16.4792%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.12%)</title><rect x="16.2478%" y="149" width="0.1212%" height="15" fill="rgb(247,138,52)" fg:x="3485" fg:w="26"/><text x="16.4978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="16.3551%" y="133" width="0.0140%" height="15" fill="rgb(213,79,30)" fg:x="3508" fg:w="3"/><text x="16.6051%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (35 samples, 0.16%)</title><rect x="16.2152%" y="197" width="0.1632%" height="15" fill="rgb(246,177,23)" fg:x="3478" fg:w="35"/><text x="16.4652%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (32 samples, 0.15%)</title><rect x="16.2292%" y="181" width="0.1492%" height="15" fill="rgb(230,62,27)" fg:x="3481" fg:w="32"/><text x="16.4792%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (40 samples, 0.19%)</title><rect x="17.1943%" y="165" width="0.1865%" height="15" fill="rgb(216,154,8)" fg:x="3688" fg:w="40"/><text x="17.4443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (37 samples, 0.17%)</title><rect x="17.2083%" y="149" width="0.1725%" height="15" fill="rgb(244,35,45)" fg:x="3691" fg:w="37"/><text x="17.4583%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.07%)</title><rect x="17.3108%" y="133" width="0.0699%" height="15" fill="rgb(251,115,12)" fg:x="3713" fg:w="15"/><text x="17.5608%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.21%)</title><rect x="17.1896%" y="181" width="0.2145%" height="15" fill="rgb(240,54,50)" fg:x="3687" fg:w="46"/><text x="17.4396%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="17.3808%" y="165" width="0.0233%" height="15" fill="rgb(233,84,52)" fg:x="3728" fg:w="5"/><text x="17.6308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="17.3854%" y="149" width="0.0186%" height="15" fill="rgb(207,117,47)" fg:x="3729" fg:w="4"/><text x="17.6354%" y="159.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (221 samples, 1.03%)</title><rect x="16.3830%" y="197" width="1.0304%" height="15" fill="rgb(249,43,39)" fg:x="3514" fg:w="221"/><text x="16.6330%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="17.4134%" y="197" width="0.0233%" height="15" fill="rgb(209,38,44)" fg:x="3735" fg:w="5"/><text x="17.6634%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="17.4367%" y="197" width="0.0140%" height="15" fill="rgb(236,212,23)" fg:x="3740" fg:w="3"/><text x="17.6867%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.01%)</title><rect x="17.4507%" y="197" width="0.0140%" height="15" fill="rgb(242,79,21)" fg:x="3743" fg:w="3"/><text x="17.7007%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.01%)</title><rect x="17.4507%" y="181" width="0.0140%" height="15" fill="rgb(211,96,35)" fg:x="3743" fg:w="3"/><text x="17.7007%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.01%)</title><rect x="17.4507%" y="165" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="3743" fg:w="3"/><text x="17.7007%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (453 samples, 2.11%)</title><rect x="15.4180%" y="213" width="2.1120%" height="15" fill="rgb(211,81,21)" fg:x="3307" fg:w="453"/><text x="15.6680%" y="223.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.06%)</title><rect x="17.4740%" y="197" width="0.0559%" height="15" fill="rgb(208,190,38)" fg:x="3748" fg:w="12"/><text x="17.7240%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (78 samples, 0.36%)</title><rect x="17.5300%" y="213" width="0.3637%" height="15" fill="rgb(235,213,38)" fg:x="3760" fg:w="78"/><text x="17.7800%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="18.0568%" y="197" width="0.0233%" height="15" fill="rgb(237,122,38)" fg:x="3873" fg:w="5"/><text x="18.3068%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.15%)</title><rect x="18.5463%" y="165" width="0.1539%" height="15" fill="rgb(244,218,35)" fg:x="3978" fg:w="33"/><text x="18.7963%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (130 samples, 0.61%)</title><rect x="18.1081%" y="181" width="0.6061%" height="15" fill="rgb(240,68,47)" fg:x="3884" fg:w="130"/><text x="18.3581%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="18.7002%" y="165" width="0.0140%" height="15" fill="rgb(210,16,53)" fg:x="4011" fg:w="3"/><text x="18.9502%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (182 samples, 0.85%)</title><rect x="17.9029%" y="213" width="0.8485%" height="15" fill="rgb(235,124,12)" fg:x="3840" fg:w="182"/><text x="18.1529%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (144 samples, 0.67%)</title><rect x="18.0801%" y="197" width="0.6714%" height="15" fill="rgb(224,169,11)" fg:x="3878" fg:w="144"/><text x="18.3301%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.04%)</title><rect x="18.7142%" y="181" width="0.0373%" height="15" fill="rgb(250,166,2)" fg:x="4014" fg:w="8"/><text x="18.9642%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.05%)</title><rect x="18.7515%" y="213" width="0.0466%" height="15" fill="rgb(242,216,29)" fg:x="4022" fg:w="10"/><text x="19.0015%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (59 samples, 0.28%)</title><rect x="18.7981%" y="213" width="0.2751%" height="15" fill="rgb(230,116,27)" fg:x="4032" fg:w="59"/><text x="19.0481%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (25 samples, 0.12%)</title><rect x="18.9566%" y="197" width="0.1166%" height="15" fill="rgb(228,99,48)" fg:x="4066" fg:w="25"/><text x="19.2066%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="19.0732%" y="213" width="0.0140%" height="15" fill="rgb(253,11,6)" fg:x="4091" fg:w="3"/><text x="19.3232%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (239 samples, 1.11%)</title><rect x="19.0871%" y="213" width="1.1143%" height="15" fill="rgb(247,143,39)" fg:x="4094" fg:w="239"/><text x="19.3371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="20.2014%" y="213" width="0.0186%" height="15" fill="rgb(236,97,10)" fg:x="4333" fg:w="4"/><text x="20.4514%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (1,144 samples, 5.33%)</title><rect x="14.9144%" y="229" width="5.3336%" height="15" fill="rgb(233,208,19)" fg:x="3199" fg:w="1144"/><text x="15.1644%" y="239.50">gj`gj::..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.03%)</title><rect x="20.2201%" y="213" width="0.0280%" height="15" fill="rgb(216,164,2)" fg:x="4337" fg:w="6"/><text x="20.4701%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (457 samples, 2.13%)</title><rect x="20.2480%" y="229" width="2.1306%" height="15" fill="rgb(220,129,5)" fg:x="4343" fg:w="457"/><text x="20.4980%" y="239.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (457 samples, 2.13%)</title><rect x="20.2480%" y="213" width="2.1306%" height="15" fill="rgb(242,17,10)" fg:x="4343" fg:w="457"/><text x="20.4980%" y="223.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (457 samples, 2.13%)</title><rect x="20.2480%" y="197" width="2.1306%" height="15" fill="rgb(242,107,0)" fg:x="4343" fg:w="457"/><text x="20.4980%" y="207.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (457 samples, 2.13%)</title><rect x="20.2480%" y="181" width="2.1306%" height="15" fill="rgb(251,28,31)" fg:x="4343" fg:w="457"/><text x="20.4980%" y="191.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (457 samples, 2.13%)</title><rect x="20.2480%" y="165" width="2.1306%" height="15" fill="rgb(233,223,10)" fg:x="4343" fg:w="457"/><text x="20.4980%" y="175.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.09%)</title><rect x="22.3787%" y="213" width="0.0932%" height="15" fill="rgb(215,21,27)" fg:x="4800" fg:w="20"/><text x="22.6287%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.07%)</title><rect x="22.4719%" y="213" width="0.0699%" height="15" fill="rgb(232,23,21)" fg:x="4820" fg:w="15"/><text x="22.7219%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (181 samples, 0.84%)</title><rect x="22.5418%" y="213" width="0.8439%" height="15" fill="rgb(244,5,23)" fg:x="4835" fg:w="181"/><text x="22.7918%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (34 samples, 0.16%)</title><rect x="23.3857%" y="213" width="0.1585%" height="15" fill="rgb(226,81,46)" fg:x="5016" fg:w="34"/><text x="23.6357%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (37 samples, 0.17%)</title><rect x="23.5442%" y="213" width="0.1725%" height="15" fill="rgb(247,70,30)" fg:x="5050" fg:w="37"/><text x="23.7942%" y="223.50"></text></g><g><title>gj`__rdl_alloc (44 samples, 0.21%)</title><rect x="23.7167%" y="213" width="0.2051%" height="15" fill="rgb(212,68,19)" fg:x="5087" fg:w="44"/><text x="23.9667%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (29 samples, 0.14%)</title><rect x="23.9219%" y="213" width="0.1352%" height="15" fill="rgb(240,187,13)" fg:x="5131" fg:w="29"/><text x="24.1719%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.11%)</title><rect x="28.9990%" y="165" width="0.1072%" height="15" fill="rgb(223,113,26)" fg:x="6220" fg:w="23"/><text x="29.2490%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (132 samples, 0.62%)</title><rect x="31.2509%" y="133" width="0.6154%" height="15" fill="rgb(206,192,2)" fg:x="6703" fg:w="132"/><text x="31.5009%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (471 samples, 2.20%)</title><rect x="29.6844%" y="149" width="2.1959%" height="15" fill="rgb(241,108,4)" fg:x="6367" fg:w="471"/><text x="29.9344%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="31.8663%" y="133" width="0.0140%" height="15" fill="rgb(247,173,49)" fg:x="6835" fg:w="3"/><text x="32.1163%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (855 samples, 3.99%)</title><rect x="28.0852%" y="181" width="3.9862%" height="15" fill="rgb(224,114,35)" fg:x="6024" fg:w="855"/><text x="28.3352%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (636 samples, 2.97%)</title><rect x="29.1063%" y="165" width="2.9652%" height="15" fill="rgb(245,159,27)" fg:x="6243" fg:w="636"/><text x="29.3563%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.19%)</title><rect x="31.8803%" y="149" width="0.1912%" height="15" fill="rgb(245,172,44)" fg:x="6838" fg:w="41"/><text x="32.1303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (53 samples, 0.25%)</title><rect x="32.0714%" y="181" width="0.2471%" height="15" fill="rgb(236,23,11)" fg:x="6879" fg:w="53"/><text x="32.3214%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (974 samples, 4.54%)</title><rect x="27.7822%" y="197" width="4.5410%" height="15" fill="rgb(205,117,38)" fg:x="5959" fg:w="974"/><text x="28.0322%" y="207.50">gj`&lt;a..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (284 samples, 1.32%)</title><rect x="32.3232%" y="197" width="1.3241%" height="15" fill="rgb(237,72,25)" fg:x="6933" fg:w="284"/><text x="32.5732%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (743 samples, 3.46%)</title><rect x="33.6473%" y="197" width="3.4640%" height="15" fill="rgb(244,70,9)" fg:x="7217" fg:w="743"/><text x="33.8973%" y="207.50">gj`..</text></g><g><title>gj`DYLD-STUB$$malloc (13 samples, 0.06%)</title><rect x="39.0135%" y="149" width="0.0606%" height="15" fill="rgb(217,125,39)" fg:x="8368" fg:w="13"/><text x="39.2635%" y="159.50"></text></g><g><title>gj`__rdl_alloc (18 samples, 0.08%)</title><rect x="39.0741%" y="149" width="0.0839%" height="15" fill="rgb(235,36,10)" fg:x="8381" fg:w="18"/><text x="39.3241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.12%)</title><rect x="39.8014%" y="117" width="0.1212%" height="15" fill="rgb(251,123,47)" fg:x="8537" fg:w="26"/><text x="40.0514%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.07%)</title><rect x="40.1184%" y="101" width="0.0746%" height="15" fill="rgb(221,13,13)" fg:x="8605" fg:w="16"/><text x="40.3684%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (106 samples, 0.49%)</title><rect x="41.0649%" y="85" width="0.4942%" height="15" fill="rgb(238,131,9)" fg:x="8808" fg:w="106"/><text x="41.3149%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (567 samples, 2.64%)</title><rect x="39.9226%" y="117" width="2.6435%" height="15" fill="rgb(211,50,8)" fg:x="8563" fg:w="567"/><text x="40.1726%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (509 samples, 2.37%)</title><rect x="40.1930%" y="101" width="2.3731%" height="15" fill="rgb(245,182,24)" fg:x="8621" fg:w="509"/><text x="40.4430%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (216 samples, 1.01%)</title><rect x="41.5590%" y="85" width="1.0070%" height="15" fill="rgb(242,14,37)" fg:x="8914" fg:w="216"/><text x="41.8090%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (53 samples, 0.25%)</title><rect x="42.3190%" y="69" width="0.2471%" height="15" fill="rgb(246,228,12)" fg:x="9077" fg:w="53"/><text x="42.5690%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (735 samples, 3.43%)</title><rect x="39.3258%" y="133" width="3.4267%" height="15" fill="rgb(213,55,15)" fg:x="8435" fg:w="735"/><text x="39.5758%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 0.19%)</title><rect x="42.5661%" y="117" width="0.1865%" height="15" fill="rgb(209,9,3)" fg:x="9130" fg:w="40"/><text x="42.8161%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (41 samples, 0.19%)</title><rect x="42.7526%" y="133" width="0.1912%" height="15" fill="rgb(230,59,30)" fg:x="9170" fg:w="41"/><text x="43.0026%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.12%)</title><rect x="42.9437%" y="133" width="0.1166%" height="15" fill="rgb(209,121,21)" fg:x="9211" fg:w="25"/><text x="43.1937%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (855 samples, 3.99%)</title><rect x="39.1580%" y="149" width="3.9862%" height="15" fill="rgb(220,109,13)" fg:x="8399" fg:w="855"/><text x="39.4080%" y="159.50">gj`a..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.08%)</title><rect x="43.0603%" y="133" width="0.0839%" height="15" fill="rgb(232,18,1)" fg:x="9236" fg:w="18"/><text x="43.3103%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (934 samples, 4.35%)</title><rect x="38.8177%" y="165" width="4.3545%" height="15" fill="rgb(215,41,42)" fg:x="8326" fg:w="934"/><text x="39.0677%" y="175.50">gj`al..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="43.1442%" y="149" width="0.0280%" height="15" fill="rgb(224,123,36)" fg:x="9254" fg:w="6"/><text x="43.3942%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (37 samples, 0.17%)</title><rect x="43.1722%" y="165" width="0.1725%" height="15" fill="rgb(240,125,3)" fg:x="9260" fg:w="37"/><text x="43.4222%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (175 samples, 0.82%)</title><rect x="43.3447%" y="165" width="0.8159%" height="15" fill="rgb(205,98,50)" fg:x="9297" fg:w="175"/><text x="43.5947%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (181 samples, 0.84%)</title><rect x="44.9578%" y="149" width="0.8439%" height="15" fill="rgb(205,185,37)" fg:x="9643" fg:w="181"/><text x="45.2078%" y="159.50"></text></g><g><title>gj`bytes::bytes::shared_drop (4 samples, 0.02%)</title><rect x="47.0138%" y="133" width="0.0186%" height="15" fill="rgb(238,207,15)" fg:x="10084" fg:w="4"/><text x="47.2638%" y="143.50"></text></g><g><title>gj`core::str::converts::from_utf8 (11 samples, 0.05%)</title><rect x="47.0325%" y="133" width="0.0513%" height="15" fill="rgb(213,199,42)" fg:x="10088" fg:w="11"/><text x="47.2825%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="47.1397%" y="69" width="0.0140%" height="15" fill="rgb(235,201,11)" fg:x="10111" fg:w="3"/><text x="47.3897%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (9 samples, 0.04%)</title><rect x="47.1211%" y="85" width="0.0420%" height="15" fill="rgb(207,46,11)" fg:x="10107" fg:w="9"/><text x="47.3711%" y="95.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (18 samples, 0.08%)</title><rect x="47.0838%" y="133" width="0.0839%" height="15" fill="rgb(241,35,35)" fg:x="10099" fg:w="18"/><text x="47.3338%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.08%)</title><rect x="47.0884%" y="117" width="0.0793%" height="15" fill="rgb(243,32,47)" fg:x="10100" fg:w="17"/><text x="47.3384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.06%)</title><rect x="47.1071%" y="101" width="0.0606%" height="15" fill="rgb(247,202,23)" fg:x="10104" fg:w="13"/><text x="47.3571%" y="111.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (309 samples, 1.44%)</title><rect x="45.8017%" y="149" width="1.4406%" height="15" fill="rgb(219,102,11)" fg:x="9824" fg:w="309"/><text x="46.0517%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.07%)</title><rect x="47.1724%" y="133" width="0.0699%" height="15" fill="rgb(243,110,44)" fg:x="10118" fg:w="15"/><text x="47.4224%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (27 samples, 0.13%)</title><rect x="47.4894%" y="101" width="0.1259%" height="15" fill="rgb(222,74,54)" fg:x="10186" fg:w="27"/><text x="47.7394%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (13 samples, 0.06%)</title><rect x="47.5547%" y="85" width="0.0606%" height="15" fill="rgb(216,99,12)" fg:x="10200" fg:w="13"/><text x="47.8047%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (48 samples, 0.22%)</title><rect x="47.4055%" y="117" width="0.2238%" height="15" fill="rgb(226,22,26)" fg:x="10168" fg:w="48"/><text x="47.6555%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (3 samples, 0.01%)</title><rect x="47.6153%" y="101" width="0.0140%" height="15" fill="rgb(217,163,10)" fg:x="10213" fg:w="3"/><text x="47.8653%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (3 samples, 0.01%)</title><rect x="47.6293%" y="117" width="0.0140%" height="15" fill="rgb(213,25,53)" fg:x="10216" fg:w="3"/><text x="47.8793%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (66 samples, 0.31%)</title><rect x="47.4055%" y="133" width="0.3077%" height="15" fill="rgb(252,105,26)" fg:x="10168" fg:w="66"/><text x="47.6555%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.07%)</title><rect x="47.6432%" y="117" width="0.0699%" height="15" fill="rgb(220,39,43)" fg:x="10219" fg:w="15"/><text x="47.8932%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (768 samples, 3.58%)</title><rect x="44.1606%" y="165" width="3.5806%" height="15" fill="rgb(229,68,48)" fg:x="9472" fg:w="768"/><text x="44.4106%" y="175.50">gj`p..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (107 samples, 0.50%)</title><rect x="47.2423%" y="149" width="0.4989%" height="15" fill="rgb(252,8,32)" fg:x="10133" fg:w="107"/><text x="47.4923%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (6 samples, 0.03%)</title><rect x="47.7132%" y="133" width="0.0280%" height="15" fill="rgb(223,20,43)" fg:x="10234" fg:w="6"/><text x="47.9632%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (27 samples, 0.13%)</title><rect x="47.7412%" y="165" width="0.1259%" height="15" fill="rgb(229,81,49)" fg:x="10240" fg:w="27"/><text x="47.9912%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (60 samples, 0.28%)</title><rect x="47.8670%" y="165" width="0.2797%" height="15" fill="rgb(236,28,36)" fg:x="10267" fg:w="60"/><text x="48.1170%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (77 samples, 0.36%)</title><rect x="48.1468%" y="165" width="0.3590%" height="15" fill="rgb(249,185,26)" fg:x="10327" fg:w="77"/><text x="48.3968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (64 samples, 0.30%)</title><rect x="49.5314%" y="149" width="0.2984%" height="15" fill="rgb(249,174,33)" fg:x="10624" fg:w="64"/><text x="49.7814%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (430 samples, 2.00%)</title><rect x="50.4173%" y="133" width="2.0048%" height="15" fill="rgb(233,201,37)" fg:x="10814" fg:w="430"/><text x="50.6673%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (136 samples, 0.63%)</title><rect x="51.7880%" y="117" width="0.6341%" height="15" fill="rgb(221,78,26)" fg:x="11108" fg:w="136"/><text x="52.0380%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (885 samples, 4.13%)</title><rect x="48.5058%" y="165" width="4.1261%" height="15" fill="rgb(250,127,30)" fg:x="10404" fg:w="885"/><text x="48.7558%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (601 samples, 2.80%)</title><rect x="49.8298%" y="149" width="2.8020%" height="15" fill="rgb(230,49,44)" fg:x="10688" fg:w="601"/><text x="50.0798%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (45 samples, 0.21%)</title><rect x="52.4220%" y="133" width="0.2098%" height="15" fill="rgb(229,67,23)" fg:x="11244" fg:w="45"/><text x="52.6720%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (53 samples, 0.25%)</title><rect x="52.6318%" y="165" width="0.2471%" height="15" fill="rgb(249,83,47)" fg:x="11289" fg:w="53"/><text x="52.8818%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (3,342 samples, 15.58%)</title><rect x="37.3071%" y="181" width="15.5811%" height="15" fill="rgb(215,43,3)" fg:x="8002" fg:w="3342"/><text x="37.5571%" y="191.50">gj`&lt;parquet::record::rea..</text></g><g><title>gj`DYLD-STUB$$malloc (32 samples, 0.15%)</title><rect x="52.8882%" y="181" width="0.1492%" height="15" fill="rgb(238,154,13)" fg:x="11344" fg:w="32"/><text x="53.1382%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (28 samples, 0.13%)</title><rect x="53.0374%" y="181" width="0.1305%" height="15" fill="rgb(219,56,2)" fg:x="11376" fg:w="28"/><text x="53.2874%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (28 samples, 0.13%)</title><rect x="53.1680%" y="181" width="0.1305%" height="15" fill="rgb(233,0,4)" fg:x="11404" fg:w="28"/><text x="53.4180%" y="191.50"></text></g><g><title>gj`__rdl_alloc (42 samples, 0.20%)</title><rect x="53.2985%" y="181" width="0.1958%" height="15" fill="rgb(235,30,7)" fg:x="11432" fg:w="42"/><text x="53.5485%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.15%)</title><rect x="53.4943%" y="181" width="0.1492%" height="15" fill="rgb(250,79,13)" fg:x="11474" fg:w="32"/><text x="53.7443%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="53.6435%" y="133" width="0.0233%" height="15" fill="rgb(211,146,34)" fg:x="11506" fg:w="5"/><text x="53.8935%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (5 samples, 0.02%)</title><rect x="53.6435%" y="117" width="0.0233%" height="15" fill="rgb(228,22,38)" fg:x="11506" fg:w="5"/><text x="53.8935%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (5 samples, 0.02%)</title><rect x="53.6435%" y="101" width="0.0233%" height="15" fill="rgb(235,168,5)" fg:x="11506" fg:w="5"/><text x="53.8935%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.02%)</title><rect x="53.6435%" y="85" width="0.0233%" height="15" fill="rgb(221,155,16)" fg:x="11506" fg:w="5"/><text x="53.8935%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="53.6435%" y="69" width="0.0233%" height="15" fill="rgb(215,215,53)" fg:x="11506" fg:w="5"/><text x="53.8935%" y="79.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (7 samples, 0.03%)</title><rect x="53.6435%" y="149" width="0.0326%" height="15" fill="rgb(223,4,10)" fg:x="11506" fg:w="7"/><text x="53.8935%" y="159.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (8 samples, 0.04%)</title><rect x="53.6435%" y="181" width="0.0373%" height="15" fill="rgb(234,103,6)" fg:x="11506" fg:w="8"/><text x="53.8935%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (8 samples, 0.04%)</title><rect x="53.6435%" y="165" width="0.0373%" height="15" fill="rgb(227,97,0)" fg:x="11506" fg:w="8"/><text x="53.8935%" y="175.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (114 samples, 0.53%)</title><rect x="53.6948%" y="69" width="0.5315%" height="15" fill="rgb(234,150,53)" fg:x="11517" fg:w="114"/><text x="53.9448%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (128 samples, 0.60%)</title><rect x="53.6948%" y="85" width="0.5968%" height="15" fill="rgb(228,201,54)" fg:x="11517" fg:w="128"/><text x="53.9448%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.07%)</title><rect x="54.2263%" y="69" width="0.0653%" height="15" fill="rgb(222,22,37)" fg:x="11631" fg:w="14"/><text x="54.4763%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (136 samples, 0.63%)</title><rect x="53.6948%" y="101" width="0.6341%" height="15" fill="rgb(237,53,32)" fg:x="11517" fg:w="136"/><text x="53.9448%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.03%)</title><rect x="54.3009%" y="85" width="0.0280%" height="15" fill="rgb(233,25,53)" fg:x="11647" fg:w="6"/><text x="54.5509%" y="95.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (16 samples, 0.07%)</title><rect x="54.3289%" y="101" width="0.0746%" height="15" fill="rgb(210,40,34)" fg:x="11653" fg:w="16"/><text x="54.5789%" y="111.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (16 samples, 0.07%)</title><rect x="54.3289%" y="85" width="0.0746%" height="15" fill="rgb(241,220,44)" fg:x="11653" fg:w="16"/><text x="54.5789%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (16 samples, 0.07%)</title><rect x="54.3289%" y="69" width="0.0746%" height="15" fill="rgb(235,28,35)" fg:x="11653" fg:w="16"/><text x="54.5789%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.07%)</title><rect x="54.3289%" y="53" width="0.0746%" height="15" fill="rgb(210,56,17)" fg:x="11653" fg:w="16"/><text x="54.5789%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (16 samples, 0.07%)</title><rect x="54.3289%" y="37" width="0.0746%" height="15" fill="rgb(224,130,29)" fg:x="11653" fg:w="16"/><text x="54.5789%" y="47.50"></text></g><g><title>gj`std::io::default_read_buf (34 samples, 0.16%)</title><rect x="54.4035%" y="85" width="0.1585%" height="15" fill="rgb(235,212,8)" fg:x="11669" fg:w="34"/><text x="54.6535%" y="95.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (34 samples, 0.16%)</title><rect x="54.4035%" y="69" width="0.1585%" height="15" fill="rgb(223,33,50)" fg:x="11669" fg:w="34"/><text x="54.6535%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.16%)</title><rect x="54.4035%" y="53" width="0.1585%" height="15" fill="rgb(219,149,13)" fg:x="11669" fg:w="34"/><text x="54.6535%" y="63.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (192 samples, 0.90%)</title><rect x="53.6948%" y="117" width="0.8951%" height="15" fill="rgb(250,156,29)" fg:x="11517" fg:w="192"/><text x="53.9448%" y="127.50"></text></g><g><title>gj`std::io::Read::read_to_end (40 samples, 0.19%)</title><rect x="54.4035%" y="101" width="0.1865%" height="15" fill="rgb(216,193,19)" fg:x="11669" fg:w="40"/><text x="54.6535%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.03%)</title><rect x="54.5620%" y="85" width="0.0280%" height="15" fill="rgb(216,135,14)" fg:x="11703" fg:w="6"/><text x="54.8120%" y="95.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (197 samples, 0.92%)</title><rect x="53.6808%" y="181" width="0.9185%" height="15" fill="rgb(241,47,5)" fg:x="11514" fg:w="197"/><text x="53.9308%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (197 samples, 0.92%)</title><rect x="53.6808%" y="165" width="0.9185%" height="15" fill="rgb(233,42,35)" fg:x="11514" fg:w="197"/><text x="53.9308%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (197 samples, 0.92%)</title><rect x="53.6808%" y="149" width="0.9185%" height="15" fill="rgb(231,13,6)" fg:x="11514" fg:w="197"/><text x="53.9308%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (195 samples, 0.91%)</title><rect x="53.6901%" y="133" width="0.9091%" height="15" fill="rgb(207,181,40)" fg:x="11516" fg:w="195"/><text x="53.9401%" y="143.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (8 samples, 0.04%)</title><rect x="54.5993%" y="181" width="0.0373%" height="15" fill="rgb(254,173,49)" fg:x="11711" fg:w="8"/><text x="54.8493%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (60 samples, 0.28%)</title><rect x="54.6366%" y="181" width="0.2797%" height="15" fill="rgb(221,1,38)" fg:x="11719" fg:w="60"/><text x="54.8866%" y="191.50"></text></g><g><title>gj`parquet::file::reader::RowGroupReader::get_column_reader (3 samples, 0.01%)</title><rect x="54.9256%" y="149" width="0.0140%" height="15" fill="rgb(206,124,46)" fg:x="11781" fg:w="3"/><text x="55.1756%" y="159.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedRowGroupReader&lt;R&gt; as parquet::file::reader::RowGroupReader&gt;::get_column_page_reader (3 samples, 0.01%)</title><rect x="54.9256%" y="133" width="0.0140%" height="15" fill="rgb(249,21,11)" fg:x="11781" fg:w="3"/><text x="55.1756%" y="143.50"></text></g><g><title>gj`parquet::file::serialized_reader::_&lt;impl parquet::file::reader::ChunkReader for std::fs::File&gt;::get_read (3 samples, 0.01%)</title><rect x="54.9256%" y="117" width="0.0140%" height="15" fill="rgb(222,201,40)" fg:x="11781" fg:w="3"/><text x="55.1756%" y="127.50"></text></g><g><title>gj`parquet::util::io::FileSource&lt;R&gt;::new (3 samples, 0.01%)</title><rect x="54.9256%" y="101" width="0.0140%" height="15" fill="rgb(235,61,29)" fg:x="11781" fg:w="3"/><text x="55.1756%" y="111.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (6 samples, 0.03%)</title><rect x="54.9163%" y="181" width="0.0280%" height="15" fill="rgb(219,207,3)" fg:x="11779" fg:w="6"/><text x="55.1663%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::reader_tree (4 samples, 0.02%)</title><rect x="54.9256%" y="165" width="0.0186%" height="15" fill="rgb(222,56,46)" fg:x="11781" fg:w="4"/><text x="55.1756%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (60 samples, 0.28%)</title><rect x="54.9443%" y="181" width="0.2797%" height="15" fill="rgb(239,76,54)" fg:x="11785" fg:w="60"/><text x="55.1943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.04%)</title><rect x="55.2240%" y="181" width="0.0373%" height="15" fill="rgb(231,124,27)" fg:x="11845" fg:w="8"/><text x="55.4740%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (4,101 samples, 19.12%)</title><rect x="37.1113%" y="197" width="19.1198%" height="15" fill="rgb(249,195,6)" fg:x="7960" fg:w="4101"/><text x="37.3613%" y="207.50">gj`&lt;parquet::record::reader::R..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (208 samples, 0.97%)</title><rect x="55.2613%" y="181" width="0.9697%" height="15" fill="rgb(237,174,47)" fg:x="11853" fg:w="208"/><text x="55.5113%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (33 samples, 0.15%)</title><rect x="56.2311%" y="197" width="0.1539%" height="15" fill="rgb(206,201,31)" fg:x="12061" fg:w="33"/><text x="56.4811%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (83 samples, 0.39%)</title><rect x="56.3849%" y="197" width="0.3870%" height="15" fill="rgb(231,57,52)" fg:x="12094" fg:w="83"/><text x="56.6349%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (34 samples, 0.16%)</title><rect x="56.7719%" y="197" width="0.1585%" height="15" fill="rgb(248,177,22)" fg:x="12177" fg:w="34"/><text x="57.0219%" y="207.50"></text></g><g><title>gj`__rdl_alloc (32 samples, 0.15%)</title><rect x="56.9304%" y="197" width="0.1492%" height="15" fill="rgb(215,211,37)" fg:x="12211" fg:w="32"/><text x="57.1804%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (9 samples, 0.04%)</title><rect x="57.0796%" y="117" width="0.0420%" height="15" fill="rgb(241,128,51)" fg:x="12243" fg:w="9"/><text x="57.3296%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (9 samples, 0.04%)</title><rect x="57.0796%" y="101" width="0.0420%" height="15" fill="rgb(227,165,31)" fg:x="12243" fg:w="9"/><text x="57.3296%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.01%)</title><rect x="57.1215%" y="117" width="0.0140%" height="15" fill="rgb(228,167,24)" fg:x="12252" fg:w="3"/><text x="57.3715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.01%)</title><rect x="57.1215%" y="101" width="0.0140%" height="15" fill="rgb(228,143,12)" fg:x="12252" fg:w="3"/><text x="57.3715%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.01%)</title><rect x="57.1215%" y="85" width="0.0140%" height="15" fill="rgb(249,149,8)" fg:x="12252" fg:w="3"/><text x="57.3715%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.06%)</title><rect x="57.0796%" y="133" width="0.0606%" height="15" fill="rgb(243,35,44)" fg:x="12243" fg:w="13"/><text x="57.3296%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.08%)</title><rect x="57.0796%" y="197" width="0.0839%" height="15" fill="rgb(246,89,9)" fg:x="12243" fg:w="18"/><text x="57.3296%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (18 samples, 0.08%)</title><rect x="57.0796%" y="181" width="0.0839%" height="15" fill="rgb(233,213,13)" fg:x="12243" fg:w="18"/><text x="57.3296%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.08%)</title><rect x="57.0796%" y="165" width="0.0839%" height="15" fill="rgb(233,141,41)" fg:x="12243" fg:w="18"/><text x="57.3296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.08%)</title><rect x="57.0796%" y="149" width="0.0839%" height="15" fill="rgb(239,167,4)" fg:x="12243" fg:w="18"/><text x="57.3296%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="57.1402%" y="133" width="0.0233%" height="15" fill="rgb(209,217,16)" fg:x="12256" fg:w="5"/><text x="57.3902%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (127 samples, 0.59%)</title><rect x="57.1635%" y="197" width="0.5921%" height="15" fill="rgb(219,88,35)" fg:x="12261" fg:w="127"/><text x="57.4135%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (71 samples, 0.33%)</title><rect x="57.7556%" y="197" width="0.3310%" height="15" fill="rgb(220,193,23)" fg:x="12388" fg:w="71"/><text x="58.0056%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (758 samples, 3.53%)</title><rect x="59.1216%" y="181" width="3.5340%" height="15" fill="rgb(230,90,52)" fg:x="12681" fg:w="758"/><text x="59.3716%" y="191.50">gj`..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,307 samples, 6.09%)</title><rect x="58.0866%" y="197" width="6.0935%" height="15" fill="rgb(252,106,19)" fg:x="12459" fg:w="1307"/><text x="58.3366%" y="207.50">gj`hashb..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (327 samples, 1.52%)</title><rect x="62.6556%" y="181" width="1.5245%" height="15" fill="rgb(206,74,20)" fg:x="13439" fg:w="327"/><text x="62.9056%" y="191.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (3 samples, 0.01%)</title><rect x="64.1801%" y="197" width="0.0140%" height="15" fill="rgb(230,138,44)" fg:x="13766" fg:w="3"/><text x="64.4301%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (3 samples, 0.01%)</title><rect x="64.1801%" y="181" width="0.0140%" height="15" fill="rgb(235,182,43)" fg:x="13766" fg:w="3"/><text x="64.4301%" y="191.50"></text></g><g><title>gj`parquet::file::footer::decode_metadata (3 samples, 0.01%)</title><rect x="64.1801%" y="165" width="0.0140%" height="15" fill="rgb(242,16,51)" fg:x="13766" fg:w="3"/><text x="64.4301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.35%)</title><rect x="65.3271%" y="181" width="0.3497%" height="15" fill="rgb(248,9,4)" fg:x="14012" fg:w="75"/><text x="65.5771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (377 samples, 1.76%)</title><rect x="66.3434%" y="165" width="1.7577%" height="15" fill="rgb(210,31,22)" fg:x="14230" fg:w="377"/><text x="66.5934%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (116 samples, 0.54%)</title><rect x="67.5603%" y="149" width="0.5408%" height="15" fill="rgb(239,54,39)" fg:x="14491" fg:w="116"/><text x="67.8103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (876 samples, 4.08%)</title><rect x="64.1988%" y="197" width="4.0841%" height="15" fill="rgb(230,99,41)" fg:x="13770" fg:w="876"/><text x="64.4488%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (559 samples, 2.61%)</title><rect x="65.6767%" y="181" width="2.6062%" height="15" fill="rgb(253,106,12)" fg:x="14087" fg:w="559"/><text x="65.9267%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.18%)</title><rect x="68.1011%" y="165" width="0.1818%" height="15" fill="rgb(213,46,41)" fg:x="14607" fg:w="39"/><text x="68.3511%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (60 samples, 0.28%)</title><rect x="68.2829%" y="197" width="0.2797%" height="15" fill="rgb(215,133,35)" fg:x="14646" fg:w="60"/><text x="68.5329%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (925 samples, 4.31%)</title><rect x="75.7611%" y="181" width="4.3126%" height="15" fill="rgb(213,28,5)" fg:x="16250" fg:w="925"/><text x="76.0111%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.11%)</title><rect x="80.0737%" y="181" width="0.1072%" height="15" fill="rgb(215,77,49)" fg:x="17175" fg:w="23"/><text x="80.3237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2,666 samples, 12.43%)</title><rect x="68.5626%" y="197" width="12.4295%" height="15" fill="rgb(248,100,22)" fg:x="14706" fg:w="2666"/><text x="68.8126%" y="207.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`szone_size (174 samples, 0.81%)</title><rect x="80.1809%" y="181" width="0.8112%" height="15" fill="rgb(208,67,9)" fg:x="17198" fg:w="174"/><text x="80.4309%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (152 samples, 0.71%)</title><rect x="80.2835%" y="165" width="0.7087%" height="15" fill="rgb(219,133,21)" fg:x="17220" fg:w="152"/><text x="80.5335%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (244 samples, 1.14%)</title><rect x="82.4048%" y="165" width="1.1376%" height="15" fill="rgb(246,46,29)" fg:x="17675" fg:w="244"/><text x="82.6548%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (580 samples, 2.70%)</title><rect x="80.9921%" y="197" width="2.7041%" height="15" fill="rgb(246,185,52)" fg:x="17372" fg:w="580"/><text x="81.2421%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (405 samples, 1.89%)</title><rect x="81.8080%" y="181" width="1.8882%" height="15" fill="rgb(252,136,11)" fg:x="17547" fg:w="405"/><text x="82.0580%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (33 samples, 0.15%)</title><rect x="83.5424%" y="165" width="0.1539%" height="15" fill="rgb(219,138,53)" fg:x="17919" fg:w="33"/><text x="83.7924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (157 samples, 0.73%)</title><rect x="83.6962%" y="197" width="0.7320%" height="15" fill="rgb(211,51,23)" fg:x="17952" fg:w="157"/><text x="83.9462%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (579 samples, 2.70%)</title><rect x="84.4282%" y="197" width="2.6994%" height="15" fill="rgb(247,221,28)" fg:x="18109" fg:w="579"/><text x="84.6782%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.05%)</title><rect x="87.1276%" y="197" width="0.0466%" height="15" fill="rgb(251,222,45)" fg:x="18688" fg:w="10"/><text x="87.3776%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (252 samples, 1.17%)</title><rect x="87.1742%" y="197" width="1.1749%" height="15" fill="rgb(217,162,53)" fg:x="18698" fg:w="252"/><text x="87.4242%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (42 samples, 0.20%)</title><rect x="88.3491%" y="197" width="0.1958%" height="15" fill="rgb(229,93,14)" fg:x="18950" fg:w="42"/><text x="88.5991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.14%)</title><rect x="88.5449%" y="197" width="0.1399%" height="15" fill="rgb(209,67,49)" fg:x="18992" fg:w="30"/><text x="88.7949%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (50 samples, 0.23%)</title><rect x="88.6848%" y="197" width="0.2331%" height="15" fill="rgb(213,87,29)" fg:x="19022" fg:w="50"/><text x="88.9348%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (643 samples, 3.00%)</title><rect x="88.9179%" y="197" width="2.9978%" height="15" fill="rgb(205,151,52)" fg:x="19072" fg:w="643"/><text x="89.1679%" y="207.50">lib..</text></g><g><title>gj`gj::util::from_parquet (14,673 samples, 68.41%)</title><rect x="24.0571%" y="213" width="68.4088%" height="15" fill="rgb(253,215,39)" fg:x="5160" fg:w="14673"/><text x="24.3071%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (118 samples, 0.55%)</title><rect x="91.9157%" y="197" width="0.5501%" height="15" fill="rgb(221,220,41)" fg:x="19715" fg:w="118"/><text x="92.1657%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (145 samples, 0.68%)</title><rect x="92.4658%" y="213" width="0.6760%" height="15" fill="rgb(218,133,21)" fg:x="19833" fg:w="145"/><text x="92.7158%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (11 samples, 0.05%)</title><rect x="93.1419%" y="213" width="0.0513%" height="15" fill="rgb(221,193,43)" fg:x="19978" fg:w="11"/><text x="93.3919%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.19%)</title><rect x="93.1932%" y="213" width="0.1865%" height="15" fill="rgb(240,128,52)" fg:x="19989" fg:w="40"/><text x="93.4432%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (251 samples, 1.17%)</title><rect x="93.3796%" y="213" width="1.1702%" height="15" fill="rgb(253,114,12)" fg:x="20029" fg:w="251"/><text x="93.6296%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (383 samples, 1.79%)</title><rect x="94.5499%" y="213" width="1.7856%" height="15" fill="rgb(215,223,47)" fg:x="20280" fg:w="383"/><text x="94.7999%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.07%)</title><rect x="96.3355%" y="213" width="0.0746%" height="15" fill="rgb(248,225,23)" fg:x="20663" fg:w="16"/><text x="96.5855%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (203 samples, 0.95%)</title><rect x="96.4101%" y="213" width="0.9464%" height="15" fill="rgb(250,108,0)" fg:x="20679" fg:w="203"/><text x="96.6601%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (187 samples, 0.87%)</title><rect x="97.3565%" y="213" width="0.8718%" height="15" fill="rgb(228,208,7)" fg:x="20882" fg:w="187"/><text x="97.6065%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (11 samples, 0.05%)</title><rect x="98.2284%" y="213" width="0.0513%" height="15" fill="rgb(244,45,10)" fg:x="21069" fg:w="11"/><text x="98.4784%" y="223.50"></text></g><g><title>gj`gj::util::load_db (16,376 samples, 76.35%)</title><rect x="22.3787%" y="229" width="76.3485%" height="15" fill="rgb(207,125,25)" fg:x="4800" fg:w="16376"/><text x="22.6287%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (96 samples, 0.45%)</title><rect x="98.2796%" y="213" width="0.4476%" height="15" fill="rgb(210,195,18)" fg:x="21080" fg:w="96"/><text x="98.5296%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.04%)</title><rect x="98.7365%" y="229" width="0.0373%" height="15" fill="rgb(249,80,12)" fg:x="21178" fg:w="8"/><text x="98.9865%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (22 samples, 0.10%)</title><rect x="98.7738%" y="229" width="0.1026%" height="15" fill="rgb(221,65,9)" fg:x="21186" fg:w="22"/><text x="99.0238%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (44 samples, 0.21%)</title><rect x="98.8764%" y="229" width="0.2051%" height="15" fill="rgb(235,49,36)" fg:x="21208" fg:w="44"/><text x="99.1264%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (6 samples, 0.03%)</title><rect x="99.0815%" y="229" width="0.0280%" height="15" fill="rgb(225,32,20)" fg:x="21252" fg:w="6"/><text x="99.3315%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.03%)</title><rect x="99.0815%" y="213" width="0.0280%" height="15" fill="rgb(215,141,46)" fg:x="21252" fg:w="6"/><text x="99.3315%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.03%)</title><rect x="99.0815%" y="197" width="0.0280%" height="15" fill="rgb(250,160,47)" fg:x="21252" fg:w="6"/><text x="99.3315%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.11%)</title><rect x="99.1095%" y="229" width="0.1119%" height="15" fill="rgb(216,222,40)" fg:x="21258" fg:w="24"/><text x="99.3595%" y="239.50"></text></g><g><title>gj`gj::main (21,292 samples, 99.27%)</title><rect x="0.0000%" y="245" width="99.2680%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="21292"/><text x="0.2500%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.05%)</title><rect x="99.2214%" y="229" width="0.0466%" height="15" fill="rgb(207,178,40)" fg:x="21282" fg:w="10"/><text x="99.4714%" y="239.50"></text></g><g><title>gj`main (21,295 samples, 99.28%)</title><rect x="0.0000%" y="309" width="99.2820%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="21295"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (21,295 samples, 99.28%)</title><rect x="0.0000%" y="293" width="99.2820%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="21295"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (21,295 samples, 99.28%)</title><rect x="0.0000%" y="277" width="99.2820%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="21295"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (21,295 samples, 99.28%)</title><rect x="0.0000%" y="261" width="99.2820%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="21295"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.01%)</title><rect x="99.2680%" y="245" width="0.0140%" height="15" fill="rgb(236,202,9)" fg:x="21292" fg:w="3"/><text x="99.5180%" y="255.50"></text></g><g><title>dyld`start (21,297 samples, 99.29%)</title><rect x="0.0000%" y="325" width="99.2913%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="21297"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (139 samples, 0.65%)</title><rect x="99.2913%" y="325" width="0.6480%" height="15" fill="rgb(206,174,23)" fg:x="21297" fg:w="139"/><text x="99.5413%" y="335.50"></text></g><g><title>all (21,449 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="21449"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.06%)</title><rect x="99.9394%" y="325" width="0.0606%" height="15" fill="rgb(245,58,50)" fg:x="21436" fg:w="13"/><text x="100.1894%" y="335.50"></text></g></svg></svg>