<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="265120"><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (55 samples, 0.02%)</title><rect x="0.0404%" y="293" width="0.0207%" height="15" fill="rgb(227,0,7)" fg:x="107" fg:w="55"/><text x="0.2904%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (264 samples, 0.10%)</title><rect x="0.3568%" y="261" width="0.0996%" height="15" fill="rgb(217,0,24)" fg:x="946" fg:w="264"/><text x="0.6068%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (612 samples, 0.23%)</title><rect x="0.2274%" y="277" width="0.2308%" height="15" fill="rgb(221,193,54)" fg:x="603" fg:w="612"/><text x="0.4774%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_large (58 samples, 0.02%)</title><rect x="0.4583%" y="277" width="0.0219%" height="15" fill="rgb(248,212,6)" fg:x="1215" fg:w="58"/><text x="0.7083%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (58 samples, 0.02%)</title><rect x="0.4583%" y="261" width="0.0219%" height="15" fill="rgb(208,68,35)" fg:x="1215" fg:w="58"/><text x="0.7083%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (58 samples, 0.02%)</title><rect x="0.4583%" y="245" width="0.0219%" height="15" fill="rgb(232,128,0)" fg:x="1215" fg:w="58"/><text x="0.7083%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (395 samples, 0.15%)</title><rect x="0.4903%" y="277" width="0.1490%" height="15" fill="rgb(207,160,47)" fg:x="1300" fg:w="395"/><text x="0.7403%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (113 samples, 0.04%)</title><rect x="0.5967%" y="261" width="0.0426%" height="15" fill="rgb(228,23,34)" fg:x="1582" fg:w="113"/><text x="0.8467%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (113 samples, 0.04%)</title><rect x="0.5967%" y="245" width="0.0426%" height="15" fill="rgb(218,30,26)" fg:x="1582" fg:w="113"/><text x="0.8467%" y="255.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,581 samples, 0.60%)</title><rect x="0.0611%" y="293" width="0.5963%" height="15" fill="rgb(220,122,19)" fg:x="162" fg:w="1581"/><text x="0.3111%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (48 samples, 0.02%)</title><rect x="0.6393%" y="277" width="0.0181%" height="15" fill="rgb(250,228,42)" fg:x="1695" fg:w="48"/><text x="0.8893%" y="287.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (196 samples, 0.07%)</title><rect x="0.6574%" y="293" width="0.0739%" height="15" fill="rgb(240,193,28)" fg:x="1743" fg:w="196"/><text x="0.9074%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2,083 samples, 0.79%)</title><rect x="1.3601%" y="245" width="0.7857%" height="15" fill="rgb(216,20,37)" fg:x="3606" fg:w="2083"/><text x="1.6101%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (3,291 samples, 1.24%)</title><rect x="0.9090%" y="261" width="1.2413%" height="15" fill="rgb(206,188,39)" fg:x="2410" fg:w="3291"/><text x="1.1590%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (96 samples, 0.04%)</title><rect x="2.1503%" y="261" width="0.0362%" height="15" fill="rgb(217,207,13)" fg:x="5701" fg:w="96"/><text x="2.4003%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2,436 samples, 0.92%)</title><rect x="2.1866%" y="261" width="0.9188%" height="15" fill="rgb(231,73,38)" fg:x="5797" fg:w="2436"/><text x="2.4366%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (142 samples, 0.05%)</title><rect x="3.0518%" y="245" width="0.0536%" height="15" fill="rgb(225,20,46)" fg:x="8091" fg:w="142"/><text x="3.3018%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (142 samples, 0.05%)</title><rect x="3.0518%" y="229" width="0.0536%" height="15" fill="rgb(210,31,41)" fg:x="8091" fg:w="142"/><text x="3.3018%" y="239.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,162 samples, 2.32%)</title><rect x="0.8087%" y="277" width="2.3242%" height="15" fill="rgb(221,200,47)" fg:x="2144" fg:w="6162"/><text x="1.0587%" y="287.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (73 samples, 0.03%)</title><rect x="3.1054%" y="261" width="0.0275%" height="15" fill="rgb(226,26,5)" fg:x="8233" fg:w="73"/><text x="3.3554%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (577 samples, 0.22%)</title><rect x="3.8933%" y="213" width="0.2176%" height="15" fill="rgb(249,33,26)" fg:x="10322" fg:w="577"/><text x="4.1433%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1,219 samples, 0.46%)</title><rect x="3.6546%" y="229" width="0.4598%" height="15" fill="rgb(235,183,28)" fg:x="9689" fg:w="1219"/><text x="3.9046%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (94 samples, 0.04%)</title><rect x="4.1144%" y="229" width="0.0355%" height="15" fill="rgb(221,5,38)" fg:x="10908" fg:w="94"/><text x="4.3644%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,082 samples, 0.41%)</title><rect x="4.1498%" y="229" width="0.4081%" height="15" fill="rgb(247,18,42)" fg:x="11002" fg:w="1082"/><text x="4.3998%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (246 samples, 0.09%)</title><rect x="4.4651%" y="213" width="0.0928%" height="15" fill="rgb(241,131,45)" fg:x="11838" fg:w="246"/><text x="4.7151%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (244 samples, 0.09%)</title><rect x="4.4659%" y="197" width="0.0920%" height="15" fill="rgb(249,31,29)" fg:x="11840" fg:w="244"/><text x="4.7159%" y="207.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,281 samples, 1.24%)</title><rect x="3.3668%" y="245" width="1.2376%" height="15" fill="rgb(225,111,53)" fg:x="8926" fg:w="3281"/><text x="3.6168%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (123 samples, 0.05%)</title><rect x="4.5579%" y="229" width="0.0464%" height="15" fill="rgb(238,160,17)" fg:x="12084" fg:w="123"/><text x="4.8079%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (69 samples, 0.03%)</title><rect x="4.6043%" y="245" width="0.0260%" height="15" fill="rgb(214,148,48)" fg:x="12207" fg:w="69"/><text x="4.8543%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (140 samples, 0.05%)</title><rect x="4.6315%" y="245" width="0.0528%" height="15" fill="rgb(232,36,49)" fg:x="12279" fg:w="140"/><text x="4.8815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (397 samples, 0.15%)</title><rect x="4.6843%" y="245" width="0.1497%" height="15" fill="rgb(209,103,24)" fg:x="12419" fg:w="397"/><text x="4.9343%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (104 samples, 0.04%)</title><rect x="4.7948%" y="229" width="0.0392%" height="15" fill="rgb(229,88,8)" fg:x="12712" fg:w="104"/><text x="5.0448%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (165 samples, 0.06%)</title><rect x="4.8340%" y="245" width="0.0622%" height="15" fill="rgb(213,181,19)" fg:x="12816" fg:w="165"/><text x="5.0840%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (492 samples, 0.19%)</title><rect x="4.8963%" y="245" width="0.1856%" height="15" fill="rgb(254,191,54)" fg:x="12981" fg:w="492"/><text x="5.1463%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (217 samples, 0.08%)</title><rect x="5.0000%" y="229" width="0.0818%" height="15" fill="rgb(241,83,37)" fg:x="13256" fg:w="217"/><text x="5.2500%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (217 samples, 0.08%)</title><rect x="5.0000%" y="213" width="0.0818%" height="15" fill="rgb(233,36,39)" fg:x="13256" fg:w="217"/><text x="5.2500%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,851 samples, 1.83%)</title><rect x="3.2627%" y="261" width="1.8297%" height="15" fill="rgb(226,3,54)" fg:x="8650" fg:w="4851"/><text x="3.5127%" y="271.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.01%)</title><rect x="5.0818%" y="245" width="0.0106%" height="15" fill="rgb(245,192,40)" fg:x="13473" fg:w="28"/><text x="5.3318%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (34 samples, 0.01%)</title><rect x="5.0958%" y="261" width="0.0128%" height="15" fill="rgb(238,167,29)" fg:x="13510" fg:w="34"/><text x="5.3458%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (53 samples, 0.02%)</title><rect x="5.1411%" y="245" width="0.0200%" height="15" fill="rgb(232,182,51)" fg:x="13630" fg:w="53"/><text x="5.3911%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (142 samples, 0.05%)</title><rect x="5.1086%" y="261" width="0.0536%" height="15" fill="rgb(231,60,39)" fg:x="13544" fg:w="142"/><text x="5.3586%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.01%)</title><rect x="5.1641%" y="261" width="0.0106%" height="15" fill="rgb(208,69,12)" fg:x="13691" fg:w="28"/><text x="5.4141%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (262 samples, 0.10%)</title><rect x="5.1746%" y="261" width="0.0988%" height="15" fill="rgb(235,93,37)" fg:x="13719" fg:w="262"/><text x="5.4246%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (126 samples, 0.05%)</title><rect x="5.2259%" y="245" width="0.0475%" height="15" fill="rgb(213,116,39)" fg:x="13855" fg:w="126"/><text x="5.4759%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.05%)</title><rect x="5.2259%" y="229" width="0.0475%" height="15" fill="rgb(222,207,29)" fg:x="13855" fg:w="126"/><text x="5.4759%" y="239.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,682 samples, 2.14%)</title><rect x="3.1329%" y="277" width="2.1432%" height="15" fill="rgb(206,96,30)" fg:x="8306" fg:w="5682"/><text x="3.3829%" y="287.50">g..</text></g><g><title>gj`DYLD-STUB$$free (106 samples, 0.04%)</title><rect x="5.2761%" y="277" width="0.0400%" height="15" fill="rgb(218,138,4)" fg:x="13988" fg:w="106"/><text x="5.5261%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (326 samples, 0.12%)</title><rect x="5.7529%" y="261" width="0.1230%" height="15" fill="rgb(250,191,14)" fg:x="15252" fg:w="326"/><text x="6.0029%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (154 samples, 0.06%)</title><rect x="5.8177%" y="245" width="0.0581%" height="15" fill="rgb(239,60,40)" fg:x="15424" fg:w="154"/><text x="6.0677%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_large (187 samples, 0.07%)</title><rect x="5.8758%" y="261" width="0.0705%" height="15" fill="rgb(206,27,48)" fg:x="15578" fg:w="187"/><text x="6.1258%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (187 samples, 0.07%)</title><rect x="5.8758%" y="245" width="0.0705%" height="15" fill="rgb(225,35,8)" fg:x="15578" fg:w="187"/><text x="6.1258%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (187 samples, 0.07%)</title><rect x="5.8758%" y="229" width="0.0705%" height="15" fill="rgb(250,213,24)" fg:x="15578" fg:w="187"/><text x="6.1258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (186 samples, 0.07%)</title><rect x="5.9535%" y="261" width="0.0702%" height="15" fill="rgb(247,123,22)" fg:x="15784" fg:w="186"/><text x="6.2035%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (54 samples, 0.02%)</title><rect x="6.0033%" y="245" width="0.0204%" height="15" fill="rgb(231,138,38)" fg:x="15916" fg:w="54"/><text x="6.2533%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (54 samples, 0.02%)</title><rect x="6.0033%" y="229" width="0.0204%" height="15" fill="rgb(231,145,46)" fg:x="15916" fg:w="54"/><text x="6.2533%" y="239.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (1,886 samples, 0.71%)</title><rect x="5.3225%" y="277" width="0.7114%" height="15" fill="rgb(251,118,11)" fg:x="14111" fg:w="1886"/><text x="5.5725%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (27 samples, 0.01%)</title><rect x="6.0237%" y="261" width="0.0102%" height="15" fill="rgb(217,147,25)" fg:x="15970" fg:w="27"/><text x="6.2737%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (220 samples, 0.08%)</title><rect x="6.0339%" y="277" width="0.0830%" height="15" fill="rgb(247,81,37)" fg:x="15997" fg:w="220"/><text x="6.2839%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2,144 samples, 0.81%)</title><rect x="6.5634%" y="261" width="0.8087%" height="15" fill="rgb(209,12,38)" fg:x="17401" fg:w="2144"/><text x="6.8134%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (3,347 samples, 1.26%)</title><rect x="6.1169%" y="277" width="1.2624%" height="15" fill="rgb(227,1,9)" fg:x="16217" fg:w="3347"/><text x="6.3669%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (58 samples, 0.02%)</title><rect x="7.3846%" y="261" width="0.0219%" height="15" fill="rgb(248,47,43)" fg:x="19578" fg:w="58"/><text x="7.6346%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (27 samples, 0.01%)</title><rect x="7.4065%" y="261" width="0.0102%" height="15" fill="rgb(221,10,30)" fg:x="19636" fg:w="27"/><text x="7.6565%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (46 samples, 0.02%)</title><rect x="7.4178%" y="245" width="0.0174%" height="15" fill="rgb(210,229,1)" fg:x="19666" fg:w="46"/><text x="7.6678%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (149 samples, 0.06%)</title><rect x="7.3793%" y="277" width="0.0562%" height="15" fill="rgb(222,148,37)" fg:x="19564" fg:w="149"/><text x="7.6293%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (47 samples, 0.02%)</title><rect x="7.4178%" y="261" width="0.0177%" height="15" fill="rgb(234,67,33)" fg:x="19666" fg:w="47"/><text x="7.6678%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (131 samples, 0.05%)</title><rect x="7.4370%" y="261" width="0.0494%" height="15" fill="rgb(247,98,35)" fg:x="19717" fg:w="131"/><text x="7.6870%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (30 samples, 0.01%)</title><rect x="7.4751%" y="245" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="19818" fg:w="30"/><text x="7.7251%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.01%)</title><rect x="7.4751%" y="229" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="19818" fg:w="30"/><text x="7.7251%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (136 samples, 0.05%)</title><rect x="7.4355%" y="277" width="0.0513%" height="15" fill="rgb(246,177,23)" fg:x="19713" fg:w="136"/><text x="7.6855%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (812 samples, 0.31%)</title><rect x="7.4883%" y="277" width="0.3063%" height="15" fill="rgb(230,62,27)" fg:x="19853" fg:w="812"/><text x="7.7383%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (326 samples, 0.12%)</title><rect x="7.9247%" y="261" width="0.1230%" height="15" fill="rgb(216,154,8)" fg:x="21010" fg:w="326"/><text x="8.1747%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (326 samples, 0.12%)</title><rect x="7.9247%" y="245" width="0.1230%" height="15" fill="rgb(244,35,45)" fg:x="21010" fg:w="326"/><text x="8.1747%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (672 samples, 0.25%)</title><rect x="7.7946%" y="277" width="0.2535%" height="15" fill="rgb(251,115,12)" fg:x="20665" fg:w="672"/><text x="8.0446%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (102 samples, 0.04%)</title><rect x="8.0481%" y="277" width="0.0385%" height="15" fill="rgb(240,54,50)" fg:x="21337" fg:w="102"/><text x="8.2981%" y="287.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,503 samples, 7.36%)</title><rect x="0.7314%" y="293" width="7.3563%" height="15" fill="rgb(233,84,52)" fg:x="1939" fg:w="19503"/><text x="0.9814%" y="303.50">gj`&lt;hashbr..</text></g><g><title>gj`DYLD-STUB$$free (618 samples, 0.23%)</title><rect x="8.0877%" y="293" width="0.2331%" height="15" fill="rgb(207,117,47)" fg:x="21442" fg:w="618"/><text x="8.3377%" y="303.50"></text></g><g><title>gj`DYLD-STUB$$malloc (144 samples, 0.05%)</title><rect x="8.3208%" y="293" width="0.0543%" height="15" fill="rgb(249,43,39)" fg:x="22060" fg:w="144"/><text x="8.5708%" y="303.50"></text></g><g><title>gj`__rdl_alloc (799 samples, 0.30%)</title><rect x="8.3751%" y="293" width="0.3014%" height="15" fill="rgb(209,38,44)" fg:x="22204" fg:w="799"/><text x="8.6251%" y="303.50"></text></g><g><title>gj`__rust_dealloc (175 samples, 0.07%)</title><rect x="8.6832%" y="293" width="0.0660%" height="15" fill="rgb(236,212,23)" fg:x="23021" fg:w="175"/><text x="8.9332%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (126 samples, 0.05%)</title><rect x="10.1169%" y="245" width="0.0475%" height="15" fill="rgb(242,79,21)" fg:x="26822" fg:w="126"/><text x="10.3669%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (274 samples, 0.10%)</title><rect x="10.5824%" y="213" width="0.1033%" height="15" fill="rgb(211,96,35)" fg:x="28056" fg:w="274"/><text x="10.8324%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,084 samples, 0.41%)</title><rect x="10.2803%" y="229" width="0.4089%" height="15" fill="rgb(253,215,40)" fg:x="27255" fg:w="1084"/><text x="10.5303%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,230 samples, 0.84%)</title><rect x="9.8936%" y="261" width="0.8411%" height="15" fill="rgb(211,81,21)" fg:x="26230" fg:w="2230"/><text x="10.1436%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,512 samples, 0.57%)</title><rect x="10.1645%" y="245" width="0.5703%" height="15" fill="rgb(208,190,38)" fg:x="26948" fg:w="1512"/><text x="10.4145%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (121 samples, 0.05%)</title><rect x="10.6891%" y="229" width="0.0456%" height="15" fill="rgb(235,213,38)" fg:x="28339" fg:w="121"/><text x="10.9391%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (168 samples, 0.06%)</title><rect x="10.7348%" y="261" width="0.0634%" height="15" fill="rgb(237,122,38)" fg:x="28460" fg:w="168"/><text x="10.9848%" y="271.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,401 samples, 1.66%)</title><rect x="9.1423%" y="277" width="1.6600%" height="15" fill="rgb(244,218,35)" fg:x="24238" fg:w="4401"/><text x="9.3923%" y="287.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (45 samples, 0.02%)</title><rect x="10.8023%" y="277" width="0.0170%" height="15" fill="rgb(240,68,47)" fg:x="28639" fg:w="45"/><text x="11.0523%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (177 samples, 0.07%)</title><rect x="11.0199%" y="245" width="0.0668%" height="15" fill="rgb(210,16,53)" fg:x="29216" fg:w="177"/><text x="11.2699%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (67 samples, 0.03%)</title><rect x="11.0614%" y="229" width="0.0253%" height="15" fill="rgb(235,124,12)" fg:x="29326" fg:w="67"/><text x="11.3114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (48 samples, 0.02%)</title><rect x="11.0904%" y="245" width="0.0181%" height="15" fill="rgb(224,169,11)" fg:x="29403" fg:w="48"/><text x="11.3404%" y="255.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (331 samples, 0.12%)</title><rect x="10.9924%" y="261" width="0.1248%" height="15" fill="rgb(250,166,2)" fg:x="29143" fg:w="331"/><text x="11.2424%" y="271.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.02%)</title><rect x="11.2794%" y="245" width="0.0230%" height="15" fill="rgb(242,216,29)" fg:x="29904" fg:w="61"/><text x="11.5294%" y="255.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (194 samples, 0.07%)</title><rect x="11.3024%" y="245" width="0.0732%" height="15" fill="rgb(230,116,27)" fg:x="29965" fg:w="194"/><text x="11.5524%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (212 samples, 0.08%)</title><rect x="11.4839%" y="229" width="0.0800%" height="15" fill="rgb(228,99,48)" fg:x="30446" fg:w="212"/><text x="11.7339%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (498 samples, 0.19%)</title><rect x="11.3764%" y="245" width="0.1878%" height="15" fill="rgb(253,11,6)" fg:x="30161" fg:w="498"/><text x="11.6264%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (35 samples, 0.01%)</title><rect x="11.5642%" y="245" width="0.0132%" height="15" fill="rgb(247,143,39)" fg:x="30659" fg:w="35"/><text x="11.8142%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (139 samples, 0.05%)</title><rect x="11.5774%" y="245" width="0.0524%" height="15" fill="rgb(236,97,10)" fg:x="30694" fg:w="139"/><text x="11.8274%" y="255.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,410 samples, 0.53%)</title><rect x="11.1172%" y="261" width="0.5318%" height="15" fill="rgb(233,208,19)" fg:x="29474" fg:w="1410"/><text x="11.3672%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (51 samples, 0.02%)</title><rect x="11.6298%" y="245" width="0.0192%" height="15" fill="rgb(216,164,2)" fg:x="30833" fg:w="51"/><text x="11.8798%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$free (102 samples, 0.04%)</title><rect x="11.6491%" y="261" width="0.0385%" height="15" fill="rgb(220,129,5)" fg:x="30884" fg:w="102"/><text x="11.8991%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (75 samples, 0.03%)</title><rect x="11.6962%" y="261" width="0.0283%" height="15" fill="rgb(242,17,10)" fg:x="31009" fg:w="75"/><text x="11.9462%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (666 samples, 0.25%)</title><rect x="12.1017%" y="245" width="0.2512%" height="15" fill="rgb(242,107,0)" fg:x="32084" fg:w="666"/><text x="12.3517%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1,667 samples, 0.63%)</title><rect x="11.7245%" y="261" width="0.6288%" height="15" fill="rgb(251,28,31)" fg:x="31084" fg:w="1667"/><text x="11.9745%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (146 samples, 0.06%)</title><rect x="12.3533%" y="261" width="0.0551%" height="15" fill="rgb(233,223,10)" fg:x="32751" fg:w="146"/><text x="12.6033%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (560 samples, 0.21%)</title><rect x="12.4083%" y="261" width="0.2112%" height="15" fill="rgb(215,21,27)" fg:x="32897" fg:w="560"/><text x="12.6583%" y="271.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,913 samples, 1.85%)</title><rect x="10.8193%" y="277" width="1.8531%" height="15" fill="rgb(232,23,21)" fg:x="28684" fg:w="4913"/><text x="11.0693%" y="287.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (140 samples, 0.05%)</title><rect x="12.6196%" y="261" width="0.0528%" height="15" fill="rgb(244,5,23)" fg:x="33457" fg:w="140"/><text x="12.8696%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$free (375 samples, 0.14%)</title><rect x="12.6724%" y="277" width="0.1414%" height="15" fill="rgb(226,81,46)" fg:x="33597" fg:w="375"/><text x="12.9224%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$malloc (201 samples, 0.08%)</title><rect x="12.8138%" y="277" width="0.0758%" height="15" fill="rgb(247,70,30)" fg:x="33972" fg:w="201"/><text x="13.0638%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (103 samples, 0.04%)</title><rect x="12.8896%" y="277" width="0.0389%" height="15" fill="rgb(212,68,19)" fg:x="34173" fg:w="103"/><text x="13.1396%" y="287.50"></text></g><g><title>gj`__rdl_alloc (127 samples, 0.05%)</title><rect x="12.9285%" y="277" width="0.0479%" height="15" fill="rgb(240,187,13)" fg:x="34276" fg:w="127"/><text x="13.1785%" y="287.50"></text></g><g><title>gj`__rdl_dealloc (35 samples, 0.01%)</title><rect x="12.9764%" y="277" width="0.0132%" height="15" fill="rgb(223,113,26)" fg:x="34403" fg:w="35"/><text x="13.2264%" y="287.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (120 samples, 0.05%)</title><rect x="12.9979%" y="277" width="0.0453%" height="15" fill="rgb(206,192,2)" fg:x="34460" fg:w="120"/><text x="13.2479%" y="287.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,246 samples, 0.85%)</title><rect x="14.3358%" y="245" width="0.8472%" height="15" fill="rgb(241,108,4)" fg:x="38007" fg:w="2246"/><text x="14.5858%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (33 samples, 0.01%)</title><rect x="15.3844%" y="229" width="0.0124%" height="15" fill="rgb(247,173,49)" fg:x="40787" fg:w="33"/><text x="15.6344%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (214 samples, 0.08%)</title><rect x="15.7600%" y="197" width="0.0807%" height="15" fill="rgb(224,114,35)" fg:x="41783" fg:w="214"/><text x="16.0100%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (927 samples, 0.35%)</title><rect x="15.4915%" y="213" width="0.3497%" height="15" fill="rgb(245,159,27)" fg:x="41071" fg:w="927"/><text x="15.7415%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,883 samples, 0.71%)</title><rect x="15.1829%" y="245" width="0.7102%" height="15" fill="rgb(245,172,44)" fg:x="40253" fg:w="1883"/><text x="15.4329%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,316 samples, 0.50%)</title><rect x="15.3968%" y="229" width="0.4964%" height="15" fill="rgb(236,23,11)" fg:x="40820" fg:w="1316"/><text x="15.6468%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (138 samples, 0.05%)</title><rect x="15.8411%" y="213" width="0.0521%" height="15" fill="rgb(205,117,38)" fg:x="41998" fg:w="138"/><text x="16.0911%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (139 samples, 0.05%)</title><rect x="15.8932%" y="245" width="0.0524%" height="15" fill="rgb(237,72,25)" fg:x="42136" fg:w="139"/><text x="16.1432%" y="255.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,332 samples, 2.01%)</title><rect x="13.9401%" y="261" width="2.0112%" height="15" fill="rgb(244,70,9)" fg:x="36958" fg:w="5332"/><text x="14.1901%" y="271.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (370 samples, 0.14%)</title><rect x="15.9513%" y="261" width="0.1396%" height="15" fill="rgb(217,125,39)" fg:x="42290" fg:w="370"/><text x="16.2013%" y="271.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.02%)</title><rect x="16.0908%" y="261" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="42660" fg:w="42"/><text x="16.3408%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (118 samples, 0.04%)</title><rect x="16.1093%" y="261" width="0.0445%" height="15" fill="rgb(251,123,47)" fg:x="42709" fg:w="118"/><text x="16.3593%" y="271.50"></text></g><g><title>gj`__rdl_alloc (64 samples, 0.02%)</title><rect x="16.1610%" y="261" width="0.0241%" height="15" fill="rgb(221,13,13)" fg:x="42846" fg:w="64"/><text x="16.4110%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (39 samples, 0.01%)</title><rect x="16.2609%" y="245" width="0.0147%" height="15" fill="rgb(238,131,9)" fg:x="43111" fg:w="39"/><text x="16.5109%" y="255.50"></text></g><g><title>gj`__rdl_alloc (28 samples, 0.01%)</title><rect x="16.2756%" y="245" width="0.0106%" height="15" fill="rgb(211,50,8)" fg:x="43150" fg:w="28"/><text x="16.5256%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (102 samples, 0.04%)</title><rect x="16.4416%" y="213" width="0.0385%" height="15" fill="rgb(245,182,24)" fg:x="43590" fg:w="102"/><text x="16.6916%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (200 samples, 0.08%)</title><rect x="16.7471%" y="181" width="0.0754%" height="15" fill="rgb(242,14,37)" fg:x="44400" fg:w="200"/><text x="16.9971%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (712 samples, 0.27%)</title><rect x="16.5608%" y="197" width="0.2686%" height="15" fill="rgb(246,228,12)" fg:x="43906" fg:w="712"/><text x="16.8108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,423 samples, 0.54%)</title><rect x="16.3149%" y="229" width="0.5367%" height="15" fill="rgb(213,55,15)" fg:x="43254" fg:w="1423"/><text x="16.5649%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (985 samples, 0.37%)</title><rect x="16.4801%" y="213" width="0.3715%" height="15" fill="rgb(209,9,3)" fg:x="43692" fg:w="985"/><text x="16.7301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (59 samples, 0.02%)</title><rect x="16.8294%" y="197" width="0.0223%" height="15" fill="rgb(230,59,30)" fg:x="44618" fg:w="59"/><text x="17.0794%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (103 samples, 0.04%)</title><rect x="16.8516%" y="229" width="0.0389%" height="15" fill="rgb(209,121,21)" fg:x="44677" fg:w="103"/><text x="17.1016%" y="239.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (1,603 samples, 0.60%)</title><rect x="16.2862%" y="245" width="0.6046%" height="15" fill="rgb(220,109,13)" fg:x="43178" fg:w="1603"/><text x="16.5362%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,920 samples, 0.72%)</title><rect x="16.1851%" y="261" width="0.7242%" height="15" fill="rgb(232,18,1)" fg:x="42910" fg:w="1920"/><text x="16.4351%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (49 samples, 0.02%)</title><rect x="16.8908%" y="245" width="0.0185%" height="15" fill="rgb(215,41,42)" fg:x="44781" fg:w="49"/><text x="17.1408%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (76 samples, 0.03%)</title><rect x="16.9093%" y="261" width="0.0287%" height="15" fill="rgb(224,123,36)" fg:x="44830" fg:w="76"/><text x="17.1593%" y="271.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,231 samples, 0.84%)</title><rect x="17.3423%" y="229" width="0.8415%" height="15" fill="rgb(240,125,3)" fg:x="45978" fg:w="2231"/><text x="17.5923%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (74 samples, 0.03%)</title><rect x="18.1993%" y="197" width="0.0279%" height="15" fill="rgb(205,98,50)" fg:x="48250" fg:w="74"/><text x="18.4493%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (125 samples, 0.05%)</title><rect x="18.1838%" y="229" width="0.0471%" height="15" fill="rgb(205,185,37)" fg:x="48209" fg:w="125"/><text x="18.4338%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (101 samples, 0.04%)</title><rect x="18.1929%" y="213" width="0.0381%" height="15" fill="rgb(238,207,15)" fg:x="48233" fg:w="101"/><text x="18.4429%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,604 samples, 0.98%)</title><rect x="17.2526%" y="245" width="0.9822%" height="15" fill="rgb(213,199,42)" fg:x="45740" fg:w="2604"/><text x="17.5026%" y="255.50"></text></g><g><title>gj`&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (157 samples, 0.06%)</title><rect x="18.2348%" y="245" width="0.0592%" height="15" fill="rgb(235,201,11)" fg:x="48344" fg:w="157"/><text x="18.4848%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (42 samples, 0.02%)</title><rect x="18.3592%" y="181" width="0.0158%" height="15" fill="rgb(207,46,11)" fg:x="48674" fg:w="42"/><text x="18.6092%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (88 samples, 0.03%)</title><rect x="18.3490%" y="197" width="0.0332%" height="15" fill="rgb(241,35,35)" fg:x="48647" fg:w="88"/><text x="18.5990%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.02%)</title><rect x="18.3822%" y="197" width="0.0192%" height="15" fill="rgb(243,32,47)" fg:x="48735" fg:w="51"/><text x="18.6322%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (209 samples, 0.08%)</title><rect x="18.3234%" y="229" width="0.0788%" height="15" fill="rgb(247,202,23)" fg:x="48579" fg:w="209"/><text x="18.5734%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (191 samples, 0.07%)</title><rect x="18.3302%" y="213" width="0.0720%" height="15" fill="rgb(219,102,11)" fg:x="48597" fg:w="191"/><text x="18.5802%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (266 samples, 0.10%)</title><rect x="18.3091%" y="245" width="0.1003%" height="15" fill="rgb(243,110,44)" fg:x="48541" fg:w="266"/><text x="18.5591%" y="255.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (116 samples, 0.04%)</title><rect x="18.4479%" y="213" width="0.0438%" height="15" fill="rgb(222,74,54)" fg:x="48909" fg:w="116"/><text x="18.6979%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (146 samples, 0.06%)</title><rect x="18.4388%" y="229" width="0.0551%" height="15" fill="rgb(216,99,12)" fg:x="48885" fg:w="146"/><text x="18.6888%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.01%)</title><rect x="18.5686%" y="85" width="0.0102%" height="15" fill="rgb(226,22,26)" fg:x="49229" fg:w="27"/><text x="18.8186%" y="95.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.01%)</title><rect x="18.5678%" y="101" width="0.0121%" height="15" fill="rgb(217,163,10)" fg:x="49227" fg:w="32"/><text x="18.8178%" y="111.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (35 samples, 0.01%)</title><rect x="18.5833%" y="101" width="0.0132%" height="15" fill="rgb(213,25,53)" fg:x="49268" fg:w="35"/><text x="18.8333%" y="111.50"></text></g><g><title>gj`gj::join::materialize (222 samples, 0.08%)</title><rect x="18.5433%" y="117" width="0.0837%" height="15" fill="rgb(252,105,26)" fg:x="49162" fg:w="222"/><text x="18.7933%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (38 samples, 0.01%)</title><rect x="18.6127%" y="101" width="0.0143%" height="15" fill="rgb(220,39,43)" fg:x="49346" fg:w="38"/><text x="18.8627%" y="111.50"></text></g><g><title>gj`gj::join::materialize (228 samples, 0.09%)</title><rect x="18.5433%" y="133" width="0.0860%" height="15" fill="rgb(229,68,48)" fg:x="49162" fg:w="228"/><text x="18.7933%" y="143.50"></text></g><g><title>gj`gj::join::materialize (229 samples, 0.09%)</title><rect x="18.5433%" y="149" width="0.0864%" height="15" fill="rgb(252,8,32)" fg:x="49162" fg:w="229"/><text x="18.7933%" y="159.50"></text></g><g><title>gj`gj::join::materialize (233 samples, 0.09%)</title><rect x="18.5429%" y="165" width="0.0879%" height="15" fill="rgb(223,20,43)" fg:x="49161" fg:w="233"/><text x="18.7929%" y="175.50"></text></g><g><title>gj`gj::join::materialize (291 samples, 0.11%)</title><rect x="18.5226%" y="181" width="0.1098%" height="15" fill="rgb(229,81,49)" fg:x="49107" fg:w="291"/><text x="18.7726%" y="191.50"></text></g><g><title>gj`gj::join::bushy_join_inner (321 samples, 0.12%)</title><rect x="18.5116%" y="213" width="0.1211%" height="15" fill="rgb(236,28,36)" fg:x="49078" fg:w="321"/><text x="18.7616%" y="223.50"></text></g><g><title>gj`gj::join::materialize (293 samples, 0.11%)</title><rect x="18.5222%" y="197" width="0.1105%" height="15" fill="rgb(249,185,26)" fg:x="49106" fg:w="293"/><text x="18.7722%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (32 samples, 0.01%)</title><rect x="18.6666%" y="85" width="0.0121%" height="15" fill="rgb(249,174,33)" fg:x="49489" fg:w="32"/><text x="18.9166%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (42 samples, 0.02%)</title><rect x="18.6632%" y="101" width="0.0158%" height="15" fill="rgb(233,201,37)" fg:x="49480" fg:w="42"/><text x="18.9132%" y="111.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (49 samples, 0.02%)</title><rect x="18.6625%" y="133" width="0.0185%" height="15" fill="rgb(221,78,26)" fg:x="49478" fg:w="49"/><text x="18.9125%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (49 samples, 0.02%)</title><rect x="18.6625%" y="117" width="0.0185%" height="15" fill="rgb(250,127,30)" fg:x="49478" fg:w="49"/><text x="18.9125%" y="127.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (58 samples, 0.02%)</title><rect x="18.6599%" y="149" width="0.0219%" height="15" fill="rgb(230,49,44)" fg:x="49471" fg:w="58"/><text x="18.9099%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (51 samples, 0.02%)</title><rect x="18.7259%" y="53" width="0.0192%" height="15" fill="rgb(229,67,23)" fg:x="49646" fg:w="51"/><text x="18.9759%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.01%)</title><rect x="18.7451%" y="53" width="0.0113%" height="15" fill="rgb(249,83,47)" fg:x="49697" fg:w="30"/><text x="18.9951%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (96 samples, 0.04%)</title><rect x="18.7240%" y="69" width="0.0362%" height="15" fill="rgb(215,43,3)" fg:x="49641" fg:w="96"/><text x="18.9740%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (116 samples, 0.04%)</title><rect x="18.7168%" y="85" width="0.0438%" height="15" fill="rgb(238,154,13)" fg:x="49622" fg:w="116"/><text x="18.9668%" y="95.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (137 samples, 0.05%)</title><rect x="18.7119%" y="117" width="0.0517%" height="15" fill="rgb(219,56,2)" fg:x="49609" fg:w="137"/><text x="18.9619%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (130 samples, 0.05%)</title><rect x="18.7145%" y="101" width="0.0490%" height="15" fill="rgb(233,0,4)" fg:x="49616" fg:w="130"/><text x="18.9645%" y="111.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (146 samples, 0.06%)</title><rect x="18.7100%" y="133" width="0.0551%" height="15" fill="rgb(235,30,7)" fg:x="49604" fg:w="146"/><text x="18.9600%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.01%)</title><rect x="18.7877%" y="101" width="0.0117%" height="15" fill="rgb(250,79,13)" fg:x="49810" fg:w="31"/><text x="19.0377%" y="111.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (66 samples, 0.02%)</title><rect x="18.7749%" y="117" width="0.0249%" height="15" fill="rgb(211,146,34)" fg:x="49776" fg:w="66"/><text x="19.0249%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.01%)</title><rect x="19.0295%" y="69" width="0.0109%" height="15" fill="rgb(228,22,38)" fg:x="50451" fg:w="29"/><text x="19.2795%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (152 samples, 0.06%)</title><rect x="19.1777%" y="37" width="0.0573%" height="15" fill="rgb(235,168,5)" fg:x="50844" fg:w="152"/><text x="19.4277%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (452 samples, 0.17%)</title><rect x="19.0714%" y="53" width="0.1705%" height="15" fill="rgb(221,155,16)" fg:x="50562" fg:w="452"/><text x="19.3214%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (794 samples, 0.30%)</title><rect x="18.9495%" y="85" width="0.2995%" height="15" fill="rgb(215,215,53)" fg:x="50239" fg:w="794"/><text x="19.1995%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (553 samples, 0.21%)</title><rect x="19.0404%" y="69" width="0.2086%" height="15" fill="rgb(223,4,10)" fg:x="50480" fg:w="553"/><text x="19.2904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (60 samples, 0.02%)</title><rect x="19.2490%" y="85" width="0.0226%" height="15" fill="rgb(234,103,6)" fg:x="51033" fg:w="60"/><text x="19.4990%" y="95.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (937 samples, 0.35%)</title><rect x="18.9197%" y="101" width="0.3534%" height="15" fill="rgb(227,97,0)" fg:x="50160" fg:w="937"/><text x="19.1697%" y="111.50"></text></g><g><title>gj`DYLD-STUB$$free (32 samples, 0.01%)</title><rect x="19.2732%" y="101" width="0.0121%" height="15" fill="rgb(234,150,53)" fg:x="51097" fg:w="32"/><text x="19.5232%" y="111.50"></text></g><g><title>gj`DYLD-STUB$$malloc (36 samples, 0.01%)</title><rect x="19.2852%" y="101" width="0.0136%" height="15" fill="rgb(228,201,54)" fg:x="51129" fg:w="36"/><text x="19.5352%" y="111.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (35 samples, 0.01%)</title><rect x="19.2988%" y="101" width="0.0132%" height="15" fill="rgb(222,22,37)" fg:x="51165" fg:w="35"/><text x="19.5488%" y="111.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (27 samples, 0.01%)</title><rect x="19.3120%" y="101" width="0.0102%" height="15" fill="rgb(237,53,32)" fg:x="51200" fg:w="27"/><text x="19.5620%" y="111.50"></text></g><g><title>gj`__rdl_alloc (38 samples, 0.01%)</title><rect x="19.3222%" y="101" width="0.0143%" height="15" fill="rgb(233,25,53)" fg:x="51227" fg:w="38"/><text x="19.5722%" y="111.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (55 samples, 0.02%)</title><rect x="19.3403%" y="101" width="0.0207%" height="15" fill="rgb(210,40,34)" fg:x="51275" fg:w="55"/><text x="19.5903%" y="111.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (222 samples, 0.08%)</title><rect x="19.3965%" y="85" width="0.0837%" height="15" fill="rgb(241,220,44)" fg:x="51424" fg:w="222"/><text x="19.6465%" y="95.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (107 samples, 0.04%)</title><rect x="19.4802%" y="85" width="0.0404%" height="15" fill="rgb(235,28,35)" fg:x="51646" fg:w="107"/><text x="19.7302%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (176 samples, 0.07%)</title><rect x="19.6062%" y="69" width="0.0664%" height="15" fill="rgb(210,56,17)" fg:x="51980" fg:w="176"/><text x="19.8562%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free (405 samples, 0.15%)</title><rect x="19.5206%" y="85" width="0.1528%" height="15" fill="rgb(224,130,29)" fg:x="51753" fg:w="405"/><text x="19.7706%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (98 samples, 0.04%)</title><rect x="19.6790%" y="85" width="0.0370%" height="15" fill="rgb(235,212,8)" fg:x="52173" fg:w="98"/><text x="19.9290%" y="95.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (986 samples, 0.37%)</title><rect x="19.3610%" y="101" width="0.3719%" height="15" fill="rgb(223,33,50)" fg:x="51330" fg:w="986"/><text x="19.6110%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (45 samples, 0.02%)</title><rect x="19.7160%" y="85" width="0.0170%" height="15" fill="rgb(219,149,13)" fg:x="52271" fg:w="45"/><text x="19.9660%" y="95.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (152 samples, 0.06%)</title><rect x="19.7484%" y="85" width="0.0573%" height="15" fill="rgb(250,156,29)" fg:x="52357" fg:w="152"/><text x="19.9984%" y="95.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (259 samples, 0.10%)</title><rect x="19.7330%" y="101" width="0.0977%" height="15" fill="rgb(216,193,19)" fg:x="52316" fg:w="259"/><text x="19.9830%" y="111.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (66 samples, 0.02%)</title><rect x="19.8057%" y="85" width="0.0249%" height="15" fill="rgb(216,135,14)" fg:x="52509" fg:w="66"/><text x="20.0557%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.02%)</title><rect x="19.8306%" y="101" width="0.0166%" height="15" fill="rgb(241,47,5)" fg:x="52575" fg:w="44"/><text x="20.0806%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (42 samples, 0.02%)</title><rect x="19.8472%" y="101" width="0.0158%" height="15" fill="rgb(233,42,35)" fg:x="52619" fg:w="42"/><text x="20.0972%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (120 samples, 0.05%)</title><rect x="19.9476%" y="85" width="0.0453%" height="15" fill="rgb(231,13,6)" fg:x="52885" fg:w="120"/><text x="20.1976%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (346 samples, 0.13%)</title><rect x="19.8631%" y="101" width="0.1305%" height="15" fill="rgb(207,181,40)" fg:x="52661" fg:w="346"/><text x="20.1131%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (58 samples, 0.02%)</title><rect x="19.9936%" y="101" width="0.0219%" height="15" fill="rgb(254,173,49)" fg:x="53007" fg:w="58"/><text x="20.2436%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (111 samples, 0.04%)</title><rect x="20.0155%" y="101" width="0.0419%" height="15" fill="rgb(221,1,38)" fg:x="53065" fg:w="111"/><text x="20.2655%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (215 samples, 0.08%)</title><rect x="20.0671%" y="101" width="0.0811%" height="15" fill="rgb(206,124,46)" fg:x="53202" fg:w="215"/><text x="20.3171%" y="111.50"></text></g><g><title>gj`gj::join::materialize (3,883 samples, 1.46%)</title><rect x="18.8092%" y="117" width="1.4646%" height="15" fill="rgb(249,21,11)" fg:x="49867" fg:w="3883"/><text x="19.0592%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (333 samples, 0.13%)</title><rect x="20.1482%" y="101" width="0.1256%" height="15" fill="rgb(222,201,40)" fg:x="53417" fg:w="333"/><text x="20.3982%" y="111.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (53 samples, 0.02%)</title><rect x="20.2738%" y="117" width="0.0200%" height="15" fill="rgb(235,61,29)" fg:x="53750" fg:w="53"/><text x="20.5238%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (29 samples, 0.01%)</title><rect x="20.3021%" y="117" width="0.0109%" height="15" fill="rgb(219,207,3)" fg:x="53825" fg:w="29"/><text x="20.5521%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (35 samples, 0.01%)</title><rect x="20.3131%" y="117" width="0.0132%" height="15" fill="rgb(222,56,46)" fg:x="53854" fg:w="35"/><text x="20.5631%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (68 samples, 0.03%)</title><rect x="20.3278%" y="117" width="0.0256%" height="15" fill="rgb(239,76,54)" fg:x="53893" fg:w="68"/><text x="20.5778%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.01%)</title><rect x="20.3534%" y="117" width="0.0109%" height="15" fill="rgb(231,124,27)" fg:x="53961" fg:w="29"/><text x="20.6034%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (31 samples, 0.01%)</title><rect x="20.3644%" y="117" width="0.0117%" height="15" fill="rgb(249,195,6)" fg:x="53990" fg:w="31"/><text x="20.6144%" y="127.50"></text></g><g><title>gj`gj::join::materialize (4,284 samples, 1.62%)</title><rect x="18.7662%" y="133" width="1.6159%" height="15" fill="rgb(237,174,47)" fg:x="49753" fg:w="4284"/><text x="19.0162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (35 samples, 0.01%)</title><rect x="20.3862%" y="101" width="0.0132%" height="15" fill="rgb(206,201,31)" fg:x="54048" fg:w="35"/><text x="20.6362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (47 samples, 0.02%)</title><rect x="20.3821%" y="133" width="0.0177%" height="15" fill="rgb(231,57,52)" fg:x="54037" fg:w="47"/><text x="20.6321%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.02%)</title><rect x="20.3844%" y="117" width="0.0155%" height="15" fill="rgb(248,177,22)" fg:x="54043" fg:w="41"/><text x="20.6344%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (35 samples, 0.01%)</title><rect x="20.4130%" y="133" width="0.0132%" height="15" fill="rgb(215,211,37)" fg:x="54119" fg:w="35"/><text x="20.6630%" y="143.50"></text></g><g><title>gj`gj::join::materialize (4,634 samples, 1.75%)</title><rect x="18.6821%" y="149" width="1.7479%" height="15" fill="rgb(241,128,51)" fg:x="49530" fg:w="4634"/><text x="18.9321%" y="159.50"></text></g><g><title>gj`gj::join::materialize (4,751 samples, 1.79%)</title><rect x="18.6470%" y="165" width="1.7920%" height="15" fill="rgb(227,165,31)" fg:x="49437" fg:w="4751"/><text x="18.8970%" y="175.50">g..</text></g><g><title>gj`gj::join::materialize (4,793 samples, 1.81%)</title><rect x="18.6357%" y="181" width="1.8079%" height="15" fill="rgb(228,167,24)" fg:x="49407" fg:w="4793"/><text x="18.8857%" y="191.50">g..</text></g><g><title>gj`gj::join::materialize (4,804 samples, 1.81%)</title><rect x="18.6327%" y="213" width="1.8120%" height="15" fill="rgb(228,143,12)" fg:x="49399" fg:w="4804"/><text x="18.8827%" y="223.50">g..</text></g><g><title>gj`gj::join::materialize (4,800 samples, 1.81%)</title><rect x="18.6342%" y="197" width="1.8105%" height="15" fill="rgb(249,149,8)" fg:x="49403" fg:w="4800"/><text x="18.8842%" y="207.50">g..</text></g><g><title>gj`gj::join::bushy_join_inner (5,145 samples, 1.94%)</title><rect x="18.5067%" y="229" width="1.9406%" height="15" fill="rgb(243,35,44)" fg:x="49065" fg:w="5145"/><text x="18.7567%" y="239.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.01%)</title><rect x="20.4847%" y="181" width="0.0124%" height="15" fill="rgb(246,89,9)" fg:x="54309" fg:w="33"/><text x="20.7347%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (45 samples, 0.02%)</title><rect x="20.5337%" y="101" width="0.0170%" height="15" fill="rgb(233,213,13)" fg:x="54439" fg:w="45"/><text x="20.7837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (67 samples, 0.03%)</title><rect x="20.5315%" y="117" width="0.0253%" height="15" fill="rgb(233,141,41)" fg:x="54433" fg:w="67"/><text x="20.7815%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (76 samples, 0.03%)</title><rect x="20.5284%" y="133" width="0.0287%" height="15" fill="rgb(239,167,4)" fg:x="54425" fg:w="76"/><text x="20.7784%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (91 samples, 0.03%)</title><rect x="20.5235%" y="165" width="0.0343%" height="15" fill="rgb(209,217,16)" fg:x="54412" fg:w="91"/><text x="20.7735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (83 samples, 0.03%)</title><rect x="20.5266%" y="149" width="0.0313%" height="15" fill="rgb(219,88,35)" fg:x="54420" fg:w="83"/><text x="20.7766%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (140 samples, 0.05%)</title><rect x="20.5054%" y="181" width="0.0528%" height="15" fill="rgb(220,193,23)" fg:x="54364" fg:w="140"/><text x="20.7554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.02%)</title><rect x="20.8098%" y="133" width="0.0174%" height="15" fill="rgb(230,90,52)" fg:x="55171" fg:w="46"/><text x="21.0598%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (127 samples, 0.05%)</title><rect x="20.9765%" y="101" width="0.0479%" height="15" fill="rgb(252,106,19)" fg:x="55613" fg:w="127"/><text x="21.2265%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (427 samples, 0.16%)</title><rect x="20.8690%" y="117" width="0.1611%" height="15" fill="rgb(206,74,20)" fg:x="55328" fg:w="427"/><text x="21.1190%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (839 samples, 0.32%)</title><rect x="20.7291%" y="149" width="0.3165%" height="15" fill="rgb(230,138,44)" fg:x="54957" fg:w="839"/><text x="20.9791%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (579 samples, 0.22%)</title><rect x="20.8272%" y="133" width="0.2184%" height="15" fill="rgb(235,182,43)" fg:x="55217" fg:w="579"/><text x="21.0772%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.02%)</title><rect x="21.0301%" y="117" width="0.0155%" height="15" fill="rgb(242,16,51)" fg:x="55755" fg:w="41"/><text x="21.2801%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (52 samples, 0.02%)</title><rect x="21.0456%" y="149" width="0.0196%" height="15" fill="rgb(248,9,4)" fg:x="55796" fg:w="52"/><text x="21.2956%" y="159.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,021 samples, 0.39%)</title><rect x="20.6823%" y="165" width="0.3851%" height="15" fill="rgb(210,31,22)" fg:x="54833" fg:w="1021"/><text x="20.9323%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$free (46 samples, 0.02%)</title><rect x="21.0674%" y="165" width="0.0174%" height="15" fill="rgb(239,54,39)" fg:x="55854" fg:w="46"/><text x="21.3174%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (36 samples, 0.01%)</title><rect x="21.0848%" y="165" width="0.0136%" height="15" fill="rgb(230,99,41)" fg:x="55900" fg:w="36"/><text x="21.3348%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (45 samples, 0.02%)</title><rect x="21.0984%" y="165" width="0.0170%" height="15" fill="rgb(253,106,12)" fg:x="55936" fg:w="45"/><text x="21.3484%" y="175.50"></text></g><g><title>gj`__rdl_alloc (27 samples, 0.01%)</title><rect x="21.1236%" y="165" width="0.0102%" height="15" fill="rgb(213,46,41)" fg:x="56003" fg:w="27"/><text x="21.3736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (52 samples, 0.02%)</title><rect x="21.1391%" y="117" width="0.0196%" height="15" fill="rgb(215,133,35)" fg:x="56044" fg:w="52"/><text x="21.3891%" y="127.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (55 samples, 0.02%)</title><rect x="21.1384%" y="149" width="0.0207%" height="15" fill="rgb(213,28,5)" fg:x="56042" fg:w="55"/><text x="21.3884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (54 samples, 0.02%)</title><rect x="21.1387%" y="133" width="0.0204%" height="15" fill="rgb(215,77,49)" fg:x="56043" fg:w="54"/><text x="21.3887%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (69 samples, 0.03%)</title><rect x="21.1338%" y="165" width="0.0260%" height="15" fill="rgb(248,100,22)" fg:x="56030" fg:w="69"/><text x="21.3838%" y="175.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (40 samples, 0.02%)</title><rect x="21.1602%" y="165" width="0.0151%" height="15" fill="rgb(208,67,9)" fg:x="56100" fg:w="40"/><text x="21.4102%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (44 samples, 0.02%)</title><rect x="21.3752%" y="117" width="0.0166%" height="15" fill="rgb(219,133,21)" fg:x="56670" fg:w="44"/><text x="21.6252%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (149 samples, 0.06%)</title><rect x="21.5536%" y="85" width="0.0562%" height="15" fill="rgb(246,46,29)" fg:x="57143" fg:w="149"/><text x="21.8036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (481 samples, 0.18%)</title><rect x="21.4363%" y="101" width="0.1814%" height="15" fill="rgb(246,185,52)" fg:x="56832" fg:w="481"/><text x="21.6863%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (909 samples, 0.34%)</title><rect x="21.2911%" y="133" width="0.3429%" height="15" fill="rgb(252,136,11)" fg:x="56447" fg:w="909"/><text x="21.5411%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (642 samples, 0.24%)</title><rect x="21.3918%" y="117" width="0.2422%" height="15" fill="rgb(219,138,53)" fg:x="56714" fg:w="642"/><text x="21.6418%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (43 samples, 0.02%)</title><rect x="21.6178%" y="101" width="0.0162%" height="15" fill="rgb(211,51,23)" fg:x="57313" fg:w="43"/><text x="21.8678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (59 samples, 0.02%)</title><rect x="21.6340%" y="133" width="0.0223%" height="15" fill="rgb(247,221,28)" fg:x="57356" fg:w="59"/><text x="21.8840%" y="143.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,036 samples, 0.39%)</title><rect x="21.2662%" y="149" width="0.3908%" height="15" fill="rgb(251,222,45)" fg:x="56381" fg:w="1036"/><text x="21.5162%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$free (34 samples, 0.01%)</title><rect x="21.6570%" y="149" width="0.0128%" height="15" fill="rgb(217,162,53)" fg:x="57417" fg:w="34"/><text x="21.9070%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$malloc (36 samples, 0.01%)</title><rect x="21.6698%" y="149" width="0.0136%" height="15" fill="rgb(229,93,14)" fg:x="57451" fg:w="36"/><text x="21.9198%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (63 samples, 0.02%)</title><rect x="21.6834%" y="149" width="0.0238%" height="15" fill="rgb(209,67,49)" fg:x="57487" fg:w="63"/><text x="21.9334%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (31 samples, 0.01%)</title><rect x="21.7072%" y="149" width="0.0117%" height="15" fill="rgb(213,87,29)" fg:x="57550" fg:w="31"/><text x="21.9572%" y="159.50"></text></g><g><title>gj`__rdl_alloc (33 samples, 0.01%)</title><rect x="21.7188%" y="149" width="0.0124%" height="15" fill="rgb(205,151,52)" fg:x="57581" fg:w="33"/><text x="21.9688%" y="159.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (57 samples, 0.02%)</title><rect x="21.7339%" y="149" width="0.0215%" height="15" fill="rgb(253,215,39)" fg:x="57621" fg:w="57"/><text x="21.9839%" y="159.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (253 samples, 0.10%)</title><rect x="21.8384%" y="133" width="0.0954%" height="15" fill="rgb(221,220,41)" fg:x="57898" fg:w="253"/><text x="22.0884%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (96 samples, 0.04%)</title><rect x="21.9338%" y="133" width="0.0362%" height="15" fill="rgb(218,133,21)" fg:x="58151" fg:w="96"/><text x="22.1838%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (165 samples, 0.06%)</title><rect x="22.0628%" y="117" width="0.0622%" height="15" fill="rgb(221,193,43)" fg:x="58493" fg:w="165"/><text x="22.3128%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (413 samples, 0.16%)</title><rect x="21.9701%" y="133" width="0.1558%" height="15" fill="rgb(240,128,52)" fg:x="58247" fg:w="413"/><text x="22.2201%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.01%)</title><rect x="22.1258%" y="133" width="0.0106%" height="15" fill="rgb(253,114,12)" fg:x="58660" fg:w="28"/><text x="22.3758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (140 samples, 0.05%)</title><rect x="22.1364%" y="133" width="0.0528%" height="15" fill="rgb(215,223,47)" fg:x="58688" fg:w="140"/><text x="22.3864%" y="143.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,195 samples, 0.45%)</title><rect x="21.7554%" y="149" width="0.4507%" height="15" fill="rgb(248,225,23)" fg:x="57678" fg:w="1195"/><text x="22.0054%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (45 samples, 0.02%)</title><rect x="22.1892%" y="133" width="0.0170%" height="15" fill="rgb(250,108,0)" fg:x="58828" fg:w="45"/><text x="22.4392%" y="143.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (157 samples, 0.06%)</title><rect x="22.2243%" y="133" width="0.0592%" height="15" fill="rgb(228,208,7)" fg:x="58921" fg:w="157"/><text x="22.4743%" y="143.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (281 samples, 0.11%)</title><rect x="22.2062%" y="149" width="0.1060%" height="15" fill="rgb(244,45,10)" fg:x="58873" fg:w="281"/><text x="22.4562%" y="159.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (76 samples, 0.03%)</title><rect x="22.2835%" y="133" width="0.0287%" height="15" fill="rgb(207,125,25)" fg:x="59078" fg:w="76"/><text x="22.5335%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (46 samples, 0.02%)</title><rect x="22.3201%" y="149" width="0.0174%" height="15" fill="rgb(210,195,18)" fg:x="59175" fg:w="46"/><text x="22.5701%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (123 samples, 0.05%)</title><rect x="22.4212%" y="133" width="0.0464%" height="15" fill="rgb(249,80,12)" fg:x="59443" fg:w="123"/><text x="22.6712%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (346 samples, 0.13%)</title><rect x="22.3374%" y="149" width="0.1305%" height="15" fill="rgb(221,65,9)" fg:x="59221" fg:w="346"/><text x="22.5874%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (62 samples, 0.02%)</title><rect x="22.4679%" y="149" width="0.0234%" height="15" fill="rgb(235,49,36)" fg:x="59567" fg:w="62"/><text x="22.7179%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (119 samples, 0.04%)</title><rect x="22.4913%" y="149" width="0.0449%" height="15" fill="rgb(225,32,20)" fg:x="59629" fg:w="119"/><text x="22.7413%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (243 samples, 0.09%)</title><rect x="22.5438%" y="149" width="0.0917%" height="15" fill="rgb(215,141,46)" fg:x="59768" fg:w="243"/><text x="22.7938%" y="159.50"></text></g><g><title>gj`gj::join::materialize (4,113 samples, 1.55%)</title><rect x="21.1753%" y="165" width="1.5514%" height="15" fill="rgb(250,160,47)" fg:x="56140" fg:w="4113"/><text x="21.4253%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (242 samples, 0.09%)</title><rect x="22.6354%" y="149" width="0.0913%" height="15" fill="rgb(216,222,40)" fg:x="60011" fg:w="242"/><text x="22.8854%" y="159.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (242 samples, 0.09%)</title><rect x="22.7720%" y="149" width="0.0913%" height="15" fill="rgb(234,217,39)" fg:x="60373" fg:w="242"/><text x="23.0220%" y="159.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (91 samples, 0.03%)</title><rect x="22.8632%" y="149" width="0.0343%" height="15" fill="rgb(207,178,40)" fg:x="60615" fg:w="91"/><text x="23.1132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (149 samples, 0.06%)</title><rect x="22.9692%" y="133" width="0.0562%" height="15" fill="rgb(221,136,13)" fg:x="60896" fg:w="149"/><text x="23.2192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (342 samples, 0.13%)</title><rect x="22.8976%" y="149" width="0.1290%" height="15" fill="rgb(249,199,10)" fg:x="60706" fg:w="342"/><text x="23.1476%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (101 samples, 0.04%)</title><rect x="23.0337%" y="149" width="0.0381%" height="15" fill="rgb(249,222,13)" fg:x="61067" fg:w="101"/><text x="23.2837%" y="159.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (956 samples, 0.36%)</title><rect x="22.7267%" y="165" width="0.3606%" height="15" fill="rgb(244,185,38)" fg:x="60253" fg:w="956"/><text x="22.9767%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (41 samples, 0.02%)</title><rect x="23.0718%" y="149" width="0.0155%" height="15" fill="rgb(236,202,9)" fg:x="61168" fg:w="41"/><text x="23.3218%" y="159.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (135 samples, 0.05%)</title><rect x="23.1163%" y="149" width="0.0509%" height="15" fill="rgb(250,229,37)" fg:x="61286" fg:w="135"/><text x="23.3663%" y="159.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (276 samples, 0.10%)</title><rect x="23.0873%" y="165" width="0.1041%" height="15" fill="rgb(206,174,23)" fg:x="61209" fg:w="276"/><text x="23.3373%" y="175.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (64 samples, 0.02%)</title><rect x="23.1672%" y="149" width="0.0241%" height="15" fill="rgb(211,33,43)" fg:x="61421" fg:w="64"/><text x="23.4172%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.01%)</title><rect x="23.1914%" y="165" width="0.0117%" height="15" fill="rgb(245,58,50)" fg:x="61485" fg:w="31"/><text x="23.4414%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (63 samples, 0.02%)</title><rect x="23.2031%" y="165" width="0.0238%" height="15" fill="rgb(244,68,36)" fg:x="61516" fg:w="63"/><text x="23.4531%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (112 samples, 0.04%)</title><rect x="23.3340%" y="149" width="0.0422%" height="15" fill="rgb(232,229,15)" fg:x="61863" fg:w="112"/><text x="23.5840%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (397 samples, 0.15%)</title><rect x="23.2276%" y="165" width="0.1497%" height="15" fill="rgb(254,30,23)" fg:x="61581" fg:w="397"/><text x="23.4776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (68 samples, 0.03%)</title><rect x="23.3773%" y="165" width="0.0256%" height="15" fill="rgb(235,160,14)" fg:x="61978" fg:w="68"/><text x="23.6273%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (138 samples, 0.05%)</title><rect x="23.4030%" y="165" width="0.0521%" height="15" fill="rgb(212,155,44)" fg:x="62046" fg:w="138"/><text x="23.6530%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (28 samples, 0.01%)</title><rect x="23.4554%" y="165" width="0.0106%" height="15" fill="rgb(226,2,50)" fg:x="62185" fg:w="28"/><text x="23.7054%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (206 samples, 0.08%)</title><rect x="23.4660%" y="165" width="0.0777%" height="15" fill="rgb(234,177,6)" fg:x="62213" fg:w="206"/><text x="23.7160%" y="175.50"></text></g><g><title>gj`gj::join::materialize (8,184 samples, 3.09%)</title><rect x="20.5594%" y="181" width="3.0869%" height="15" fill="rgb(217,24,9)" fg:x="54507" fg:w="8184"/><text x="20.8094%" y="191.50">gj`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (272 samples, 0.10%)</title><rect x="23.5437%" y="165" width="0.1026%" height="15" fill="rgb(220,13,46)" fg:x="62419" fg:w="272"/><text x="23.7937%" y="175.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 0.01%)</title><rect x="23.6463%" y="181" width="0.0117%" height="15" fill="rgb(239,221,27)" fg:x="62691" fg:w="31"/><text x="23.8963%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (36 samples, 0.01%)</title><rect x="23.6700%" y="181" width="0.0136%" height="15" fill="rgb(222,198,25)" fg:x="62754" fg:w="36"/><text x="23.9200%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (54 samples, 0.02%)</title><rect x="23.6836%" y="181" width="0.0204%" height="15" fill="rgb(211,99,13)" fg:x="62790" fg:w="54"/><text x="23.9336%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.01%)</title><rect x="23.7040%" y="181" width="0.0109%" height="15" fill="rgb(232,111,31)" fg:x="62844" fg:w="29"/><text x="23.9540%" y="191.50"></text></g><g><title>gj`gj::join::materialize (8,604 samples, 3.25%)</title><rect x="20.4779%" y="197" width="3.2453%" height="15" fill="rgb(245,82,37)" fg:x="54291" fg:w="8604"/><text x="20.7279%" y="207.50">gj`..</text></g><g><title>gj`gj::join::materialize (8,685 samples, 3.28%)</title><rect x="20.4564%" y="213" width="3.2759%" height="15" fill="rgb(227,149,46)" fg:x="54234" fg:w="8685"/><text x="20.7064%" y="223.50">gj`..</text></g><g><title>gj`gj::join::materialize (8,715 samples, 3.29%)</title><rect x="20.4473%" y="229" width="3.2872%" height="15" fill="rgb(218,36,50)" fg:x="54210" fg:w="8715"/><text x="20.6973%" y="239.50">gj`..</text></g><g><title>gj`gj::join::bushy_join_inner (14,139 samples, 5.33%)</title><rect x="18.4162%" y="245" width="5.3331%" height="15" fill="rgb(226,80,48)" fg:x="48825" fg:w="14139"/><text x="18.6662%" y="255.50">gj`gj::..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (71 samples, 0.03%)</title><rect x="23.8236%" y="165" width="0.0268%" height="15" fill="rgb(238,224,15)" fg:x="63161" fg:w="71"/><text x="24.0736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (27 samples, 0.01%)</title><rect x="23.8401%" y="149" width="0.0102%" height="15" fill="rgb(241,136,10)" fg:x="63205" fg:w="27"/><text x="24.0901%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.04%)</title><rect x="23.8073%" y="197" width="0.0445%" height="15" fill="rgb(208,32,45)" fg:x="63118" fg:w="118"/><text x="24.0573%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (92 samples, 0.03%)</title><rect x="23.8171%" y="181" width="0.0347%" height="15" fill="rgb(207,135,9)" fg:x="63144" fg:w="92"/><text x="24.0671%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (132 samples, 0.05%)</title><rect x="23.8062%" y="213" width="0.0498%" height="15" fill="rgb(206,86,44)" fg:x="63115" fg:w="132"/><text x="24.0562%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (178 samples, 0.07%)</title><rect x="23.7915%" y="229" width="0.0671%" height="15" fill="rgb(245,177,15)" fg:x="63076" fg:w="178"/><text x="24.0415%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (96 samples, 0.04%)</title><rect x="23.9612%" y="133" width="0.0362%" height="15" fill="rgb(206,64,50)" fg:x="63526" fg:w="96"/><text x="24.2112%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.02%)</title><rect x="24.0016%" y="117" width="0.0155%" height="15" fill="rgb(234,36,40)" fg:x="63633" fg:w="41"/><text x="24.2516%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (56 samples, 0.02%)</title><rect x="23.9974%" y="133" width="0.0211%" height="15" fill="rgb(213,64,8)" fg:x="63622" fg:w="56"/><text x="24.2474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (216 samples, 0.08%)</title><rect x="23.9499%" y="149" width="0.0815%" height="15" fill="rgb(210,75,36)" fg:x="63496" fg:w="216"/><text x="24.1999%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (34 samples, 0.01%)</title><rect x="24.0186%" y="133" width="0.0128%" height="15" fill="rgb(229,88,21)" fg:x="63678" fg:w="34"/><text x="24.2686%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (293 samples, 0.11%)</title><rect x="23.9220%" y="165" width="0.1105%" height="15" fill="rgb(252,204,47)" fg:x="63422" fg:w="293"/><text x="24.1720%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (34 samples, 0.01%)</title><rect x="24.0325%" y="165" width="0.0128%" height="15" fill="rgb(208,77,27)" fg:x="63715" fg:w="34"/><text x="24.2825%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (369 samples, 0.14%)</title><rect x="23.9080%" y="197" width="0.1392%" height="15" fill="rgb(221,76,26)" fg:x="63385" fg:w="369"/><text x="24.1580%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (356 samples, 0.13%)</title><rect x="23.9129%" y="181" width="0.1343%" height="15" fill="rgb(225,139,18)" fg:x="63398" fg:w="356"/><text x="24.1629%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (407 samples, 0.15%)</title><rect x="23.8979%" y="213" width="0.1535%" height="15" fill="rgb(230,137,11)" fg:x="63358" fg:w="407"/><text x="24.1479%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (84 samples, 0.03%)</title><rect x="24.2592%" y="149" width="0.0317%" height="15" fill="rgb(212,28,1)" fg:x="64316" fg:w="84"/><text x="24.5092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (182 samples, 0.07%)</title><rect x="24.2264%" y="181" width="0.0686%" height="15" fill="rgb(248,164,17)" fg:x="64229" fg:w="182"/><text x="24.4764%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (118 samples, 0.04%)</title><rect x="24.2505%" y="165" width="0.0445%" height="15" fill="rgb(222,171,42)" fg:x="64293" fg:w="118"/><text x="24.5005%" y="175.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (397 samples, 0.15%)</title><rect x="24.1498%" y="197" width="0.1497%" height="15" fill="rgb(243,84,45)" fg:x="64026" fg:w="397"/><text x="24.3998%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$free (192 samples, 0.07%)</title><rect x="24.2996%" y="197" width="0.0724%" height="15" fill="rgb(252,49,23)" fg:x="64423" fg:w="192"/><text x="24.5496%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (41 samples, 0.02%)</title><rect x="24.4655%" y="101" width="0.0155%" height="15" fill="rgb(215,19,7)" fg:x="64863" fg:w="41"/><text x="24.7155%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (64 samples, 0.02%)</title><rect x="24.4595%" y="117" width="0.0241%" height="15" fill="rgb(238,81,41)" fg:x="64847" fg:w="64"/><text x="24.7095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (140 samples, 0.05%)</title><rect x="24.4395%" y="133" width="0.0528%" height="15" fill="rgb(210,199,37)" fg:x="64794" fg:w="140"/><text x="24.6895%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (230 samples, 0.09%)</title><rect x="24.4123%" y="149" width="0.0868%" height="15" fill="rgb(244,192,49)" fg:x="64722" fg:w="230"/><text x="24.6623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (36 samples, 0.01%)</title><rect x="24.4991%" y="149" width="0.0136%" height="15" fill="rgb(226,211,11)" fg:x="64952" fg:w="36"/><text x="24.7491%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (339 samples, 0.13%)</title><rect x="24.3890%" y="181" width="0.1279%" height="15" fill="rgb(236,162,54)" fg:x="64660" fg:w="339"/><text x="24.6390%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (314 samples, 0.12%)</title><rect x="24.3984%" y="165" width="0.1184%" height="15" fill="rgb(220,229,9)" fg:x="64685" fg:w="314"/><text x="24.6484%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (369 samples, 0.14%)</title><rect x="24.3818%" y="197" width="0.1392%" height="15" fill="rgb(250,87,22)" fg:x="64641" fg:w="369"/><text x="24.6318%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (270 samples, 0.10%)</title><rect x="25.7084%" y="149" width="0.1018%" height="15" fill="rgb(239,43,17)" fg:x="68158" fg:w="270"/><text x="25.9584%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (841 samples, 0.32%)</title><rect x="26.7882%" y="117" width="0.3172%" height="15" fill="rgb(231,177,25)" fg:x="71021" fg:w="841"/><text x="27.0382%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2,924 samples, 1.10%)</title><rect x="26.0769%" y="133" width="1.1029%" height="15" fill="rgb(219,179,1)" fg:x="69135" fg:w="2924"/><text x="26.3269%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (197 samples, 0.07%)</title><rect x="27.1055%" y="117" width="0.0743%" height="15" fill="rgb(238,219,53)" fg:x="71862" fg:w="197"/><text x="27.3555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5,413 samples, 2.04%)</title><rect x="25.2301%" y="165" width="2.0417%" height="15" fill="rgb(232,167,36)" fg:x="66890" fg:w="5413"/><text x="25.4801%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,875 samples, 1.46%)</title><rect x="25.8102%" y="149" width="1.4616%" height="15" fill="rgb(244,19,51)" fg:x="68428" fg:w="3875"/><text x="26.0602%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (244 samples, 0.09%)</title><rect x="27.1798%" y="133" width="0.0920%" height="15" fill="rgb(224,6,22)" fg:x="72059" fg:w="244"/><text x="27.4298%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (383 samples, 0.14%)</title><rect x="27.2718%" y="165" width="0.1445%" height="15" fill="rgb(224,145,5)" fg:x="72303" fg:w="383"/><text x="27.5218%" y="175.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,249 samples, 2.36%)</title><rect x="25.0702%" y="181" width="2.3570%" height="15" fill="rgb(234,130,49)" fg:x="66466" fg:w="6249"/><text x="25.3202%" y="191.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.01%)</title><rect x="27.4163%" y="165" width="0.0109%" height="15" fill="rgb(254,6,2)" fg:x="72686" fg:w="29"/><text x="27.6663%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$free (127 samples, 0.05%)</title><rect x="27.4272%" y="181" width="0.0479%" height="15" fill="rgb(208,96,46)" fg:x="72715" fg:w="127"/><text x="27.6772%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (227 samples, 0.09%)</title><rect x="27.4751%" y="181" width="0.0856%" height="15" fill="rgb(239,3,39)" fg:x="72842" fg:w="227"/><text x="27.7251%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (257 samples, 0.10%)</title><rect x="27.5607%" y="181" width="0.0969%" height="15" fill="rgb(233,210,1)" fg:x="73069" fg:w="257"/><text x="27.8107%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (186 samples, 0.07%)</title><rect x="27.6577%" y="181" width="0.0702%" height="15" fill="rgb(244,137,37)" fg:x="73326" fg:w="186"/><text x="27.9077%" y="191.50"></text></g><g><title>gj`__rdl_alloc (190 samples, 0.07%)</title><rect x="27.7278%" y="181" width="0.0717%" height="15" fill="rgb(240,136,2)" fg:x="73512" fg:w="190"/><text x="27.9778%" y="191.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (286 samples, 0.11%)</title><rect x="27.8089%" y="181" width="0.1079%" height="15" fill="rgb(239,18,37)" fg:x="73727" fg:w="286"/><text x="28.0589%" y="191.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (941 samples, 0.35%)</title><rect x="28.0288%" y="165" width="0.3549%" height="15" fill="rgb(218,185,22)" fg:x="74310" fg:w="941"/><text x="28.2788%" y="175.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (389 samples, 0.15%)</title><rect x="28.3838%" y="165" width="0.1467%" height="15" fill="rgb(225,218,4)" fg:x="75251" fg:w="389"/><text x="28.6338%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (619 samples, 0.23%)</title><rect x="28.8590%" y="149" width="0.2335%" height="15" fill="rgb(230,182,32)" fg:x="76511" fg:w="619"/><text x="29.1090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1,496 samples, 0.56%)</title><rect x="28.5305%" y="165" width="0.5643%" height="15" fill="rgb(242,56,43)" fg:x="75640" fg:w="1496"/><text x="28.7805%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (83 samples, 0.03%)</title><rect x="29.0947%" y="165" width="0.0313%" height="15" fill="rgb(233,99,24)" fg:x="77136" fg:w="83"/><text x="29.3447%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (434 samples, 0.16%)</title><rect x="29.1261%" y="165" width="0.1637%" height="15" fill="rgb(234,209,42)" fg:x="77219" fg:w="434"/><text x="29.3761%" y="175.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,772 samples, 1.42%)</title><rect x="27.9168%" y="181" width="1.4228%" height="15" fill="rgb(227,7,12)" fg:x="74013" fg:w="3772"/><text x="28.1668%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (132 samples, 0.05%)</title><rect x="29.2898%" y="165" width="0.0498%" height="15" fill="rgb(245,203,43)" fg:x="77653" fg:w="132"/><text x="29.5398%" y="175.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,358 samples, 0.51%)</title><rect x="29.4844%" y="165" width="0.5122%" height="15" fill="rgb(238,205,33)" fg:x="78169" fg:w="1358"/><text x="29.7344%" y="175.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,308 samples, 0.87%)</title><rect x="29.3395%" y="181" width="0.8705%" height="15" fill="rgb(231,56,7)" fg:x="77785" fg:w="2308"/><text x="29.5895%" y="191.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (566 samples, 0.21%)</title><rect x="29.9966%" y="165" width="0.2135%" height="15" fill="rgb(244,186,29)" fg:x="79527" fg:w="566"/><text x="30.2466%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (178 samples, 0.07%)</title><rect x="30.2101%" y="181" width="0.0671%" height="15" fill="rgb(234,111,31)" fg:x="80093" fg:w="178"/><text x="30.4601%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (151 samples, 0.06%)</title><rect x="30.2772%" y="181" width="0.0570%" height="15" fill="rgb(241,149,10)" fg:x="80271" fg:w="151"/><text x="30.5272%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1,136 samples, 0.43%)</title><rect x="30.9977%" y="165" width="0.4285%" height="15" fill="rgb(249,206,44)" fg:x="82181" fg:w="1136"/><text x="31.2477%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2,909 samples, 1.10%)</title><rect x="30.3342%" y="181" width="1.0972%" height="15" fill="rgb(251,153,30)" fg:x="80422" fg:w="2909"/><text x="30.5842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (224 samples, 0.08%)</title><rect x="31.4341%" y="181" width="0.0845%" height="15" fill="rgb(239,152,38)" fg:x="83338" fg:w="224"/><text x="31.6841%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (786 samples, 0.30%)</title><rect x="31.5186%" y="181" width="0.2965%" height="15" fill="rgb(249,139,47)" fg:x="83562" fg:w="786"/><text x="31.7686%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (289 samples, 0.11%)</title><rect x="31.8150%" y="181" width="0.1090%" height="15" fill="rgb(244,64,35)" fg:x="84348" fg:w="289"/><text x="32.0650%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,644 samples, 0.62%)</title><rect x="31.9240%" y="181" width="0.6201%" height="15" fill="rgb(216,46,15)" fg:x="84637" fg:w="1644"/><text x="32.1740%" y="191.50"></text></g><g><title>gj`gj::join::materialize (22,236 samples, 8.39%)</title><rect x="24.5278%" y="197" width="8.3871%" height="15" fill="rgb(250,74,19)" fg:x="65028" fg:w="22236"/><text x="24.7778%" y="207.50">gj`gj::join:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (983 samples, 0.37%)</title><rect x="32.5441%" y="181" width="0.3708%" height="15" fill="rgb(249,42,33)" fg:x="86281" fg:w="983"/><text x="32.7941%" y="191.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (50 samples, 0.02%)</title><rect x="32.9692%" y="181" width="0.0189%" height="15" fill="rgb(242,149,17)" fg:x="87408" fg:w="50"/><text x="33.2192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (67 samples, 0.03%)</title><rect x="32.9960%" y="181" width="0.0253%" height="15" fill="rgb(244,29,21)" fg:x="87479" fg:w="67"/><text x="33.2460%" y="191.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (311 samples, 0.12%)</title><rect x="32.9149%" y="197" width="0.1173%" height="15" fill="rgb(220,130,37)" fg:x="87264" fg:w="311"/><text x="33.1649%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (53 samples, 0.02%)</title><rect x="33.1024%" y="181" width="0.0200%" height="15" fill="rgb(211,67,2)" fg:x="87761" fg:w="53"/><text x="33.3524%" y="191.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (250 samples, 0.09%)</title><rect x="33.0322%" y="197" width="0.0943%" height="15" fill="rgb(235,68,52)" fg:x="87575" fg:w="250"/><text x="33.2822%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (83 samples, 0.03%)</title><rect x="33.1424%" y="165" width="0.0313%" height="15" fill="rgb(246,142,3)" fg:x="87867" fg:w="83"/><text x="33.3924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (126 samples, 0.05%)</title><rect x="33.1265%" y="197" width="0.0475%" height="15" fill="rgb(241,25,7)" fg:x="87825" fg:w="126"/><text x="33.3765%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (93 samples, 0.04%)</title><rect x="33.1390%" y="181" width="0.0351%" height="15" fill="rgb(242,119,39)" fg:x="87858" fg:w="93"/><text x="33.3890%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (235 samples, 0.09%)</title><rect x="33.1740%" y="197" width="0.0886%" height="15" fill="rgb(241,98,45)" fg:x="87951" fg:w="235"/><text x="33.4240%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (505 samples, 0.19%)</title><rect x="33.2661%" y="197" width="0.1905%" height="15" fill="rgb(254,28,30)" fg:x="88195" fg:w="505"/><text x="33.5161%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (59 samples, 0.02%)</title><rect x="33.4343%" y="181" width="0.0223%" height="15" fill="rgb(241,142,54)" fg:x="88641" fg:w="59"/><text x="33.6843%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (244 samples, 0.09%)</title><rect x="33.4565%" y="197" width="0.0920%" height="15" fill="rgb(222,85,15)" fg:x="88700" fg:w="244"/><text x="33.7065%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (242 samples, 0.09%)</title><rect x="33.5486%" y="197" width="0.0913%" height="15" fill="rgb(210,85,47)" fg:x="88944" fg:w="242"/><text x="33.7986%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (67 samples, 0.03%)</title><rect x="33.6493%" y="197" width="0.0253%" height="15" fill="rgb(224,206,25)" fg:x="89211" fg:w="67"/><text x="33.8993%" y="207.50"></text></g><g><title>gj`gj::join::materialize (25,520 samples, 9.63%)</title><rect x="24.0570%" y="213" width="9.6258%" height="15" fill="rgb(243,201,19)" fg:x="63780" fg:w="25520"/><text x="24.3070%" y="223.50">gj`gj::join::m..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (62 samples, 0.02%)</title><rect x="33.7040%" y="181" width="0.0234%" height="15" fill="rgb(236,59,4)" fg:x="89356" fg:w="62"/><text x="33.9540%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (106 samples, 0.04%)</title><rect x="33.6889%" y="213" width="0.0400%" height="15" fill="rgb(254,179,45)" fg:x="89316" fg:w="106"/><text x="33.9389%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (75 samples, 0.03%)</title><rect x="33.7006%" y="197" width="0.0283%" height="15" fill="rgb(226,14,10)" fg:x="89347" fg:w="75"/><text x="33.9506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (116 samples, 0.04%)</title><rect x="33.7376%" y="213" width="0.0438%" height="15" fill="rgb(244,27,41)" fg:x="89445" fg:w="116"/><text x="33.9876%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (39 samples, 0.01%)</title><rect x="33.7666%" y="197" width="0.0147%" height="15" fill="rgb(235,35,32)" fg:x="89522" fg:w="39"/><text x="34.0166%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.02%)</title><rect x="33.7885%" y="213" width="0.0158%" height="15" fill="rgb(218,68,31)" fg:x="89580" fg:w="42"/><text x="34.0385%" y="223.50"></text></g><g><title>gj`gj::join::materialize (26,388 samples, 9.95%)</title><rect x="23.8628%" y="229" width="9.9532%" height="15" fill="rgb(207,120,37)" fg:x="63265" fg:w="26388"/><text x="24.1128%" y="239.50">gj`gj::join::m..</text></g><g><title>libsystem_malloc.dylib`free (101 samples, 0.04%)</title><rect x="33.8194%" y="229" width="0.0381%" height="15" fill="rgb(227,98,0)" fg:x="89662" fg:w="101"/><text x="34.0694%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (35 samples, 0.01%)</title><rect x="33.8443%" y="213" width="0.0132%" height="15" fill="rgb(207,7,3)" fg:x="89728" fg:w="35"/><text x="34.0943%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (42 samples, 0.02%)</title><rect x="33.8639%" y="229" width="0.0158%" height="15" fill="rgb(206,98,19)" fg:x="89780" fg:w="42"/><text x="34.1139%" y="239.50"></text></g><g><title>gj`gj::join::materialize (26,879 samples, 10.14%)</title><rect x="23.7492%" y="245" width="10.1384%" height="15" fill="rgb(217,5,26)" fg:x="62964" fg:w="26879"/><text x="23.9992%" y="255.50">gj`gj::join::ma..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (53 samples, 0.02%)</title><rect x="34.4727%" y="197" width="0.0200%" height="15" fill="rgb(235,190,38)" fg:x="91394" fg:w="53"/><text x="34.7227%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (147 samples, 0.06%)</title><rect x="34.4395%" y="213" width="0.0554%" height="15" fill="rgb(247,86,24)" fg:x="91306" fg:w="147"/><text x="34.6895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,628 samples, 0.61%)</title><rect x="33.8877%" y="245" width="0.6141%" height="15" fill="rgb(205,101,16)" fg:x="89843" fg:w="1628"/><text x="34.1377%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (207 samples, 0.08%)</title><rect x="34.4237%" y="229" width="0.0781%" height="15" fill="rgb(246,168,33)" fg:x="91264" fg:w="207"/><text x="34.6737%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (310 samples, 0.12%)</title><rect x="34.5153%" y="245" width="0.1169%" height="15" fill="rgb(231,114,1)" fg:x="91507" fg:w="310"/><text x="34.7653%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (116 samples, 0.04%)</title><rect x="34.5885%" y="229" width="0.0438%" height="15" fill="rgb(207,184,53)" fg:x="91701" fg:w="116"/><text x="34.8385%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (36 samples, 0.01%)</title><rect x="34.6322%" y="245" width="0.0136%" height="15" fill="rgb(224,95,51)" fg:x="91817" fg:w="36"/><text x="34.8822%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (895 samples, 0.34%)</title><rect x="34.6458%" y="245" width="0.3376%" height="15" fill="rgb(212,188,45)" fg:x="91853" fg:w="895"/><text x="34.8958%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (72 samples, 0.03%)</title><rect x="34.9834%" y="245" width="0.0272%" height="15" fill="rgb(223,154,38)" fg:x="92748" fg:w="72"/><text x="35.2334%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (46 samples, 0.02%)</title><rect x="35.0106%" y="245" width="0.0174%" height="15" fill="rgb(251,22,52)" fg:x="92820" fg:w="46"/><text x="35.2606%" y="255.50"></text></g><g><title>gj`gj::join::bushy_join_inner (47,967 samples, 18.09%)</title><rect x="16.9380%" y="261" width="18.0926%" height="15" fill="rgb(229,209,22)" fg:x="44906" fg:w="47967"/><text x="17.1880%" y="271.50">gj`gj::join::bushy_join_inner</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (72 samples, 0.03%)</title><rect x="35.3983%" y="245" width="0.0272%" height="15" fill="rgb(234,138,34)" fg:x="93848" fg:w="72"/><text x="35.6483%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (215 samples, 0.08%)</title><rect x="35.6586%" y="213" width="0.0811%" height="15" fill="rgb(212,95,11)" fg:x="94538" fg:w="215"/><text x="35.9086%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (707 samples, 0.27%)</title><rect x="35.4869%" y="229" width="0.2667%" height="15" fill="rgb(240,179,47)" fg:x="94083" fg:w="707"/><text x="35.7369%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (37 samples, 0.01%)</title><rect x="35.7397%" y="213" width="0.0140%" height="15" fill="rgb(240,163,11)" fg:x="94753" fg:w="37"/><text x="35.9897%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (88 samples, 0.03%)</title><rect x="35.7536%" y="229" width="0.0332%" height="15" fill="rgb(236,37,12)" fg:x="94790" fg:w="88"/><text x="36.0036%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,003 samples, 0.76%)</title><rect x="35.0317%" y="261" width="0.7555%" height="15" fill="rgb(232,164,16)" fg:x="92876" fg:w="2003"/><text x="35.2817%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (959 samples, 0.36%)</title><rect x="35.4255%" y="245" width="0.3617%" height="15" fill="rgb(244,205,15)" fg:x="93920" fg:w="959"/><text x="35.6755%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (97 samples, 0.04%)</title><rect x="35.7970%" y="261" width="0.0366%" height="15" fill="rgb(223,117,47)" fg:x="94905" fg:w="97"/><text x="36.0470%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1,563 samples, 0.59%)</title><rect x="37.4513%" y="245" width="0.5895%" height="15" fill="rgb(244,107,35)" fg:x="99291" fg:w="1563"/><text x="37.7013%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (5,857 samples, 2.21%)</title><rect x="35.8336%" y="261" width="2.2092%" height="15" fill="rgb(205,140,8)" fg:x="95002" fg:w="5857"/><text x="36.0836%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (188 samples, 0.07%)</title><rect x="38.0428%" y="261" width="0.0709%" height="15" fill="rgb(228,84,46)" fg:x="100859" fg:w="188"/><text x="38.2928%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,795 samples, 0.68%)</title><rect x="38.1137%" y="261" width="0.6771%" height="15" fill="rgb(254,188,9)" fg:x="101047" fg:w="1795"/><text x="38.3637%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (173 samples, 0.07%)</title><rect x="38.7907%" y="261" width="0.0653%" height="15" fill="rgb(206,112,54)" fg:x="102842" fg:w="173"/><text x="39.0407%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (383 samples, 0.14%)</title><rect x="38.8560%" y="261" width="0.1445%" height="15" fill="rgb(216,84,49)" fg:x="103015" fg:w="383"/><text x="39.1060%" y="271.50"></text></g><g><title>gj`gj::join::bushy_join_inner (68,884 samples, 25.98%)</title><rect x="13.0432%" y="277" width="25.9822%" height="15" fill="rgb(214,194,35)" fg:x="34580" fg:w="68884"/><text x="13.2932%" y="287.50">gj`gj::join::bushy_join_inner</text></g><g><title>libsystem_platform.dylib`_platform_memmove (66 samples, 0.02%)</title><rect x="39.0005%" y="261" width="0.0249%" height="15" fill="rgb(249,28,3)" fg:x="103398" fg:w="66"/><text x="39.2505%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (201 samples, 0.08%)</title><rect x="39.5044%" y="261" width="0.0758%" height="15" fill="rgb(222,56,52)" fg:x="104734" fg:w="201"/><text x="39.7544%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memset (218 samples, 0.08%)</title><rect x="39.5802%" y="261" width="0.0822%" height="15" fill="rgb(245,217,50)" fg:x="104935" fg:w="218"/><text x="39.8302%" y="271.50"></text></g><g><title>gj`__rdl_alloc (160 samples, 0.06%)</title><rect x="39.6624%" y="261" width="0.0604%" height="15" fill="rgb(213,201,24)" fg:x="105153" fg:w="160"/><text x="39.9124%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (115 samples, 0.04%)</title><rect x="39.8140%" y="197" width="0.0434%" height="15" fill="rgb(248,116,28)" fg:x="105555" fg:w="115"/><text x="40.0640%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.01%)</title><rect x="39.8450%" y="181" width="0.0124%" height="15" fill="rgb(219,72,43)" fg:x="105637" fg:w="33"/><text x="40.0950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (215 samples, 0.08%)</title><rect x="39.7805%" y="229" width="0.0811%" height="15" fill="rgb(209,138,14)" fg:x="105466" fg:w="215"/><text x="40.0305%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (158 samples, 0.06%)</title><rect x="39.8020%" y="213" width="0.0596%" height="15" fill="rgb(222,18,33)" fg:x="105523" fg:w="158"/><text x="40.0520%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (257 samples, 0.10%)</title><rect x="39.7741%" y="245" width="0.0969%" height="15" fill="rgb(213,199,7)" fg:x="105449" fg:w="257"/><text x="40.0241%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (404 samples, 0.15%)</title><rect x="39.7228%" y="261" width="0.1524%" height="15" fill="rgb(250,110,10)" fg:x="105313" fg:w="404"/><text x="39.9728%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (100 samples, 0.04%)</title><rect x="41.0075%" y="229" width="0.0377%" height="15" fill="rgb(248,123,6)" fg:x="108719" fg:w="100"/><text x="41.2575%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2,059 samples, 0.78%)</title><rect x="41.2896%" y="213" width="0.7766%" height="15" fill="rgb(206,91,31)" fg:x="109467" fg:w="2059"/><text x="41.5396%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (534 samples, 0.20%)</title><rect x="41.8648%" y="197" width="0.2014%" height="15" fill="rgb(211,154,13)" fg:x="110992" fg:w="534"/><text x="42.1148%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4,275 samples, 1.61%)</title><rect x="40.5469%" y="245" width="1.6125%" height="15" fill="rgb(225,148,7)" fg:x="107498" fg:w="4275"/><text x="40.7969%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,954 samples, 1.11%)</title><rect x="41.0452%" y="229" width="1.1142%" height="15" fill="rgb(220,160,43)" fg:x="108819" fg:w="2954"/><text x="41.2952%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (247 samples, 0.09%)</title><rect x="42.0662%" y="213" width="0.0932%" height="15" fill="rgb(213,52,39)" fg:x="111526" fg:w="247"/><text x="42.3162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (330 samples, 0.12%)</title><rect x="42.1594%" y="245" width="0.1245%" height="15" fill="rgb(243,137,7)" fg:x="111773" fg:w="330"/><text x="42.4094%" y="255.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6,439 samples, 2.43%)</title><rect x="39.8801%" y="261" width="2.4287%" height="15" fill="rgb(230,79,13)" fg:x="105730" fg:w="6439"/><text x="40.1301%" y="271.50">gj..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (66 samples, 0.02%)</title><rect x="42.2839%" y="245" width="0.0249%" height="15" fill="rgb(247,105,23)" fg:x="112103" fg:w="66"/><text x="42.5339%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (139 samples, 0.05%)</title><rect x="42.3088%" y="261" width="0.0524%" height="15" fill="rgb(223,179,41)" fg:x="112169" fg:w="139"/><text x="42.5588%" y="271.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (9,662 samples, 3.64%)</title><rect x="39.0253%" y="277" width="3.6444%" height="15" fill="rgb(218,9,34)" fg:x="103464" fg:w="9662"/><text x="39.2753%" y="287.50">gj`g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (818 samples, 0.31%)</title><rect x="42.3612%" y="261" width="0.3085%" height="15" fill="rgb(222,106,8)" fg:x="112308" fg:w="818"/><text x="42.6112%" y="271.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (873 samples, 0.33%)</title><rect x="42.6697%" y="277" width="0.3293%" height="15" fill="rgb(211,220,0)" fg:x="113126" fg:w="873"/><text x="42.9197%" y="287.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (269 samples, 0.10%)</title><rect x="42.9990%" y="277" width="0.1015%" height="15" fill="rgb(229,52,16)" fg:x="113999" fg:w="269"/><text x="43.2490%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (126 samples, 0.05%)</title><rect x="43.4007%" y="261" width="0.0475%" height="15" fill="rgb(212,155,18)" fg:x="115064" fg:w="126"/><text x="43.6507%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (284 samples, 0.11%)</title><rect x="43.8134%" y="229" width="0.1071%" height="15" fill="rgb(242,21,14)" fg:x="116158" fg:w="284"/><text x="44.0634%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,006 samples, 0.38%)</title><rect x="43.5520%" y="245" width="0.3795%" height="15" fill="rgb(222,19,48)" fg:x="115465" fg:w="1006"/><text x="43.8020%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.01%)</title><rect x="43.9205%" y="229" width="0.0109%" height="15" fill="rgb(232,45,27)" fg:x="116442" fg:w="29"/><text x="44.1705%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,310 samples, 0.87%)</title><rect x="43.1005%" y="277" width="0.8713%" height="15" fill="rgb(249,103,42)" fg:x="114268" fg:w="2310"/><text x="43.3505%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,388 samples, 0.52%)</title><rect x="43.4482%" y="261" width="0.5235%" height="15" fill="rgb(246,81,33)" fg:x="115190" fg:w="1388"/><text x="43.6982%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (107 samples, 0.04%)</title><rect x="43.9314%" y="245" width="0.0404%" height="15" fill="rgb(252,33,42)" fg:x="116471" fg:w="107"/><text x="44.1814%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (527 samples, 0.20%)</title><rect x="43.9718%" y="277" width="0.1988%" height="15" fill="rgb(209,212,41)" fg:x="116578" fg:w="527"/><text x="44.2218%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (152 samples, 0.06%)</title><rect x="44.1706%" y="277" width="0.0573%" height="15" fill="rgb(207,154,6)" fg:x="117105" fg:w="152"/><text x="44.4206%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1,908 samples, 0.72%)</title><rect x="45.4636%" y="261" width="0.7197%" height="15" fill="rgb(223,64,47)" fg:x="120533" fg:w="1908"/><text x="45.7136%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (5,194 samples, 1.96%)</title><rect x="44.2279%" y="277" width="1.9591%" height="15" fill="rgb(211,161,38)" fg:x="117257" fg:w="5194"/><text x="44.4779%" y="287.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (646 samples, 0.24%)</title><rect x="46.1870%" y="277" width="0.2437%" height="15" fill="rgb(219,138,40)" fg:x="122451" fg:w="646"/><text x="46.4370%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3,294 samples, 1.24%)</title><rect x="46.4307%" y="277" width="1.2425%" height="15" fill="rgb(241,228,46)" fg:x="123097" fg:w="3294"/><text x="46.6807%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (406 samples, 0.15%)</title><rect x="47.6758%" y="277" width="0.1531%" height="15" fill="rgb(223,209,38)" fg:x="126398" fg:w="406"/><text x="47.9258%" y="287.50"></text></g><g><title>gj`gj::join::bushy_join (104,014 samples, 39.23%)</title><rect x="8.7496%" y="293" width="39.2328%" height="15" fill="rgb(236,164,45)" fg:x="23197" fg:w="104014"/><text x="8.9996%" y="303.50">gj`gj::join::bushy_join</text></g><g><title>libsystem_platform.dylib`_platform_memmove (407 samples, 0.15%)</title><rect x="47.8289%" y="277" width="0.1535%" height="15" fill="rgb(231,15,5)" fg:x="126804" fg:w="407"/><text x="48.0789%" y="287.50"></text></g><g><title>gj`gj::join::bushy_join_inner (578 samples, 0.22%)</title><rect x="47.9824%" y="293" width="0.2180%" height="15" fill="rgb(252,35,15)" fg:x="127211" fg:w="578"/><text x="48.2324%" y="303.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (898 samples, 0.34%)</title><rect x="48.2008%" y="293" width="0.3387%" height="15" fill="rgb(248,181,18)" fg:x="127790" fg:w="898"/><text x="48.4508%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (60 samples, 0.02%)</title><rect x="49.3150%" y="245" width="0.0226%" height="15" fill="rgb(233,39,42)" fg:x="130744" fg:w="60"/><text x="49.5650%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (131 samples, 0.05%)</title><rect x="49.5564%" y="213" width="0.0494%" height="15" fill="rgb(238,110,33)" fg:x="131384" fg:w="131"/><text x="49.8064%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (754 samples, 0.28%)</title><rect x="49.3731%" y="229" width="0.2844%" height="15" fill="rgb(233,195,10)" fg:x="130898" fg:w="754"/><text x="49.6231%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (137 samples, 0.05%)</title><rect x="49.6058%" y="213" width="0.0517%" height="15" fill="rgb(254,105,3)" fg:x="131515" fg:w="137"/><text x="49.8558%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (79 samples, 0.03%)</title><rect x="49.6575%" y="229" width="0.0298%" height="15" fill="rgb(221,225,9)" fg:x="131652" fg:w="79"/><text x="49.9075%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,285 samples, 0.48%)</title><rect x="49.2030%" y="261" width="0.4847%" height="15" fill="rgb(224,227,45)" fg:x="130447" fg:w="1285"/><text x="49.4530%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (928 samples, 0.35%)</title><rect x="49.3377%" y="245" width="0.3500%" height="15" fill="rgb(229,198,43)" fg:x="130804" fg:w="928"/><text x="49.5877%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (71 samples, 0.03%)</title><rect x="49.6877%" y="261" width="0.0268%" height="15" fill="rgb(206,209,35)" fg:x="131732" fg:w="71"/><text x="49.9377%" y="271.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,492 samples, 0.56%)</title><rect x="49.1687%" y="277" width="0.5628%" height="15" fill="rgb(245,195,53)" fg:x="130356" fg:w="1492"/><text x="49.4187%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (45 samples, 0.02%)</title><rect x="49.7145%" y="261" width="0.0170%" height="15" fill="rgb(240,92,26)" fg:x="131803" fg:w="45"/><text x="49.9645%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (64 samples, 0.02%)</title><rect x="49.7326%" y="277" width="0.0241%" height="15" fill="rgb(207,40,23)" fg:x="131851" fg:w="64"/><text x="49.9826%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (39 samples, 0.01%)</title><rect x="49.7567%" y="277" width="0.0147%" height="15" fill="rgb(223,111,35)" fg:x="131915" fg:w="39"/><text x="50.0067%" y="287.50"></text></g><g><title>gj`__rdl_alloc (35 samples, 0.01%)</title><rect x="49.7714%" y="277" width="0.0132%" height="15" fill="rgb(229,147,28)" fg:x="131954" fg:w="35"/><text x="50.0214%" y="287.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (56 samples, 0.02%)</title><rect x="49.7850%" y="277" width="0.0211%" height="15" fill="rgb(211,29,28)" fg:x="131990" fg:w="56"/><text x="50.0350%" y="287.50"></text></g><g><title>gj`__rdl_alloc (36 samples, 0.01%)</title><rect x="50.4330%" y="245" width="0.0136%" height="15" fill="rgb(228,72,33)" fg:x="133708" fg:w="36"/><text x="50.6830%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.02%)</title><rect x="50.5375%" y="213" width="0.0162%" height="15" fill="rgb(205,214,31)" fg:x="133985" fg:w="43"/><text x="50.7875%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (75 samples, 0.03%)</title><rect x="50.8423%" y="181" width="0.0283%" height="15" fill="rgb(224,111,15)" fg:x="134793" fg:w="75"/><text x="51.0923%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (980 samples, 0.37%)</title><rect x="50.5835%" y="197" width="0.3696%" height="15" fill="rgb(253,21,26)" fg:x="134107" fg:w="980"/><text x="50.8335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (219 samples, 0.08%)</title><rect x="50.8705%" y="181" width="0.0826%" height="15" fill="rgb(245,139,43)" fg:x="134868" fg:w="219"/><text x="51.1205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,351 samples, 0.51%)</title><rect x="50.4651%" y="229" width="0.5096%" height="15" fill="rgb(252,170,7)" fg:x="133793" fg:w="1351"/><text x="50.7151%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,116 samples, 0.42%)</title><rect x="50.5537%" y="213" width="0.4209%" height="15" fill="rgb(231,118,14)" fg:x="134028" fg:w="1116"/><text x="50.8037%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (57 samples, 0.02%)</title><rect x="50.9532%" y="197" width="0.0215%" height="15" fill="rgb(238,83,0)" fg:x="135087" fg:w="57"/><text x="51.2032%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (50 samples, 0.02%)</title><rect x="50.9747%" y="229" width="0.0189%" height="15" fill="rgb(221,39,39)" fg:x="135144" fg:w="50"/><text x="51.2247%" y="239.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (1,483 samples, 0.56%)</title><rect x="50.4466%" y="245" width="0.5594%" height="15" fill="rgb(222,119,46)" fg:x="133744" fg:w="1483"/><text x="50.6966%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,704 samples, 0.64%)</title><rect x="50.3730%" y="261" width="0.6427%" height="15" fill="rgb(222,165,49)" fg:x="133549" fg:w="1704"/><text x="50.6230%" y="271.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (53 samples, 0.02%)</title><rect x="51.0158%" y="261" width="0.0200%" height="15" fill="rgb(219,113,52)" fg:x="135253" fg:w="53"/><text x="51.2658%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (438 samples, 0.17%)</title><rect x="51.5676%" y="213" width="0.1652%" height="15" fill="rgb(214,7,15)" fg:x="136716" fg:w="438"/><text x="51.8176%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (142 samples, 0.05%)</title><rect x="51.6792%" y="197" width="0.0536%" height="15" fill="rgb(235,32,4)" fg:x="137012" fg:w="142"/><text x="51.9292%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (461 samples, 0.17%)</title><rect x="51.5623%" y="229" width="0.1739%" height="15" fill="rgb(238,90,54)" fg:x="136702" fg:w="461"/><text x="51.8123%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (571 samples, 0.22%)</title><rect x="51.5378%" y="245" width="0.2154%" height="15" fill="rgb(213,208,19)" fg:x="136637" fg:w="571"/><text x="51.7878%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.02%)</title><rect x="51.7362%" y="229" width="0.0170%" height="15" fill="rgb(233,156,4)" fg:x="137163" fg:w="45"/><text x="51.9862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33 samples, 0.01%)</title><rect x="51.7407%" y="213" width="0.0124%" height="15" fill="rgb(207,194,5)" fg:x="137175" fg:w="33"/><text x="51.9907%" y="223.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,921 samples, 0.72%)</title><rect x="51.0358%" y="261" width="0.7246%" height="15" fill="rgb(206,111,30)" fg:x="135306" fg:w="1921"/><text x="51.2858%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.01%)</title><rect x="51.7603%" y="261" width="0.0136%" height="15" fill="rgb(243,70,54)" fg:x="137227" fg:w="36"/><text x="52.0103%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (36 samples, 0.01%)</title><rect x="51.7796%" y="261" width="0.0136%" height="15" fill="rgb(242,28,8)" fg:x="137278" fg:w="36"/><text x="52.0296%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (35 samples, 0.01%)</title><rect x="51.7799%" y="245" width="0.0132%" height="15" fill="rgb(219,106,18)" fg:x="137279" fg:w="35"/><text x="52.0299%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (35 samples, 0.01%)</title><rect x="51.7799%" y="229" width="0.0132%" height="15" fill="rgb(244,222,10)" fg:x="137279" fg:w="35"/><text x="52.0299%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (5,434 samples, 2.05%)</title><rect x="49.8061%" y="277" width="2.0496%" height="15" fill="rgb(236,179,52)" fg:x="132046" fg:w="5434"/><text x="50.0561%" y="287.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (120 samples, 0.05%)</title><rect x="51.8105%" y="261" width="0.0453%" height="15" fill="rgb(213,23,39)" fg:x="137360" fg:w="120"/><text x="52.0605%" y="271.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (551 samples, 0.21%)</title><rect x="51.8558%" y="277" width="0.2078%" height="15" fill="rgb(238,48,10)" fg:x="137480" fg:w="551"/><text x="52.1058%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (84 samples, 0.03%)</title><rect x="52.3884%" y="261" width="0.0317%" height="15" fill="rgb(251,196,23)" fg:x="138892" fg:w="84"/><text x="52.6384%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (459 samples, 0.17%)</title><rect x="52.8338%" y="229" width="0.1731%" height="15" fill="rgb(250,152,24)" fg:x="140073" fg:w="459"/><text x="53.0838%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,691 samples, 0.64%)</title><rect x="52.5049%" y="245" width="0.6378%" height="15" fill="rgb(209,150,17)" fg:x="139201" fg:w="1691"/><text x="52.7549%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (360 samples, 0.14%)</title><rect x="53.0069%" y="229" width="0.1358%" height="15" fill="rgb(234,202,34)" fg:x="140532" fg:w="360"/><text x="53.2569%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3,019 samples, 1.14%)</title><rect x="52.0647%" y="277" width="1.1387%" height="15" fill="rgb(253,148,53)" fg:x="138034" fg:w="3019"/><text x="52.3147%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,077 samples, 0.78%)</title><rect x="52.4200%" y="261" width="0.7834%" height="15" fill="rgb(218,129,16)" fg:x="138976" fg:w="2077"/><text x="52.6700%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (161 samples, 0.06%)</title><rect x="53.1427%" y="245" width="0.0607%" height="15" fill="rgb(216,85,19)" fg:x="140892" fg:w="161"/><text x="53.3927%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (129 samples, 0.05%)</title><rect x="53.2042%" y="277" width="0.0487%" height="15" fill="rgb(235,228,7)" fg:x="141055" fg:w="129"/><text x="53.4542%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (333 samples, 0.13%)</title><rect x="53.4441%" y="261" width="0.1256%" height="15" fill="rgb(245,175,0)" fg:x="141691" fg:w="333"/><text x="53.6941%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (856 samples, 0.32%)</title><rect x="53.2529%" y="277" width="0.3229%" height="15" fill="rgb(208,168,36)" fg:x="141184" fg:w="856"/><text x="53.5029%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (33 samples, 0.01%)</title><rect x="53.5761%" y="277" width="0.0124%" height="15" fill="rgb(246,171,24)" fg:x="142041" fg:w="33"/><text x="53.8261%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (990 samples, 0.37%)</title><rect x="53.5886%" y="277" width="0.3734%" height="15" fill="rgb(215,142,24)" fg:x="142074" fg:w="990"/><text x="53.8386%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (86 samples, 0.03%)</title><rect x="53.9695%" y="277" width="0.0324%" height="15" fill="rgb(250,187,7)" fg:x="143084" fg:w="86"/><text x="54.2195%" y="287.50"></text></g><g><title>gj`gj::util::build_tables (15,296 samples, 5.77%)</title><rect x="48.5395%" y="293" width="5.7695%" height="15" fill="rgb(228,66,33)" fg:x="128688" fg:w="15296"/><text x="48.7895%" y="303.50">gj`gj::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (814 samples, 0.31%)</title><rect x="54.0020%" y="277" width="0.3070%" height="15" fill="rgb(234,215,21)" fg:x="143170" fg:w="814"/><text x="54.2520%" y="287.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (286 samples, 0.11%)</title><rect x="54.3090%" y="277" width="0.1079%" height="15" fill="rgb(222,191,20)" fg:x="143984" fg:w="286"/><text x="54.5590%" y="287.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 0.04%)</title><rect x="54.4169%" y="277" width="0.0389%" height="15" fill="rgb(245,79,54)" fg:x="144270" fg:w="103"/><text x="54.6669%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$free (1,125 samples, 0.42%)</title><rect x="54.4557%" y="277" width="0.4243%" height="15" fill="rgb(240,10,37)" fg:x="144373" fg:w="1125"/><text x="54.7057%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$malloc (251 samples, 0.09%)</title><rect x="54.8801%" y="277" width="0.0947%" height="15" fill="rgb(214,192,32)" fg:x="145498" fg:w="251"/><text x="55.1301%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (218 samples, 0.08%)</title><rect x="54.9747%" y="277" width="0.0822%" height="15" fill="rgb(209,36,54)" fg:x="145749" fg:w="218"/><text x="55.2247%" y="287.50"></text></g><g><title>gj`__rdl_alloc (306 samples, 0.12%)</title><rect x="55.0570%" y="277" width="0.1154%" height="15" fill="rgb(220,10,11)" fg:x="145967" fg:w="306"/><text x="55.3070%" y="287.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (198 samples, 0.07%)</title><rect x="55.1743%" y="277" width="0.0747%" height="15" fill="rgb(221,106,17)" fg:x="146278" fg:w="198"/><text x="55.4243%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (182 samples, 0.07%)</title><rect x="58.1974%" y="229" width="0.0686%" height="15" fill="rgb(251,142,44)" fg:x="154293" fg:w="182"/><text x="58.4474%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1,042 samples, 0.39%)</title><rect x="59.4833%" y="197" width="0.3930%" height="15" fill="rgb(238,13,15)" fg:x="157702" fg:w="1042"/><text x="59.7333%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3,416 samples, 1.29%)</title><rect x="58.6078%" y="213" width="1.2885%" height="15" fill="rgb(208,107,27)" fg:x="155381" fg:w="3416"/><text x="58.8578%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (53 samples, 0.02%)</title><rect x="59.8763%" y="197" width="0.0200%" height="15" fill="rgb(205,136,37)" fg:x="158744" fg:w="53"/><text x="60.1263%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6,381 samples, 2.41%)</title><rect x="57.5739%" y="245" width="2.4068%" height="15" fill="rgb(250,205,27)" fg:x="152640" fg:w="6381"/><text x="57.8239%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4,546 samples, 1.71%)</title><rect x="58.2661%" y="229" width="1.7147%" height="15" fill="rgb(210,80,43)" fg:x="154475" fg:w="4546"/><text x="58.5161%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (224 samples, 0.08%)</title><rect x="59.8963%" y="213" width="0.0845%" height="15" fill="rgb(247,160,36)" fg:x="158797" fg:w="224"/><text x="60.1463%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (466 samples, 0.18%)</title><rect x="59.9808%" y="245" width="0.1758%" height="15" fill="rgb(234,13,49)" fg:x="159021" fg:w="466"/><text x="60.2308%" y="255.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (7,300 samples, 2.75%)</title><rect x="57.4080%" y="261" width="2.7535%" height="15" fill="rgb(234,122,0)" fg:x="152200" fg:w="7300"/><text x="57.6580%" y="271.50">gj..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (1,843 samples, 0.70%)</title><rect x="60.1614%" y="261" width="0.6952%" height="15" fill="rgb(207,146,38)" fg:x="159500" fg:w="1843"/><text x="60.4114%" y="271.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (4,464 samples, 1.68%)</title><rect x="60.8566%" y="261" width="1.6838%" height="15" fill="rgb(207,177,25)" fg:x="161343" fg:w="4464"/><text x="61.1066%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (87 samples, 0.03%)</title><rect x="63.5976%" y="213" width="0.0328%" height="15" fill="rgb(211,178,42)" fg:x="168610" fg:w="87"/><text x="63.8476%" y="223.50"></text></g><g><title>gj`__rdl_alloc (116 samples, 0.04%)</title><rect x="63.6304%" y="213" width="0.0438%" height="15" fill="rgb(230,69,54)" fg:x="168697" fg:w="116"/><text x="63.8804%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (172 samples, 0.06%)</title><rect x="64.0257%" y="181" width="0.0649%" height="15" fill="rgb(214,135,41)" fg:x="169745" fg:w="172"/><text x="64.2757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (88 samples, 0.03%)</title><rect x="64.1921%" y="165" width="0.0332%" height="15" fill="rgb(237,67,25)" fg:x="170186" fg:w="88"/><text x="64.4421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (551 samples, 0.21%)</title><rect x="64.6568%" y="149" width="0.2078%" height="15" fill="rgb(222,189,50)" fg:x="171418" fg:w="551"/><text x="64.9068%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,808 samples, 1.44%)</title><rect x="64.0906%" y="181" width="1.4363%" height="15" fill="rgb(245,148,34)" fg:x="169917" fg:w="3808"/><text x="64.3406%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3,451 samples, 1.30%)</title><rect x="64.2253%" y="165" width="1.3017%" height="15" fill="rgb(222,29,6)" fg:x="170274" fg:w="3451"/><text x="64.4753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,755 samples, 0.66%)</title><rect x="64.8650%" y="149" width="0.6620%" height="15" fill="rgb(221,189,43)" fg:x="171970" fg:w="1755"/><text x="65.1150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (482 samples, 0.18%)</title><rect x="65.3451%" y="133" width="0.1818%" height="15" fill="rgb(207,36,27)" fg:x="173243" fg:w="482"/><text x="65.5951%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4,834 samples, 1.82%)</title><rect x="63.7734%" y="197" width="1.8233%" height="15" fill="rgb(217,90,24)" fg:x="169076" fg:w="4834"/><text x="64.0234%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (185 samples, 0.07%)</title><rect x="65.5269%" y="181" width="0.0698%" height="15" fill="rgb(224,66,35)" fg:x="173725" fg:w="185"/><text x="65.7769%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (208 samples, 0.08%)</title><rect x="65.5967%" y="197" width="0.0785%" height="15" fill="rgb(221,13,50)" fg:x="173910" fg:w="208"/><text x="65.8467%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (97 samples, 0.04%)</title><rect x="65.6752%" y="197" width="0.0366%" height="15" fill="rgb(236,68,49)" fg:x="174118" fg:w="97"/><text x="65.9252%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (5,513 samples, 2.08%)</title><rect x="63.6742%" y="213" width="2.0794%" height="15" fill="rgb(229,146,28)" fg:x="168813" fg:w="5513"/><text x="63.9242%" y="223.50">g..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (111 samples, 0.04%)</title><rect x="65.7118%" y="197" width="0.0419%" height="15" fill="rgb(225,31,38)" fg:x="174215" fg:w="111"/><text x="65.9618%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6,102 samples, 2.30%)</title><rect x="63.4611%" y="229" width="2.3016%" height="15" fill="rgb(250,208,3)" fg:x="168248" fg:w="6102"/><text x="63.7111%" y="239.50">g..</text></g><g><title>gj`alloc::raw_vec::finish_grow (170 samples, 0.06%)</title><rect x="65.7627%" y="229" width="0.0641%" height="15" fill="rgb(246,54,23)" fg:x="174350" fg:w="170"/><text x="66.0127%" y="239.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (1,301 samples, 0.49%)</title><rect x="65.8268%" y="229" width="0.4907%" height="15" fill="rgb(243,76,11)" fg:x="174520" fg:w="1301"/><text x="66.0768%" y="239.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (1,021 samples, 0.39%)</title><rect x="66.8196%" y="213" width="0.3851%" height="15" fill="rgb(245,21,50)" fg:x="177152" fg:w="1021"/><text x="67.0696%" y="223.50"></text></g><g><title>gj`bytes::bytes::shared_drop (43 samples, 0.02%)</title><rect x="67.9417%" y="197" width="0.0162%" height="15" fill="rgb(228,9,43)" fg:x="180127" fg:w="43"/><text x="68.1917%" y="207.50"></text></g><g><title>gj`core::str::converts::from_utf8 (259 samples, 0.10%)</title><rect x="67.9579%" y="197" width="0.0977%" height="15" fill="rgb(208,100,47)" fg:x="180170" fg:w="259"/><text x="68.2079%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (63 samples, 0.02%)</title><rect x="68.2118%" y="133" width="0.0238%" height="15" fill="rgb(232,26,8)" fg:x="180843" fg:w="63"/><text x="68.4618%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (216 samples, 0.08%)</title><rect x="68.1661%" y="149" width="0.0815%" height="15" fill="rgb(216,166,38)" fg:x="180722" fg:w="216"/><text x="68.4161%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (32 samples, 0.01%)</title><rect x="68.2355%" y="133" width="0.0121%" height="15" fill="rgb(251,202,51)" fg:x="180906" fg:w="32"/><text x="68.4855%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (423 samples, 0.16%)</title><rect x="68.0918%" y="181" width="0.1596%" height="15" fill="rgb(254,216,34)" fg:x="180525" fg:w="423"/><text x="68.3418%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (290 samples, 0.11%)</title><rect x="68.1420%" y="165" width="0.1094%" height="15" fill="rgb(251,32,27)" fg:x="180658" fg:w="290"/><text x="68.3920%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (33 samples, 0.01%)</title><rect x="68.2514%" y="181" width="0.0124%" height="15" fill="rgb(208,127,28)" fg:x="180948" fg:w="33"/><text x="68.5014%" y="191.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (554 samples, 0.21%)</title><rect x="68.0556%" y="197" width="0.2090%" height="15" fill="rgb(224,137,22)" fg:x="180429" fg:w="554"/><text x="68.3056%" y="207.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (3,251 samples, 1.23%)</title><rect x="67.2047%" y="213" width="1.2262%" height="15" fill="rgb(254,70,32)" fg:x="178173" fg:w="3251"/><text x="67.4547%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (421 samples, 0.16%)</title><rect x="68.2721%" y="197" width="0.1588%" height="15" fill="rgb(229,75,37)" fg:x="181003" fg:w="421"/><text x="68.5221%" y="207.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (507 samples, 0.19%)</title><rect x="68.6900%" y="165" width="0.1912%" height="15" fill="rgb(252,64,23)" fg:x="182111" fg:w="507"/><text x="68.9400%" y="175.50"></text></g><g><title>gj`bytes::bytes::shared_clone (279 samples, 0.11%)</title><rect x="68.7760%" y="149" width="0.1052%" height="15" fill="rgb(232,162,48)" fg:x="182339" fg:w="279"/><text x="69.0260%" y="159.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (1,140 samples, 0.43%)</title><rect x="68.5097%" y="181" width="0.4300%" height="15" fill="rgb(246,160,12)" fg:x="181633" fg:w="1140"/><text x="68.7597%" y="191.50"></text></g><g><title>gj`bytes::bytes::shared_drop (154 samples, 0.06%)</title><rect x="68.8816%" y="165" width="0.0581%" height="15" fill="rgb(247,166,0)" fg:x="182619" fg:w="154"/><text x="69.1316%" y="175.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (92 samples, 0.03%)</title><rect x="68.9397%" y="181" width="0.0347%" height="15" fill="rgb(249,219,21)" fg:x="182773" fg:w="92"/><text x="69.1897%" y="191.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (1,327 samples, 0.50%)</title><rect x="68.5086%" y="197" width="0.5005%" height="15" fill="rgb(205,209,3)" fg:x="181630" fg:w="1327"/><text x="68.7586%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (78 samples, 0.03%)</title><rect x="68.9797%" y="181" width="0.0294%" height="15" fill="rgb(243,44,1)" fg:x="182879" fg:w="78"/><text x="69.2297%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (7,172 samples, 2.71%)</title><rect x="66.3175%" y="229" width="2.7052%" height="15" fill="rgb(206,159,16)" fg:x="175821" fg:w="7172"/><text x="66.5675%" y="239.50">gj..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (1,569 samples, 0.59%)</title><rect x="68.4309%" y="213" width="0.5918%" height="15" fill="rgb(244,77,30)" fg:x="181424" fg:w="1569"/><text x="68.6809%" y="223.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (36 samples, 0.01%)</title><rect x="69.0091%" y="197" width="0.0136%" height="15" fill="rgb(218,69,12)" fg:x="182957" fg:w="36"/><text x="69.2591%" y="207.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (222 samples, 0.08%)</title><rect x="69.0227%" y="229" width="0.0837%" height="15" fill="rgb(212,87,7)" fg:x="182993" fg:w="222"/><text x="69.2727%" y="239.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (419 samples, 0.16%)</title><rect x="69.1064%" y="229" width="0.1580%" height="15" fill="rgb(245,114,25)" fg:x="183215" fg:w="419"/><text x="69.3564%" y="239.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (554 samples, 0.21%)</title><rect x="69.2645%" y="229" width="0.2090%" height="15" fill="rgb(210,61,42)" fg:x="183634" fg:w="554"/><text x="69.5145%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (440 samples, 0.17%)</title><rect x="70.0396%" y="213" width="0.1660%" height="15" fill="rgb(211,52,33)" fg:x="185689" fg:w="440"/><text x="70.2896%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (872 samples, 0.33%)</title><rect x="71.2345%" y="181" width="0.3289%" height="15" fill="rgb(234,58,33)" fg:x="188857" fg:w="872"/><text x="71.4845%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2,818 samples, 1.06%)</title><rect x="70.5103%" y="197" width="1.0629%" height="15" fill="rgb(220,115,36)" fg:x="186937" fg:w="2818"/><text x="70.7603%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5,881 samples, 2.22%)</title><rect x="69.4734%" y="229" width="2.2182%" height="15" fill="rgb(243,153,54)" fg:x="184188" fg:w="5881"/><text x="69.7234%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,940 samples, 1.49%)</title><rect x="70.2056%" y="213" width="1.4861%" height="15" fill="rgb(251,47,18)" fg:x="186129" fg:w="3940"/><text x="70.4556%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (314 samples, 0.12%)</title><rect x="71.5732%" y="197" width="0.1184%" height="15" fill="rgb(242,102,42)" fg:x="189755" fg:w="314"/><text x="71.8232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (401 samples, 0.15%)</title><rect x="71.6917%" y="229" width="0.1513%" height="15" fill="rgb(234,31,38)" fg:x="190069" fg:w="401"/><text x="71.9417%" y="239.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (24,438 samples, 9.22%)</title><rect x="62.6430%" y="245" width="9.2177%" height="15" fill="rgb(221,117,51)" fg:x="166079" fg:w="24438"/><text x="62.8930%" y="255.50">gj`&lt;parquet::..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (47 samples, 0.02%)</title><rect x="71.8429%" y="229" width="0.0177%" height="15" fill="rgb(212,20,18)" fg:x="190470" fg:w="47"/><text x="72.0929%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (233 samples, 0.09%)</title><rect x="71.8607%" y="245" width="0.0879%" height="15" fill="rgb(245,133,36)" fg:x="190517" fg:w="233"/><text x="72.1107%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (191 samples, 0.07%)</title><rect x="71.9486%" y="245" width="0.0720%" height="15" fill="rgb(212,6,19)" fg:x="190750" fg:w="191"/><text x="72.1986%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$memmove (218 samples, 0.08%)</title><rect x="72.0206%" y="245" width="0.0822%" height="15" fill="rgb(218,1,36)" fg:x="190941" fg:w="218"/><text x="72.2706%" y="255.50"></text></g><g><title>gj`__rdl_alloc (285 samples, 0.11%)</title><rect x="72.1028%" y="245" width="0.1075%" height="15" fill="rgb(246,84,54)" fg:x="191159" fg:w="285"/><text x="72.3528%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (102 samples, 0.04%)</title><rect x="72.2103%" y="245" width="0.0385%" height="15" fill="rgb(242,110,6)" fg:x="191444" fg:w="102"/><text x="72.4603%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (144 samples, 0.05%)</title><rect x="72.2503%" y="133" width="0.0543%" height="15" fill="rgb(214,47,5)" fg:x="191550" fg:w="144"/><text x="72.5003%" y="143.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (146 samples, 0.06%)</title><rect x="72.2499%" y="197" width="0.0551%" height="15" fill="rgb(218,159,25)" fg:x="191549" fg:w="146"/><text x="72.4999%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (146 samples, 0.06%)</title><rect x="72.2499%" y="181" width="0.0551%" height="15" fill="rgb(215,211,28)" fg:x="191549" fg:w="146"/><text x="72.4999%" y="191.50"></text></g><g><title>gj`bytes::bytes::shared_drop (146 samples, 0.06%)</title><rect x="72.2499%" y="165" width="0.0551%" height="15" fill="rgb(238,59,32)" fg:x="191549" fg:w="146"/><text x="72.4999%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (146 samples, 0.06%)</title><rect x="72.2499%" y="149" width="0.0551%" height="15" fill="rgb(226,82,3)" fg:x="191549" fg:w="146"/><text x="72.4999%" y="159.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (176 samples, 0.07%)</title><rect x="72.2492%" y="213" width="0.0664%" height="15" fill="rgb(240,164,32)" fg:x="191547" fg:w="176"/><text x="72.4992%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (180 samples, 0.07%)</title><rect x="72.2488%" y="245" width="0.0679%" height="15" fill="rgb(232,46,7)" fg:x="191546" fg:w="180"/><text x="72.4988%" y="255.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (180 samples, 0.07%)</title><rect x="72.2488%" y="229" width="0.0679%" height="15" fill="rgb(229,129,53)" fg:x="191546" fg:w="180"/><text x="72.4988%" y="239.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (1,164 samples, 0.44%)</title><rect x="72.3246%" y="133" width="0.4390%" height="15" fill="rgb(234,188,29)" fg:x="191747" fg:w="1164"/><text x="72.5746%" y="143.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (1,230 samples, 0.46%)</title><rect x="72.3235%" y="149" width="0.4639%" height="15" fill="rgb(246,141,4)" fg:x="191744" fg:w="1230"/><text x="72.5735%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (63 samples, 0.02%)</title><rect x="72.7637%" y="133" width="0.0238%" height="15" fill="rgb(229,23,39)" fg:x="192911" fg:w="63"/><text x="73.0137%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (64 samples, 0.02%)</title><rect x="72.7885%" y="149" width="0.0241%" height="15" fill="rgb(206,12,3)" fg:x="192977" fg:w="64"/><text x="73.0385%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (63 samples, 0.02%)</title><rect x="72.7889%" y="133" width="0.0238%" height="15" fill="rgb(252,226,20)" fg:x="192978" fg:w="63"/><text x="73.0389%" y="143.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (1,381 samples, 0.52%)</title><rect x="72.3235%" y="165" width="0.5209%" height="15" fill="rgb(216,123,35)" fg:x="191744" fg:w="1381"/><text x="72.5735%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (82 samples, 0.03%)</title><rect x="72.8134%" y="149" width="0.0309%" height="15" fill="rgb(212,68,40)" fg:x="193043" fg:w="82"/><text x="73.0634%" y="159.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (131 samples, 0.05%)</title><rect x="72.8459%" y="149" width="0.0494%" height="15" fill="rgb(254,125,32)" fg:x="193129" fg:w="131"/><text x="73.0959%" y="159.50"></text></g><g><title>gj`std::io::default_read_exact (131 samples, 0.05%)</title><rect x="72.8459%" y="133" width="0.0494%" height="15" fill="rgb(253,97,22)" fg:x="193129" fg:w="131"/><text x="73.0959%" y="143.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (131 samples, 0.05%)</title><rect x="72.8459%" y="117" width="0.0494%" height="15" fill="rgb(241,101,14)" fg:x="193129" fg:w="131"/><text x="73.0959%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (125 samples, 0.05%)</title><rect x="72.8481%" y="101" width="0.0471%" height="15" fill="rgb(238,103,29)" fg:x="193135" fg:w="125"/><text x="73.0981%" y="111.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (137 samples, 0.05%)</title><rect x="72.8451%" y="165" width="0.0517%" height="15" fill="rgb(233,195,47)" fg:x="193127" fg:w="137"/><text x="73.0951%" y="175.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (455 samples, 0.17%)</title><rect x="72.8968%" y="133" width="0.1716%" height="15" fill="rgb(246,218,30)" fg:x="193264" fg:w="455"/><text x="73.1468%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (449 samples, 0.17%)</title><rect x="72.8991%" y="117" width="0.1694%" height="15" fill="rgb(219,145,47)" fg:x="193270" fg:w="449"/><text x="73.1491%" y="127.50"></text></g><g><title>gj`std::io::default_read_buf (459 samples, 0.17%)</title><rect x="72.8968%" y="149" width="0.1731%" height="15" fill="rgb(243,12,26)" fg:x="193264" fg:w="459"/><text x="73.1468%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (65 samples, 0.02%)</title><rect x="73.0699%" y="149" width="0.0245%" height="15" fill="rgb(214,87,16)" fg:x="193723" fg:w="65"/><text x="73.3199%" y="159.50"></text></g><g><title>gj`std::io::Read::read_to_end (526 samples, 0.20%)</title><rect x="72.8968%" y="165" width="0.1984%" height="15" fill="rgb(208,99,42)" fg:x="193264" fg:w="526"/><text x="73.1468%" y="175.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (2,057 samples, 0.78%)</title><rect x="72.3235%" y="181" width="0.7759%" height="15" fill="rgb(253,99,2)" fg:x="191744" fg:w="2057"/><text x="72.5735%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (2,082 samples, 0.79%)</title><rect x="72.3171%" y="245" width="0.7853%" height="15" fill="rgb(220,168,23)" fg:x="191727" fg:w="2082"/><text x="72.5671%" y="255.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (2,082 samples, 0.79%)</title><rect x="72.3171%" y="229" width="0.7853%" height="15" fill="rgb(242,38,24)" fg:x="191727" fg:w="2082"/><text x="72.5671%" y="239.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (2,082 samples, 0.79%)</title><rect x="72.3171%" y="213" width="0.7853%" height="15" fill="rgb(225,182,9)" fg:x="191727" fg:w="2082"/><text x="72.5671%" y="223.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (2,069 samples, 0.78%)</title><rect x="72.3220%" y="197" width="0.7804%" height="15" fill="rgb(243,178,37)" fg:x="191740" fg:w="2069"/><text x="72.5720%" y="207.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (293 samples, 0.11%)</title><rect x="73.1031%" y="245" width="0.1105%" height="15" fill="rgb(232,139,19)" fg:x="193811" fg:w="293"/><text x="73.3531%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (266 samples, 0.10%)</title><rect x="73.2223%" y="245" width="0.1003%" height="15" fill="rgb(225,201,24)" fg:x="194127" fg:w="266"/><text x="73.4723%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (27 samples, 0.01%)</title><rect x="73.3230%" y="245" width="0.0102%" height="15" fill="rgb(221,47,46)" fg:x="194394" fg:w="27"/><text x="73.5730%" y="255.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (30,265 samples, 11.42%)</title><rect x="62.5404%" y="261" width="11.4156%" height="15" fill="rgb(249,23,13)" fg:x="165807" fg:w="30265"/><text x="62.7904%" y="271.50">gj`&lt;parquet::reco..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,651 samples, 0.62%)</title><rect x="73.3332%" y="245" width="0.6227%" height="15" fill="rgb(219,9,5)" fg:x="194421" fg:w="1651"/><text x="73.5832%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (255 samples, 0.10%)</title><rect x="73.9563%" y="261" width="0.0962%" height="15" fill="rgb(254,171,16)" fg:x="196073" fg:w="255"/><text x="74.2063%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (612 samples, 0.23%)</title><rect x="74.0525%" y="261" width="0.2308%" height="15" fill="rgb(230,171,20)" fg:x="196328" fg:w="612"/><text x="74.3025%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (192 samples, 0.07%)</title><rect x="74.2833%" y="261" width="0.0724%" height="15" fill="rgb(210,71,41)" fg:x="196940" fg:w="192"/><text x="74.5333%" y="271.50"></text></g><g><title>gj`__rdl_alloc (234 samples, 0.09%)</title><rect x="74.3558%" y="261" width="0.0883%" height="15" fill="rgb(206,173,20)" fg:x="197132" fg:w="234"/><text x="74.6058%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (60 samples, 0.02%)</title><rect x="74.4440%" y="181" width="0.0226%" height="15" fill="rgb(233,88,34)" fg:x="197366" fg:w="60"/><text x="74.6940%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (60 samples, 0.02%)</title><rect x="74.4440%" y="165" width="0.0226%" height="15" fill="rgb(223,209,46)" fg:x="197366" fg:w="60"/><text x="74.6940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (94 samples, 0.04%)</title><rect x="74.4440%" y="197" width="0.0355%" height="15" fill="rgb(250,43,18)" fg:x="197366" fg:w="94"/><text x="74.6940%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (128 samples, 0.05%)</title><rect x="74.4440%" y="261" width="0.0483%" height="15" fill="rgb(208,13,10)" fg:x="197366" fg:w="128"/><text x="74.6940%" y="271.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (128 samples, 0.05%)</title><rect x="74.4440%" y="245" width="0.0483%" height="15" fill="rgb(212,200,36)" fg:x="197366" fg:w="128"/><text x="74.6940%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (128 samples, 0.05%)</title><rect x="74.4440%" y="229" width="0.0483%" height="15" fill="rgb(225,90,30)" fg:x="197366" fg:w="128"/><text x="74.6940%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (128 samples, 0.05%)</title><rect x="74.4440%" y="213" width="0.0483%" height="15" fill="rgb(236,182,39)" fg:x="197366" fg:w="128"/><text x="74.6940%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.01%)</title><rect x="74.4795%" y="197" width="0.0128%" height="15" fill="rgb(212,144,35)" fg:x="197460" fg:w="34"/><text x="74.7295%" y="207.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (783 samples, 0.30%)</title><rect x="74.4923%" y="261" width="0.2953%" height="15" fill="rgb(228,63,44)" fg:x="197494" fg:w="783"/><text x="74.7423%" y="271.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (515 samples, 0.19%)</title><rect x="74.7884%" y="261" width="0.1943%" height="15" fill="rgb(228,109,6)" fg:x="198279" fg:w="515"/><text x="75.0384%" y="271.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5,493 samples, 2.07%)</title><rect x="75.5428%" y="245" width="2.0719%" height="15" fill="rgb(238,117,24)" fg:x="200279" fg:w="5493"/><text x="75.7928%" y="255.50">g..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9,279 samples, 3.50%)</title><rect x="74.9834%" y="261" width="3.4999%" height="15" fill="rgb(242,26,26)" fg:x="198796" fg:w="9279"/><text x="75.2334%" y="271.50">gj`..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (2,303 samples, 0.87%)</title><rect x="77.6147%" y="245" width="0.8687%" height="15" fill="rgb(221,92,48)" fg:x="205772" fg:w="2303"/><text x="77.8647%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (352 samples, 0.13%)</title><rect x="79.1102%" y="245" width="0.1328%" height="15" fill="rgb(209,209,32)" fg:x="209737" fg:w="352"/><text x="79.3602%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (868 samples, 0.33%)</title><rect x="80.3025%" y="213" width="0.3274%" height="15" fill="rgb(221,70,22)" fg:x="212898" fg:w="868"/><text x="80.5525%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2,898 samples, 1.09%)</title><rect x="79.5440%" y="229" width="1.0931%" height="15" fill="rgb(248,145,5)" fg:x="210887" fg:w="2898"/><text x="79.7940%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5,979 samples, 2.26%)</title><rect x="78.4931%" y="261" width="2.2552%" height="15" fill="rgb(226,116,26)" fg:x="208101" fg:w="5979"/><text x="78.7431%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,991 samples, 1.51%)</title><rect x="79.2430%" y="245" width="1.5054%" height="15" fill="rgb(244,5,17)" fg:x="210089" fg:w="3991"/><text x="79.4930%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (295 samples, 0.11%)</title><rect x="80.6371%" y="229" width="0.1113%" height="15" fill="rgb(252,159,33)" fg:x="213785" fg:w="295"/><text x="80.8871%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (445 samples, 0.17%)</title><rect x="80.7483%" y="261" width="0.1678%" height="15" fill="rgb(206,71,0)" fg:x="214080" fg:w="445"/><text x="80.9983%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6,428 samples, 2.42%)</title><rect x="84.7948%" y="245" width="2.4246%" height="15" fill="rgb(233,118,54)" fg:x="224808" fg:w="6428"/><text x="85.0448%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (175 samples, 0.07%)</title><rect x="87.2194%" y="245" width="0.0660%" height="15" fill="rgb(234,83,48)" fg:x="231236" fg:w="175"/><text x="87.4694%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (17,964 samples, 6.78%)</title><rect x="80.9162%" y="261" width="6.7758%" height="15" fill="rgb(228,3,54)" fg:x="214525" fg:w="17964"/><text x="81.1662%" y="271.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`szone_size (1,078 samples, 0.41%)</title><rect x="87.2854%" y="245" width="0.4066%" height="15" fill="rgb(226,155,13)" fg:x="231411" fg:w="1078"/><text x="87.5354%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (958 samples, 0.36%)</title><rect x="87.3306%" y="229" width="0.3613%" height="15" fill="rgb(241,28,37)" fg:x="231531" fg:w="958"/><text x="87.5806%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (862 samples, 0.33%)</title><rect x="88.5788%" y="229" width="0.3251%" height="15" fill="rgb(233,93,10)" fg:x="234840" fg:w="862"/><text x="88.8288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,511 samples, 1.32%)</title><rect x="87.6920%" y="261" width="1.3243%" height="15" fill="rgb(225,113,19)" fg:x="232489" fg:w="3511"/><text x="87.9420%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,486 samples, 0.94%)</title><rect x="88.0786%" y="245" width="0.9377%" height="15" fill="rgb(241,2,18)" fg:x="233514" fg:w="2486"/><text x="88.3286%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (298 samples, 0.11%)</title><rect x="88.9039%" y="229" width="0.1124%" height="15" fill="rgb(228,207,21)" fg:x="235702" fg:w="298"/><text x="89.1539%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1,031 samples, 0.39%)</title><rect x="89.0170%" y="261" width="0.3889%" height="15" fill="rgb(213,211,35)" fg:x="236002" fg:w="1031"/><text x="89.2670%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (4,153 samples, 1.57%)</title><rect x="89.4059%" y="261" width="1.5665%" height="15" fill="rgb(209,83,10)" fg:x="237033" fg:w="4153"/><text x="89.6559%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1,748 samples, 0.66%)</title><rect x="90.9750%" y="261" width="0.6593%" height="15" fill="rgb(209,164,1)" fg:x="241193" fg:w="1748"/><text x="91.2250%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (286 samples, 0.11%)</title><rect x="91.6344%" y="261" width="0.1079%" height="15" fill="rgb(213,184,43)" fg:x="242941" fg:w="286"/><text x="91.8844%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (181 samples, 0.07%)</title><rect x="91.7422%" y="261" width="0.0683%" height="15" fill="rgb(231,61,34)" fg:x="243227" fg:w="181"/><text x="91.9922%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (270 samples, 0.10%)</title><rect x="91.8105%" y="261" width="0.1018%" height="15" fill="rgb(235,75,3)" fg:x="243408" fg:w="270"/><text x="92.0605%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3,718 samples, 1.40%)</title><rect x="91.9123%" y="261" width="1.4024%" height="15" fill="rgb(220,106,47)" fg:x="243678" fg:w="3718"/><text x="92.1623%" y="271.50"></text></g><g><title>gj`gj::util::from_parquet (102,643 samples, 38.72%)</title><rect x="55.2489%" y="277" width="38.7157%" height="15" fill="rgb(210,196,33)" fg:x="146476" fg:w="102643"/><text x="55.4989%" y="287.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,723 samples, 0.65%)</title><rect x="93.3147%" y="261" width="0.6499%" height="15" fill="rgb(229,154,42)" fg:x="247396" fg:w="1723"/><text x="93.5647%" y="271.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (887 samples, 0.33%)</title><rect x="93.9646%" y="277" width="0.3346%" height="15" fill="rgb(228,114,26)" fg:x="249119" fg:w="887"/><text x="94.2146%" y="287.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (111 samples, 0.04%)</title><rect x="94.2992%" y="277" width="0.0419%" height="15" fill="rgb(208,144,1)" fg:x="250006" fg:w="111"/><text x="94.5492%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (405 samples, 0.15%)</title><rect x="94.3414%" y="277" width="0.1528%" height="15" fill="rgb(239,112,37)" fg:x="250118" fg:w="405"/><text x="94.5914%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1,646 samples, 0.62%)</title><rect x="94.4942%" y="277" width="0.6209%" height="15" fill="rgb(210,96,50)" fg:x="250523" fg:w="1646"/><text x="94.7442%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2,498 samples, 0.94%)</title><rect x="95.1150%" y="277" width="0.9422%" height="15" fill="rgb(222,178,2)" fg:x="252169" fg:w="2498"/><text x="95.3650%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (118 samples, 0.04%)</title><rect x="96.0573%" y="277" width="0.0445%" height="15" fill="rgb(226,74,18)" fg:x="254667" fg:w="118"/><text x="96.3073%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1,466 samples, 0.55%)</title><rect x="96.1029%" y="277" width="0.5530%" height="15" fill="rgb(225,67,54)" fg:x="254788" fg:w="1466"/><text x="96.3529%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,298 samples, 0.49%)</title><rect x="96.6559%" y="277" width="0.4896%" height="15" fill="rgb(251,92,32)" fg:x="256254" fg:w="1298"/><text x="96.9059%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (86 samples, 0.03%)</title><rect x="97.1454%" y="277" width="0.0324%" height="15" fill="rgb(228,149,22)" fg:x="257552" fg:w="86"/><text x="97.3954%" y="287.50"></text></g><g><title>gj`gj::util::load_db (114,381 samples, 43.14%)</title><rect x="54.3090%" y="293" width="43.1431%" height="15" fill="rgb(243,54,13)" fg:x="143984" fg:w="114381"/><text x="54.5590%" y="303.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (727 samples, 0.27%)</title><rect x="97.1779%" y="277" width="0.2742%" height="15" fill="rgb(243,180,28)" fg:x="257638" fg:w="727"/><text x="97.4279%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (706 samples, 0.27%)</title><rect x="97.4559%" y="293" width="0.2663%" height="15" fill="rgb(208,167,24)" fg:x="258375" fg:w="706"/><text x="97.7059%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (904 samples, 0.34%)</title><rect x="97.7222%" y="293" width="0.3410%" height="15" fill="rgb(245,73,45)" fg:x="259081" fg:w="904"/><text x="97.9722%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (2,500 samples, 0.94%)</title><rect x="98.0631%" y="293" width="0.9430%" height="15" fill="rgb(237,203,48)" fg:x="259985" fg:w="2500"/><text x="98.3131%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_large (40 samples, 0.02%)</title><rect x="99.0061%" y="293" width="0.0151%" height="15" fill="rgb(211,197,16)" fg:x="262485" fg:w="40"/><text x="99.2561%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (40 samples, 0.02%)</title><rect x="99.0061%" y="277" width="0.0151%" height="15" fill="rgb(243,99,51)" fg:x="262485" fg:w="40"/><text x="99.2561%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (40 samples, 0.02%)</title><rect x="99.0061%" y="261" width="0.0151%" height="15" fill="rgb(215,123,29)" fg:x="262485" fg:w="40"/><text x="99.2561%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1,217 samples, 0.46%)</title><rect x="99.0216%" y="293" width="0.4590%" height="15" fill="rgb(239,186,37)" fg:x="262526" fg:w="1217"/><text x="99.2716%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (800 samples, 0.30%)</title><rect x="99.4806%" y="293" width="0.3018%" height="15" fill="rgb(252,136,39)" fg:x="263743" fg:w="800"/><text x="99.7306%" y="303.50"></text></g><g><title>gj`gj::main (265,030 samples, 99.97%)</title><rect x="0.0034%" y="309" width="99.9661%" height="15" fill="rgb(223,213,32)" fg:x="9" fg:w="265030"/><text x="0.2534%" y="319.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (496 samples, 0.19%)</title><rect x="99.7824%" y="293" width="0.1871%" height="15" fill="rgb(233,115,5)" fg:x="264543" fg:w="496"/><text x="100.0324%" y="303.50"></text></g><g><title>gj`main (265,092 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9894%" height="15" fill="rgb(207,226,44)" fg:x="0" fg:w="265092"/><text x="0.2500%" y="383.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (265,092 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9894%" height="15" fill="rgb(208,126,0)" fg:x="0" fg:w="265092"/><text x="0.2500%" y="367.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (265,092 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9894%" height="15" fill="rgb(244,66,21)" fg:x="0" fg:w="265092"/><text x="0.2500%" y="351.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (265,092 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9894%" height="15" fill="rgb(222,97,12)" fg:x="0" fg:w="265092"/><text x="0.2500%" y="335.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (53 samples, 0.02%)</title><rect x="99.9694%" y="309" width="0.0200%" height="15" fill="rgb(219,213,19)" fg:x="265039" fg:w="53"/><text x="100.2194%" y="319.50"></text></g><g><title>dyld`start (265,093 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9898%" height="15" fill="rgb(252,169,30)" fg:x="0" fg:w="265093"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>all (265,120 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(206,32,51)" fg:x="0" fg:w="265120"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__exit (27 samples, 0.01%)</title><rect x="99.9898%" y="389" width="0.0102%" height="15" fill="rgb(250,172,42)" fg:x="265093" fg:w="27"/><text x="100.2398%" y="399.50"></text></g></svg></svg>