<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="6685"><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 1.88%)</title><rect x="1.8399%" y="197" width="1.8848%" height="15" fill="rgb(217,0,24)" fg:x="123" fg:w="126"/><text x="2.0899%" y="207.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (51 samples, 0.76%)</title><rect x="4.9813%" y="181" width="0.7629%" height="15" fill="rgb(221,193,54)" fg:x="333" fg:w="51"/><text x="5.2313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="5.7442%" y="181" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="384" fg:w="1"/><text x="5.9942%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (137 samples, 2.05%)</title><rect x="3.7248%" y="197" width="2.0494%" height="15" fill="rgb(208,68,35)" fg:x="249" fg:w="137"/><text x="3.9748%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="5.7592%" y="181" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="385" fg:w="1"/><text x="6.0092%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="5.7592%" y="165" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="385" fg:w="1"/><text x="6.0092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="5.7741%" y="197" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="386" fg:w="1"/><text x="6.0241%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1 samples, 0.01%)</title><rect x="5.7741%" y="181" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="386" fg:w="1"/><text x="6.0241%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="5.8639%" y="165" width="0.0150%" height="15" fill="rgb(220,122,19)" fg:x="392" fg:w="1"/><text x="6.1139%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="5.8639%" y="149" width="0.0150%" height="15" fill="rgb(250,228,42)" fg:x="392" fg:w="1"/><text x="6.1139%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (4 samples, 0.06%)</title><rect x="5.8788%" y="165" width="0.0598%" height="15" fill="rgb(240,193,28)" fg:x="393" fg:w="4"/><text x="6.1288%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="5.9237%" y="149" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="396" fg:w="1"/><text x="6.1737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="5.9387%" y="165" width="0.0150%" height="15" fill="rgb(206,188,39)" fg:x="397" fg:w="1"/><text x="6.1887%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.09%)</title><rect x="5.9536%" y="165" width="0.0898%" height="15" fill="rgb(217,207,13)" fg:x="398" fg:w="6"/><text x="6.2036%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.30%)</title><rect x="5.7891%" y="197" width="0.2992%" height="15" fill="rgb(231,73,38)" fg:x="387" fg:w="20"/><text x="6.0391%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.28%)</title><rect x="5.8040%" y="181" width="0.2842%" height="15" fill="rgb(225,20,46)" fg:x="388" fg:w="19"/><text x="6.0540%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (3 samples, 0.04%)</title><rect x="6.0434%" y="165" width="0.0449%" height="15" fill="rgb(210,31,41)" fg:x="404" fg:w="3"/><text x="6.2934%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="6.0583%" y="149" width="0.0299%" height="15" fill="rgb(221,200,47)" fg:x="405" fg:w="2"/><text x="6.3083%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.15%)</title><rect x="6.0883%" y="197" width="0.1496%" height="15" fill="rgb(226,26,5)" fg:x="407" fg:w="10"/><text x="6.3383%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (58 samples, 0.87%)</title><rect x="6.2378%" y="197" width="0.8676%" height="15" fill="rgb(249,33,26)" fg:x="417" fg:w="58"/><text x="6.4878%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (32 samples, 0.48%)</title><rect x="6.6268%" y="181" width="0.4787%" height="15" fill="rgb(235,183,28)" fg:x="443" fg:w="32"/><text x="6.8768%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (32 samples, 0.48%)</title><rect x="6.6268%" y="165" width="0.4787%" height="15" fill="rgb(221,5,38)" fg:x="443" fg:w="32"/><text x="6.8768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.19%)</title><rect x="7.1055%" y="197" width="0.1945%" height="15" fill="rgb(247,18,42)" fg:x="475" fg:w="13"/><text x="7.3555%" y="207.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (457 samples, 6.84%)</title><rect x="0.4787%" y="213" width="6.8362%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="457"/><text x="0.7287%" y="223.50">gj`&lt;hashb..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="7.2999%" y="197" width="0.0150%" height="15" fill="rgb(249,31,29)" fg:x="488" fg:w="1"/><text x="7.5499%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$free (5 samples, 0.07%)</title><rect x="7.3149%" y="213" width="0.0748%" height="15" fill="rgb(225,111,53)" fg:x="489" fg:w="5"/><text x="7.5649%" y="223.50"></text></g><g><title>gj`__rdl_dealloc (2 samples, 0.03%)</title><rect x="7.3897%" y="213" width="0.0299%" height="15" fill="rgb(238,160,17)" fg:x="494" fg:w="2"/><text x="7.6397%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="7.8384%" y="197" width="0.0150%" height="15" fill="rgb(214,148,48)" fg:x="524" fg:w="1"/><text x="8.0884%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.28%)</title><rect x="7.8534%" y="197" width="0.2842%" height="15" fill="rgb(232,36,49)" fg:x="525" fg:w="19"/><text x="8.1034%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.16%)</title><rect x="7.9731%" y="181" width="0.1645%" height="15" fill="rgb(209,103,24)" fg:x="533" fg:w="11"/><text x="8.2231%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (6 samples, 0.09%)</title><rect x="8.1376%" y="197" width="0.0898%" height="15" fill="rgb(229,88,8)" fg:x="544" fg:w="6"/><text x="8.3876%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.09%)</title><rect x="8.1376%" y="181" width="0.0898%" height="15" fill="rgb(213,181,19)" fg:x="544" fg:w="6"/><text x="8.3876%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.09%)</title><rect x="8.1376%" y="165" width="0.0898%" height="15" fill="rgb(254,191,54)" fg:x="544" fg:w="6"/><text x="8.3876%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.13%)</title><rect x="8.2274%" y="197" width="0.1346%" height="15" fill="rgb(241,83,37)" fg:x="550" fg:w="9"/><text x="8.4774%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.04%)</title><rect x="8.3171%" y="181" width="0.0449%" height="15" fill="rgb(233,36,39)" fg:x="556" fg:w="3"/><text x="8.5671%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.04%)</title><rect x="8.3171%" y="165" width="0.0449%" height="15" fill="rgb(226,3,54)" fg:x="556" fg:w="3"/><text x="8.5671%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (65 samples, 0.97%)</title><rect x="7.4196%" y="213" width="0.9723%" height="15" fill="rgb(245,192,40)" fg:x="496" fg:w="65"/><text x="7.6696%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.03%)</title><rect x="8.3620%" y="197" width="0.0299%" height="15" fill="rgb(238,167,29)" fg:x="559" fg:w="2"/><text x="8.6120%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.09%)</title><rect x="8.3919%" y="197" width="0.0898%" height="15" fill="rgb(232,182,51)" fg:x="561" fg:w="6"/><text x="8.6419%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (7 samples, 0.10%)</title><rect x="8.3919%" y="213" width="0.1047%" height="15" fill="rgb(231,60,39)" fg:x="561" fg:w="7"/><text x="8.6419%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="8.4817%" y="197" width="0.0150%" height="15" fill="rgb(208,69,12)" fg:x="567" fg:w="1"/><text x="8.7317%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="8.4817%" y="181" width="0.0150%" height="15" fill="rgb(235,93,37)" fg:x="567" fg:w="1"/><text x="8.7317%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="8.4817%" y="165" width="0.0150%" height="15" fill="rgb(213,116,39)" fg:x="567" fg:w="1"/><text x="8.7317%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.16%)</title><rect x="8.4966%" y="213" width="0.1645%" height="15" fill="rgb(222,207,29)" fg:x="568" fg:w="11"/><text x="8.7466%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (81 samples, 1.21%)</title><rect x="11.2939%" y="197" width="1.2117%" height="15" fill="rgb(206,96,30)" fg:x="755" fg:w="81"/><text x="11.5439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="12.5056%" y="197" width="0.0150%" height="15" fill="rgb(218,138,4)" fg:x="836" fg:w="1"/><text x="12.7556%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (260 samples, 3.89%)</title><rect x="8.6612%" y="213" width="3.8893%" height="15" fill="rgb(250,191,14)" fg:x="579" fg:w="260"/><text x="8.9112%" y="223.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="12.5206%" y="197" width="0.0299%" height="15" fill="rgb(239,60,40)" fg:x="837" fg:w="2"/><text x="12.7706%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.03%)</title><rect x="12.5206%" y="181" width="0.0299%" height="15" fill="rgb(206,27,48)" fg:x="837" fg:w="2"/><text x="12.7706%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="12.5505%" y="213" width="0.0150%" height="15" fill="rgb(225,35,8)" fg:x="839" fg:w="1"/><text x="12.8005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="12.5505%" y="197" width="0.0150%" height="15" fill="rgb(250,213,24)" fg:x="839" fg:w="1"/><text x="12.8005%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="12.5505%" y="181" width="0.0150%" height="15" fill="rgb(247,123,22)" fg:x="839" fg:w="1"/><text x="12.8005%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (1 samples, 0.01%)</title><rect x="12.5804%" y="197" width="0.0150%" height="15" fill="rgb(231,138,38)" fg:x="841" fg:w="1"/><text x="12.8304%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="12.5954%" y="197" width="0.0150%" height="15" fill="rgb(231,145,46)" fg:x="842" fg:w="1"/><text x="12.8454%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.19%)</title><rect x="12.5654%" y="213" width="0.1945%" height="15" fill="rgb(251,118,11)" fg:x="840" fg:w="13"/><text x="12.8154%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (10 samples, 0.15%)</title><rect x="12.6103%" y="197" width="0.1496%" height="15" fill="rgb(217,147,25)" fg:x="843" fg:w="10"/><text x="12.8603%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.15%)</title><rect x="12.6103%" y="181" width="0.1496%" height="15" fill="rgb(247,81,37)" fg:x="843" fg:w="10"/><text x="12.8603%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="12.8048%" y="181" width="0.0449%" height="15" fill="rgb(209,12,38)" fg:x="856" fg:w="3"/><text x="13.0548%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.03%)</title><rect x="12.8497%" y="181" width="0.0299%" height="15" fill="rgb(227,1,9)" fg:x="859" fg:w="2"/><text x="13.0997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.15%)</title><rect x="12.7599%" y="213" width="0.1496%" height="15" fill="rgb(248,47,43)" fg:x="853" fg:w="10"/><text x="13.0099%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.15%)</title><rect x="12.7599%" y="197" width="0.1496%" height="15" fill="rgb(221,10,30)" fg:x="853" fg:w="10"/><text x="13.0099%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 0.03%)</title><rect x="12.8796%" y="181" width="0.0299%" height="15" fill="rgb(210,229,1)" fg:x="861" fg:w="2"/><text x="13.1296%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="12.8796%" y="165" width="0.0299%" height="15" fill="rgb(222,148,37)" fg:x="861" fg:w="2"/><text x="13.1296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.03%)</title><rect x="12.9095%" y="213" width="0.0299%" height="15" fill="rgb(234,67,33)" fg:x="863" fg:w="2"/><text x="13.1595%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.03%)</title><rect x="12.9095%" y="197" width="0.0299%" height="15" fill="rgb(247,98,35)" fg:x="863" fg:w="2"/><text x="13.1595%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.25%)</title><rect x="12.9394%" y="213" width="0.2543%" height="15" fill="rgb(247,138,52)" fg:x="865" fg:w="17"/><text x="13.1894%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (112 samples, 1.68%)</title><rect x="13.1937%" y="213" width="1.6754%" height="15" fill="rgb(213,79,30)" fg:x="882" fg:w="112"/><text x="13.4437%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (61 samples, 0.91%)</title><rect x="13.9566%" y="197" width="0.9125%" height="15" fill="rgb(246,177,23)" fg:x="933" fg:w="61"/><text x="14.2066%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (61 samples, 0.91%)</title><rect x="13.9566%" y="181" width="0.9125%" height="15" fill="rgb(230,62,27)" fg:x="933" fg:w="61"/><text x="14.2066%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,014 samples, 15.17%)</title><rect x="0.0150%" y="229" width="15.1683%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="1014"/><text x="0.2650%" y="239.50">gj`&lt;hashbrown::raw::Raw..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (21 samples, 0.31%)</title><rect x="14.8691%" y="213" width="0.3141%" height="15" fill="rgb(244,35,45)" fg:x="994" fg:w="21"/><text x="15.1191%" y="223.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (9 samples, 0.13%)</title><rect x="15.1832%" y="229" width="0.1346%" height="15" fill="rgb(251,115,12)" fg:x="1015" fg:w="9"/><text x="15.4332%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (23 samples, 0.34%)</title><rect x="15.3179%" y="229" width="0.3441%" height="15" fill="rgb(240,54,50)" fg:x="1024" fg:w="23"/><text x="15.5679%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (64 samples, 0.96%)</title><rect x="15.6619%" y="229" width="0.9574%" height="15" fill="rgb(233,84,52)" fg:x="1047" fg:w="64"/><text x="15.9119%" y="239.50"></text></g><g><title>gj`__rdl_alloc (13 samples, 0.19%)</title><rect x="16.6193%" y="229" width="0.1945%" height="15" fill="rgb(207,117,47)" fg:x="1111" fg:w="13"/><text x="16.8693%" y="239.50"></text></g><g><title>gj`__rdl_dealloc (1 samples, 0.01%)</title><rect x="16.8138%" y="229" width="0.0150%" height="15" fill="rgb(249,43,39)" fg:x="1124" fg:w="1"/><text x="17.0638%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (48 samples, 0.72%)</title><rect x="17.0531%" y="213" width="0.7180%" height="15" fill="rgb(209,38,44)" fg:x="1140" fg:w="48"/><text x="17.3031%" y="223.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (11 samples, 0.16%)</title><rect x="17.6066%" y="197" width="0.1645%" height="15" fill="rgb(236,212,23)" fg:x="1177" fg:w="11"/><text x="17.8566%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="17.7711%" y="213" width="0.0150%" height="15" fill="rgb(242,79,21)" fg:x="1188" fg:w="1"/><text x="18.0211%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.52%)</title><rect x="18.7584%" y="181" width="0.5236%" height="15" fill="rgb(211,96,35)" fg:x="1254" fg:w="35"/><text x="19.0084%" y="191.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (50 samples, 0.75%)</title><rect x="18.6088%" y="197" width="0.7479%" height="15" fill="rgb(253,215,40)" fg:x="1244" fg:w="50"/><text x="18.8588%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (5 samples, 0.07%)</title><rect x="19.2820%" y="181" width="0.0748%" height="15" fill="rgb(211,81,21)" fg:x="1289" fg:w="5"/><text x="19.5320%" y="191.50"></text></g><g><title>gj`gj::join::materialize (2 samples, 0.03%)</title><rect x="19.3568%" y="197" width="0.0299%" height="15" fill="rgb(208,190,38)" fg:x="1294" fg:w="2"/><text x="19.6068%" y="207.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.01%)</title><rect x="19.5363%" y="181" width="0.0150%" height="15" fill="rgb(235,213,38)" fg:x="1306" fg:w="1"/><text x="19.7863%" y="191.50"></text></g><g><title>gj`__rdl_alloc (1 samples, 0.01%)</title><rect x="19.7158%" y="165" width="0.0150%" height="15" fill="rgb(237,122,38)" fg:x="1318" fg:w="1"/><text x="19.9658%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.01%)</title><rect x="20.2094%" y="149" width="0.0150%" height="15" fill="rgb(244,218,35)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="20.2094%" y="133" width="0.0150%" height="15" fill="rgb(240,68,47)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="20.2094%" y="117" width="0.0150%" height="15" fill="rgb(210,16,53)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="20.2094%" y="101" width="0.0150%" height="15" fill="rgb(235,124,12)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="20.2094%" y="85" width="0.0150%" height="15" fill="rgb(224,169,11)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (1 samples, 0.01%)</title><rect x="20.2094%" y="69" width="0.0150%" height="15" fill="rgb(250,166,2)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (1 samples, 0.01%)</title><rect x="20.2094%" y="53" width="0.0150%" height="15" fill="rgb(242,216,29)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (1 samples, 0.01%)</title><rect x="20.2094%" y="37" width="0.0150%" height="15" fill="rgb(230,116,27)" fg:x="1351" fg:w="1"/><text x="20.4594%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.10%)</title><rect x="20.3141%" y="133" width="0.1047%" height="15" fill="rgb(228,99,48)" fg:x="1358" fg:w="7"/><text x="20.5641%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (10 samples, 0.15%)</title><rect x="20.8527%" y="101" width="0.1496%" height="15" fill="rgb(253,11,6)" fg:x="1394" fg:w="10"/><text x="21.1027%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (57 samples, 0.85%)</title><rect x="20.4188%" y="117" width="0.8527%" height="15" fill="rgb(247,143,39)" fg:x="1365" fg:w="57"/><text x="20.6688%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (18 samples, 0.27%)</title><rect x="21.0022%" y="101" width="0.2693%" height="15" fill="rgb(236,97,10)" fg:x="1404" fg:w="18"/><text x="21.2522%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 1.08%)</title><rect x="20.2244%" y="149" width="1.0770%" height="15" fill="rgb(233,208,19)" fg:x="1352" fg:w="72"/><text x="20.4744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.88%)</title><rect x="20.4188%" y="133" width="0.8826%" height="15" fill="rgb(216,164,2)" fg:x="1365" fg:w="59"/><text x="20.6688%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="21.2715%" y="117" width="0.0299%" height="15" fill="rgb(220,129,5)" fg:x="1422" fg:w="2"/><text x="21.5215%" y="127.50"></text></g><g><title>gj`gj::join::materialize (106 samples, 1.59%)</title><rect x="19.7307%" y="165" width="1.5856%" height="15" fill="rgb(242,17,10)" fg:x="1319" fg:w="106"/><text x="19.9807%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="21.3014%" y="149" width="0.0150%" height="15" fill="rgb(242,107,0)" fg:x="1424" fg:w="1"/><text x="21.5514%" y="159.50"></text></g><g><title>gj`gj::join::materialize (119 samples, 1.78%)</title><rect x="19.5512%" y="181" width="1.7801%" height="15" fill="rgb(251,28,31)" fg:x="1307" fg:w="119"/><text x="19.8012%" y="191.50">g..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="21.3164%" y="165" width="0.0150%" height="15" fill="rgb(233,223,10)" fg:x="1425" fg:w="1"/><text x="21.5664%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (132 samples, 1.97%)</title><rect x="19.3867%" y="197" width="1.9746%" height="15" fill="rgb(215,21,27)" fg:x="1296" fg:w="132"/><text x="19.6367%" y="207.50">g..</text></g><g><title>gj`gj::join::singleton_join_inner (2 samples, 0.03%)</title><rect x="21.3313%" y="181" width="0.0299%" height="15" fill="rgb(232,23,21)" fg:x="1426" fg:w="2"/><text x="21.5813%" y="191.50"></text></g><g><title>gj`gj::join::singleton_join_inner (2 samples, 0.03%)</title><rect x="21.3313%" y="165" width="0.0299%" height="15" fill="rgb(244,5,23)" fg:x="1426" fg:w="2"/><text x="21.5813%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (2 samples, 0.03%)</title><rect x="21.3313%" y="149" width="0.0299%" height="15" fill="rgb(226,81,46)" fg:x="1426" fg:w="2"/><text x="21.5813%" y="159.50"></text></g><g><title>gj`gj::join::singleton_join_inner (241 samples, 3.61%)</title><rect x="17.7861%" y="213" width="3.6051%" height="15" fill="rgb(247,70,30)" fg:x="1189" fg:w="241"/><text x="18.0361%" y="223.50">gj`g..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (2 samples, 0.03%)</title><rect x="21.3613%" y="197" width="0.0299%" height="15" fill="rgb(212,68,19)" fg:x="1428" fg:w="2"/><text x="21.6113%" y="207.50"></text></g><g><title>gj`gj::join::bushy_join (309 samples, 4.62%)</title><rect x="16.8287%" y="229" width="4.6223%" height="15" fill="rgb(240,187,13)" fg:x="1125" fg:w="309"/><text x="17.0787%" y="239.50">gj`gj..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (4 samples, 0.06%)</title><rect x="21.3912%" y="213" width="0.0598%" height="15" fill="rgb(223,113,26)" fg:x="1430" fg:w="4"/><text x="21.6412%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (1 samples, 0.01%)</title><rect x="21.4510%" y="229" width="0.0150%" height="15" fill="rgb(206,192,2)" fg:x="1434" fg:w="1"/><text x="21.7010%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (20 samples, 0.30%)</title><rect x="21.4660%" y="229" width="0.2992%" height="15" fill="rgb(241,108,4)" fg:x="1435" fg:w="20"/><text x="21.7160%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.06%)</title><rect x="22.7225%" y="213" width="0.0598%" height="15" fill="rgb(247,173,49)" fg:x="1519" fg:w="4"/><text x="22.9725%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="22.7823%" y="213" width="0.0150%" height="15" fill="rgb(224,114,35)" fg:x="1523" fg:w="1"/><text x="23.0323%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.07%)</title><rect x="22.7973%" y="213" width="0.0748%" height="15" fill="rgb(245,159,27)" fg:x="1524" fg:w="5"/><text x="23.0473%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memset (2 samples, 0.03%)</title><rect x="25.6096%" y="197" width="0.0299%" height="15" fill="rgb(245,172,44)" fg:x="1712" fg:w="2"/><text x="25.8596%" y="207.50"></text></g><g><title>gj`__rdl_alloc (1 samples, 0.01%)</title><rect x="25.6395%" y="197" width="0.0150%" height="15" fill="rgb(236,23,11)" fg:x="1714" fg:w="1"/><text x="25.8895%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="25.7592%" y="181" width="0.0150%" height="15" fill="rgb(205,117,38)" fg:x="1722" fg:w="1"/><text x="26.0092%" y="191.50"></text></g><g><title>gj`__rdl_alloc (1 samples, 0.01%)</title><rect x="25.7741%" y="181" width="0.0150%" height="15" fill="rgb(237,72,25)" fg:x="1723" fg:w="1"/><text x="26.0241%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.04%)</title><rect x="26.0434%" y="149" width="0.0449%" height="15" fill="rgb(244,70,9)" fg:x="1741" fg:w="3"/><text x="26.2934%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.09%)</title><rect x="26.7165%" y="117" width="0.0898%" height="15" fill="rgb(217,125,39)" fg:x="1786" fg:w="6"/><text x="26.9665%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (71 samples, 1.06%)</title><rect x="26.1032%" y="133" width="1.0621%" height="15" fill="rgb(235,36,10)" fg:x="1745" fg:w="71"/><text x="26.3532%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (24 samples, 0.36%)</title><rect x="26.8063%" y="117" width="0.3590%" height="15" fill="rgb(251,123,47)" fg:x="1792" fg:w="24"/><text x="27.0563%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (92 samples, 1.38%)</title><rect x="25.8190%" y="165" width="1.3762%" height="15" fill="rgb(221,13,13)" fg:x="1726" fg:w="92"/><text x="26.0690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (74 samples, 1.11%)</title><rect x="26.0883%" y="149" width="1.1070%" height="15" fill="rgb(238,131,9)" fg:x="1744" fg:w="74"/><text x="26.3383%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="27.1653%" y="133" width="0.0299%" height="15" fill="rgb(211,50,8)" fg:x="1816" fg:w="2"/><text x="27.4153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.04%)</title><rect x="27.1952%" y="165" width="0.0449%" height="15" fill="rgb(245,182,24)" fg:x="1818" fg:w="3"/><text x="27.4452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="27.2401%" y="165" width="0.0299%" height="15" fill="rgb(242,14,37)" fg:x="1821" fg:w="2"/><text x="27.4901%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (109 samples, 1.63%)</title><rect x="25.6545%" y="197" width="1.6305%" height="15" fill="rgb(246,228,12)" fg:x="1715" fg:w="109"/><text x="25.9045%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (100 samples, 1.50%)</title><rect x="25.7891%" y="181" width="1.4959%" height="15" fill="rgb(213,55,15)" fg:x="1724" fg:w="100"/><text x="26.0391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="27.2700%" y="165" width="0.0150%" height="15" fill="rgb(209,9,3)" fg:x="1823" fg:w="1"/><text x="27.5200%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="27.2700%" y="149" width="0.0150%" height="15" fill="rgb(230,59,30)" fg:x="1823" fg:w="1"/><text x="27.5200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="27.2700%" y="133" width="0.0150%" height="15" fill="rgb(209,121,21)" fg:x="1823" fg:w="1"/><text x="27.5200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.01%)</title><rect x="27.2700%" y="117" width="0.0150%" height="15" fill="rgb(220,109,13)" fg:x="1823" fg:w="1"/><text x="27.5200%" y="127.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="27.2850%" y="197" width="0.0449%" height="15" fill="rgb(232,18,1)" fg:x="1824" fg:w="3"/><text x="27.5350%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.22%)</title><rect x="30.5460%" y="133" width="0.2244%" height="15" fill="rgb(215,41,42)" fg:x="2042" fg:w="15"/><text x="30.7960%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (106 samples, 1.59%)</title><rect x="29.7382%" y="149" width="1.5856%" height="15" fill="rgb(224,123,36)" fg:x="1988" fg:w="106"/><text x="29.9882%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (37 samples, 0.55%)</title><rect x="30.7704%" y="133" width="0.5535%" height="15" fill="rgb(240,125,3)" fg:x="2057" fg:w="37"/><text x="31.0204%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (122 samples, 1.82%)</title><rect x="29.5288%" y="165" width="1.8250%" height="15" fill="rgb(205,98,50)" fg:x="1974" fg:w="122"/><text x="29.7788%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.03%)</title><rect x="31.3239%" y="149" width="0.0299%" height="15" fill="rgb(205,185,37)" fg:x="2094" fg:w="2"/><text x="31.5739%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.03%)</title><rect x="31.3538%" y="149" width="0.0299%" height="15" fill="rgb(238,207,15)" fg:x="2096" fg:w="2"/><text x="31.6038%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.03%)</title><rect x="31.3538%" y="133" width="0.0299%" height="15" fill="rgb(213,199,42)" fg:x="2096" fg:w="2"/><text x="31.6038%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="31.3687%" y="117" width="0.0150%" height="15" fill="rgb(235,201,11)" fg:x="2097" fg:w="1"/><text x="31.6187%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.03%)</title><rect x="31.3987%" y="133" width="0.0299%" height="15" fill="rgb(207,46,11)" fg:x="2099" fg:w="2"/><text x="31.6487%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (167 samples, 2.50%)</title><rect x="28.9903%" y="181" width="2.4981%" height="15" fill="rgb(241,35,35)" fg:x="1938" fg:w="167"/><text x="29.2403%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.13%)</title><rect x="31.3538%" y="165" width="0.1346%" height="15" fill="rgb(243,32,47)" fg:x="2096" fg:w="9"/><text x="31.6038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.10%)</title><rect x="31.3837%" y="149" width="0.1047%" height="15" fill="rgb(247,202,23)" fg:x="2098" fg:w="7"/><text x="31.6337%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.06%)</title><rect x="31.4286%" y="133" width="0.0598%" height="15" fill="rgb(219,102,11)" fg:x="2101" fg:w="4"/><text x="31.6786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.03%)</title><rect x="31.4884%" y="181" width="0.0299%" height="15" fill="rgb(243,110,44)" fg:x="2105" fg:w="2"/><text x="31.7384%" y="191.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (286 samples, 4.28%)</title><rect x="27.3298%" y="197" width="4.2782%" height="15" fill="rgb(222,74,54)" fg:x="1827" fg:w="286"/><text x="27.5798%" y="207.50">gj`ha..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.09%)</title><rect x="31.5183%" y="181" width="0.0898%" height="15" fill="rgb(216,99,12)" fg:x="2107" fg:w="6"/><text x="31.7683%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="31.6081%" y="197" width="0.0299%" height="15" fill="rgb(226,22,26)" fg:x="2113" fg:w="2"/><text x="31.8581%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.27%)</title><rect x="31.6380%" y="197" width="0.2693%" height="15" fill="rgb(217,163,10)" fg:x="2115" fg:w="18"/><text x="31.8880%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="31.9073%" y="197" width="0.0299%" height="15" fill="rgb(213,25,53)" fg:x="2133" fg:w="2"/><text x="32.1573%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.01%)</title><rect x="31.9222%" y="181" width="0.0150%" height="15" fill="rgb(252,105,26)" fg:x="2134" fg:w="1"/><text x="32.1722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="31.9372%" y="197" width="0.0150%" height="15" fill="rgb(220,39,43)" fg:x="2135" fg:w="1"/><text x="32.1872%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="31.9372%" y="181" width="0.0150%" height="15" fill="rgb(229,68,48)" fg:x="2135" fg:w="1"/><text x="32.1872%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="31.9372%" y="165" width="0.0150%" height="15" fill="rgb(252,8,32)" fg:x="2135" fg:w="1"/><text x="32.1872%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="31.9521%" y="197" width="0.0150%" height="15" fill="rgb(223,20,43)" fg:x="2136" fg:w="1"/><text x="32.2021%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="31.9521%" y="181" width="0.0150%" height="15" fill="rgb(229,81,49)" fg:x="2136" fg:w="1"/><text x="32.2021%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.03%)</title><rect x="31.9671%" y="197" width="0.0299%" height="15" fill="rgb(236,28,36)" fg:x="2137" fg:w="2"/><text x="32.2171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="31.9820%" y="181" width="0.0150%" height="15" fill="rgb(249,185,26)" fg:x="2138" fg:w="1"/><text x="32.2320%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.07%)</title><rect x="31.9970%" y="197" width="0.0748%" height="15" fill="rgb(249,174,33)" fg:x="2139" fg:w="5"/><text x="32.2470%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.04%)</title><rect x="32.0269%" y="181" width="0.0449%" height="15" fill="rgb(233,201,37)" fg:x="2141" fg:w="3"/><text x="32.2769%" y="191.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (649 samples, 9.71%)</title><rect x="22.8721%" y="213" width="9.7083%" height="15" fill="rgb(221,78,26)" fg:x="1529" fg:w="649"/><text x="23.1221%" y="223.50">gj`gj::trie::T..</text></g><g><title>libsystem_platform.dylib`_platform_memset (34 samples, 0.51%)</title><rect x="32.0718%" y="197" width="0.5086%" height="15" fill="rgb(250,127,30)" fg:x="2144" fg:w="34"/><text x="32.3218%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (21 samples, 0.31%)</title><rect x="32.5804%" y="213" width="0.3141%" height="15" fill="rgb(230,49,44)" fg:x="2178" fg:w="21"/><text x="32.8304%" y="223.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.03%)</title><rect x="32.8945%" y="213" width="0.0299%" height="15" fill="rgb(229,67,23)" fg:x="2199" fg:w="2"/><text x="33.1445%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.10%)</title><rect x="33.2835%" y="197" width="0.1047%" height="15" fill="rgb(249,83,47)" fg:x="2225" fg:w="7"/><text x="33.5335%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (16 samples, 0.24%)</title><rect x="34.3904%" y="165" width="0.2393%" height="15" fill="rgb(215,43,3)" fg:x="2299" fg:w="16"/><text x="34.6404%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (84 samples, 1.26%)</title><rect x="33.5976%" y="181" width="1.2565%" height="15" fill="rgb(238,154,13)" fg:x="2246" fg:w="84"/><text x="33.8476%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.22%)</title><rect x="34.6298%" y="165" width="0.2244%" height="15" fill="rgb(219,56,2)" fg:x="2315" fg:w="15"/><text x="34.8798%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (130 samples, 1.94%)</title><rect x="32.9245%" y="213" width="1.9447%" height="15" fill="rgb(233,0,4)" fg:x="2201" fg:w="130"/><text x="33.1745%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (99 samples, 1.48%)</title><rect x="33.3882%" y="197" width="1.4809%" height="15" fill="rgb(235,30,7)" fg:x="2232" fg:w="99"/><text x="33.6382%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="34.8542%" y="181" width="0.0150%" height="15" fill="rgb(250,79,13)" fg:x="2330" fg:w="1"/><text x="35.1042%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.09%)</title><rect x="34.8691%" y="213" width="0.0898%" height="15" fill="rgb(211,146,34)" fg:x="2331" fg:w="6"/><text x="35.1191%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (27 samples, 0.40%)</title><rect x="36.1257%" y="197" width="0.4039%" height="15" fill="rgb(228,22,38)" fg:x="2415" fg:w="27"/><text x="36.3757%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 1.65%)</title><rect x="34.9589%" y="213" width="1.6455%" height="15" fill="rgb(235,168,5)" fg:x="2337" fg:w="110"/><text x="35.2089%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.07%)</title><rect x="36.5295%" y="197" width="0.0748%" height="15" fill="rgb(221,155,16)" fg:x="2442" fg:w="5"/><text x="36.7795%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.04%)</title><rect x="36.6043%" y="213" width="0.0449%" height="15" fill="rgb(215,215,53)" fg:x="2447" fg:w="3"/><text x="36.8543%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (25 samples, 0.37%)</title><rect x="36.6492%" y="213" width="0.3740%" height="15" fill="rgb(223,4,10)" fg:x="2450" fg:w="25"/><text x="36.8992%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="37.0232%" y="213" width="0.0299%" height="15" fill="rgb(234,103,6)" fg:x="2475" fg:w="2"/><text x="37.2732%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (1,044 samples, 15.62%)</title><rect x="21.7651%" y="229" width="15.6171%" height="15" fill="rgb(227,97,0)" fg:x="1455" fg:w="1044"/><text x="22.0151%" y="239.50">gj`gj::util::build_tables</text></g><g><title>libsystem_malloc.dylib`nanov2_size (22 samples, 0.33%)</title><rect x="37.0531%" y="213" width="0.3291%" height="15" fill="rgb(234,150,53)" fg:x="2477" fg:w="22"/><text x="37.3031%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (84 samples, 1.26%)</title><rect x="37.3822%" y="229" width="1.2565%" height="15" fill="rgb(228,201,54)" fg:x="2499" fg:w="84"/><text x="37.6322%" y="239.50"></text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (84 samples, 1.26%)</title><rect x="37.3822%" y="213" width="1.2565%" height="15" fill="rgb(222,22,37)" fg:x="2499" fg:w="84"/><text x="37.6322%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (84 samples, 1.26%)</title><rect x="37.3822%" y="197" width="1.2565%" height="15" fill="rgb(237,53,32)" fg:x="2499" fg:w="84"/><text x="37.6322%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (84 samples, 1.26%)</title><rect x="37.3822%" y="181" width="1.2565%" height="15" fill="rgb(233,25,53)" fg:x="2499" fg:w="84"/><text x="37.6322%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (84 samples, 1.26%)</title><rect x="37.3822%" y="165" width="1.2565%" height="15" fill="rgb(210,40,34)" fg:x="2499" fg:w="84"/><text x="37.6322%" y="175.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.10%)</title><rect x="38.6387%" y="213" width="0.1047%" height="15" fill="rgb(241,220,44)" fg:x="2583" fg:w="7"/><text x="38.8887%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.10%)</title><rect x="38.7435%" y="213" width="0.1047%" height="15" fill="rgb(235,28,35)" fg:x="2590" fg:w="7"/><text x="38.9935%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (36 samples, 0.54%)</title><rect x="38.8482%" y="213" width="0.5385%" height="15" fill="rgb(210,56,17)" fg:x="2597" fg:w="36"/><text x="39.0982%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (7 samples, 0.10%)</title><rect x="39.3867%" y="213" width="0.1047%" height="15" fill="rgb(224,130,29)" fg:x="2633" fg:w="7"/><text x="39.6367%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (9 samples, 0.13%)</title><rect x="39.4914%" y="213" width="0.1346%" height="15" fill="rgb(235,212,8)" fg:x="2640" fg:w="9"/><text x="39.7414%" y="223.50"></text></g><g><title>gj`__rdl_alloc (8 samples, 0.12%)</title><rect x="39.6260%" y="213" width="0.1197%" height="15" fill="rgb(223,33,50)" fg:x="2649" fg:w="8"/><text x="39.8760%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (6 samples, 0.09%)</title><rect x="39.7457%" y="213" width="0.0898%" height="15" fill="rgb(219,149,13)" fg:x="2657" fg:w="6"/><text x="39.9957%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.09%)</title><rect x="43.5752%" y="165" width="0.0898%" height="15" fill="rgb(250,156,29)" fg:x="2913" fg:w="6"/><text x="43.8252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (40 samples, 0.60%)</title><rect x="44.9963%" y="133" width="0.5984%" height="15" fill="rgb(216,193,19)" fg:x="3008" fg:w="40"/><text x="45.2463%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (112 samples, 1.68%)</title><rect x="43.9791%" y="149" width="1.6754%" height="15" fill="rgb(216,135,14)" fg:x="2940" fg:w="112"/><text x="44.2291%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.06%)</title><rect x="45.5946%" y="133" width="0.0598%" height="15" fill="rgb(241,47,5)" fg:x="3048" fg:w="4"/><text x="45.8446%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="45.6395%" y="117" width="0.0150%" height="15" fill="rgb(233,42,35)" fg:x="3051" fg:w="1"/><text x="45.8895%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (189 samples, 2.83%)</title><rect x="42.9469%" y="181" width="2.8272%" height="15" fill="rgb(231,13,6)" fg:x="2871" fg:w="189"/><text x="43.1969%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (141 samples, 2.11%)</title><rect x="43.6649%" y="165" width="2.1092%" height="15" fill="rgb(207,181,40)" fg:x="2919" fg:w="141"/><text x="43.9149%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.12%)</title><rect x="45.6545%" y="149" width="0.1197%" height="15" fill="rgb(254,173,49)" fg:x="3052" fg:w="8"/><text x="45.9045%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.21%)</title><rect x="45.7741%" y="181" width="0.2094%" height="15" fill="rgb(221,1,38)" fg:x="3060" fg:w="14"/><text x="46.0241%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (218 samples, 3.26%)</title><rect x="42.7375%" y="197" width="3.2610%" height="15" fill="rgb(206,124,46)" fg:x="2857" fg:w="218"/><text x="42.9875%" y="207.50">gj`..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="45.9835%" y="181" width="0.0150%" height="15" fill="rgb(249,21,11)" fg:x="3074" fg:w="1"/><text x="46.2335%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.73%)</title><rect x="45.9985%" y="197" width="0.7330%" height="15" fill="rgb(222,201,40)" fg:x="3075" fg:w="49"/><text x="46.2485%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (157 samples, 2.35%)</title><rect x="46.7315%" y="197" width="2.3485%" height="15" fill="rgb(235,61,29)" fg:x="3124" fg:w="157"/><text x="46.9815%" y="207.50">g..</text></g><g><title>gj`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="50.4562%" y="149" width="0.0150%" height="15" fill="rgb(219,207,3)" fg:x="3373" fg:w="1"/><text x="50.7062%" y="159.50"></text></g><g><title>gj`__rdl_alloc (5 samples, 0.07%)</title><rect x="50.4712%" y="149" width="0.0748%" height="15" fill="rgb(222,56,46)" fg:x="3374" fg:w="5"/><text x="50.7212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.10%)</title><rect x="51.0845%" y="117" width="0.1047%" height="15" fill="rgb(239,76,54)" fg:x="3415" fg:w="7"/><text x="51.3345%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="51.3089%" y="101" width="0.0449%" height="15" fill="rgb(231,124,27)" fg:x="3430" fg:w="3"/><text x="51.5589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (23 samples, 0.34%)</title><rect x="51.9671%" y="85" width="0.3441%" height="15" fill="rgb(249,195,6)" fg:x="3474" fg:w="23"/><text x="52.2171%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (140 samples, 2.09%)</title><rect x="51.1892%" y="117" width="2.0942%" height="15" fill="rgb(237,174,47)" fg:x="3422" fg:w="140"/><text x="51.4392%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (129 samples, 1.93%)</title><rect x="51.3538%" y="101" width="1.9297%" height="15" fill="rgb(206,201,31)" fg:x="3433" fg:w="129"/><text x="51.6038%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (65 samples, 0.97%)</title><rect x="52.3111%" y="85" width="0.9723%" height="15" fill="rgb(231,57,52)" fg:x="3497" fg:w="65"/><text x="52.5611%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.43%)</title><rect x="52.8497%" y="69" width="0.4338%" height="15" fill="rgb(248,177,22)" fg:x="3533" fg:w="29"/><text x="53.0997%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (175 samples, 2.62%)</title><rect x="50.7105%" y="133" width="2.6178%" height="15" fill="rgb(215,211,37)" fg:x="3390" fg:w="175"/><text x="50.9605%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="53.2835%" y="117" width="0.0449%" height="15" fill="rgb(241,128,51)" fg:x="3562" fg:w="3"/><text x="53.5335%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (8 samples, 0.12%)</title><rect x="53.3283%" y="133" width="0.1197%" height="15" fill="rgb(227,165,31)" fg:x="3565" fg:w="8"/><text x="53.5783%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="53.4480%" y="133" width="0.0150%" height="15" fill="rgb(228,167,24)" fg:x="3573" fg:w="1"/><text x="53.6980%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (205 samples, 3.07%)</title><rect x="50.5460%" y="149" width="3.0666%" height="15" fill="rgb(228,143,12)" fg:x="3379" fg:w="205"/><text x="50.7960%" y="159.50">gj`..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.15%)</title><rect x="53.4630%" y="133" width="0.1496%" height="15" fill="rgb(249,149,8)" fg:x="3574" fg:w="10"/><text x="53.7130%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (230 samples, 3.44%)</title><rect x="50.1870%" y="165" width="3.4405%" height="15" fill="rgb(243,35,44)" fg:x="3355" fg:w="230"/><text x="50.4370%" y="175.50">gj`..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="53.6126%" y="149" width="0.0150%" height="15" fill="rgb(246,89,9)" fg:x="3584" fg:w="1"/><text x="53.8626%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="53.6275%" y="165" width="0.0449%" height="15" fill="rgb(233,213,13)" fg:x="3585" fg:w="3"/><text x="53.8775%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (41 samples, 0.61%)</title><rect x="53.6724%" y="165" width="0.6133%" height="15" fill="rgb(233,141,41)" fg:x="3588" fg:w="41"/><text x="53.9224%" y="175.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (1 samples, 0.01%)</title><rect x="54.7644%" y="149" width="0.0150%" height="15" fill="rgb(239,167,4)" fg:x="3661" fg:w="1"/><text x="55.0144%" y="159.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (36 samples, 0.54%)</title><rect x="54.7794%" y="149" width="0.5385%" height="15" fill="rgb(209,217,16)" fg:x="3662" fg:w="36"/><text x="55.0294%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="56.2304%" y="133" width="0.0150%" height="15" fill="rgb(219,88,35)" fg:x="3759" fg:w="1"/><text x="56.4804%" y="143.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="56.2453%" y="133" width="0.0449%" height="15" fill="rgb(220,193,23)" fg:x="3760" fg:w="3"/><text x="56.4953%" y="143.50"></text></g><g><title>gj`bytes::bytes::shared_drop (1 samples, 0.01%)</title><rect x="56.2902%" y="133" width="0.0150%" height="15" fill="rgb(230,90,52)" fg:x="3763" fg:w="1"/><text x="56.5402%" y="143.50"></text></g><g><title>gj`core::str::converts::from_utf8 (8 samples, 0.12%)</title><rect x="56.3052%" y="133" width="0.1197%" height="15" fill="rgb(252,106,19)" fg:x="3764" fg:w="8"/><text x="56.5552%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.01%)</title><rect x="56.6043%" y="101" width="0.0150%" height="15" fill="rgb(206,74,20)" fg:x="3784" fg:w="1"/><text x="56.8543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.04%)</title><rect x="56.8287%" y="69" width="0.0449%" height="15" fill="rgb(230,138,44)" fg:x="3799" fg:w="3"/><text x="57.0787%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.39%)</title><rect x="56.4996%" y="117" width="0.3889%" height="15" fill="rgb(235,182,43)" fg:x="3777" fg:w="26"/><text x="56.7496%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.27%)</title><rect x="56.6193%" y="101" width="0.2693%" height="15" fill="rgb(242,16,51)" fg:x="3785" fg:w="18"/><text x="56.8693%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.21%)</title><rect x="56.6791%" y="85" width="0.2094%" height="15" fill="rgb(248,9,4)" fg:x="3789" fg:w="14"/><text x="56.9291%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="56.8736%" y="69" width="0.0150%" height="15" fill="rgb(210,31,22)" fg:x="3802" fg:w="1"/><text x="57.1236%" y="79.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (33 samples, 0.49%)</title><rect x="56.4248%" y="133" width="0.4936%" height="15" fill="rgb(239,54,39)" fg:x="3772" fg:w="33"/><text x="56.6748%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.03%)</title><rect x="56.8886%" y="117" width="0.0299%" height="15" fill="rgb(230,99,41)" fg:x="3803" fg:w="2"/><text x="57.1386%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="56.9185%" y="133" width="0.0150%" height="15" fill="rgb(253,106,12)" fg:x="3805" fg:w="1"/><text x="57.1685%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (134 samples, 2.00%)</title><rect x="55.3179%" y="149" width="2.0045%" height="15" fill="rgb(213,46,41)" fg:x="3698" fg:w="134"/><text x="55.5679%" y="159.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.39%)</title><rect x="56.9334%" y="133" width="0.3889%" height="15" fill="rgb(215,133,35)" fg:x="3806" fg:w="26"/><text x="57.1834%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (28 samples, 0.42%)</title><rect x="57.7412%" y="101" width="0.4188%" height="15" fill="rgb(213,28,5)" fg:x="3860" fg:w="28"/><text x="57.9912%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (10 samples, 0.15%)</title><rect x="58.0105%" y="85" width="0.1496%" height="15" fill="rgb(215,77,49)" fg:x="3878" fg:w="10"/><text x="58.2605%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (57 samples, 0.85%)</title><rect x="57.4271%" y="117" width="0.8527%" height="15" fill="rgb(248,100,22)" fg:x="3839" fg:w="57"/><text x="57.6771%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (8 samples, 0.12%)</title><rect x="58.1601%" y="101" width="0.1197%" height="15" fill="rgb(208,67,9)" fg:x="3888" fg:w="8"/><text x="58.4101%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (4 samples, 0.06%)</title><rect x="58.2797%" y="117" width="0.0598%" height="15" fill="rgb(219,133,21)" fg:x="3896" fg:w="4"/><text x="58.5297%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (67 samples, 1.00%)</title><rect x="57.4271%" y="133" width="1.0022%" height="15" fill="rgb(246,46,29)" fg:x="3839" fg:w="67"/><text x="57.6771%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.09%)</title><rect x="58.3396%" y="117" width="0.0898%" height="15" fill="rgb(246,185,52)" fg:x="3900" fg:w="6"/><text x="58.5896%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (278 samples, 4.16%)</title><rect x="54.2857%" y="165" width="4.1586%" height="15" fill="rgb(252,136,11)" fg:x="3629" fg:w="278"/><text x="54.5357%" y="175.50">gj`pa..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (75 samples, 1.12%)</title><rect x="57.3224%" y="149" width="1.1219%" height="15" fill="rgb(219,138,53)" fg:x="3832" fg:w="75"/><text x="57.5724%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (1 samples, 0.01%)</title><rect x="58.4293%" y="133" width="0.0150%" height="15" fill="rgb(211,51,23)" fg:x="3906" fg:w="1"/><text x="58.6793%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (8 samples, 0.12%)</title><rect x="58.4443%" y="165" width="0.1197%" height="15" fill="rgb(247,221,28)" fg:x="3907" fg:w="8"/><text x="58.6943%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (18 samples, 0.27%)</title><rect x="58.5639%" y="165" width="0.2693%" height="15" fill="rgb(251,222,45)" fg:x="3915" fg:w="18"/><text x="58.8139%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (17 samples, 0.25%)</title><rect x="58.8332%" y="165" width="0.2543%" height="15" fill="rgb(217,162,53)" fg:x="3933" fg:w="17"/><text x="59.0832%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.15%)</title><rect x="59.7906%" y="149" width="0.1496%" height="15" fill="rgb(229,93,14)" fg:x="3997" fg:w="10"/><text x="60.0406%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.42%)</title><rect x="61.3762%" y="117" width="0.4188%" height="15" fill="rgb(209,67,49)" fg:x="4103" fg:w="28"/><text x="61.6262%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (94 samples, 1.41%)</title><rect x="60.4188%" y="133" width="1.4061%" height="15" fill="rgb(213,87,29)" fg:x="4039" fg:w="94"/><text x="60.6688%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="61.7951%" y="117" width="0.0299%" height="15" fill="rgb(205,151,52)" fg:x="4131" fg:w="2"/><text x="62.0451%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (194 samples, 2.90%)</title><rect x="59.0875%" y="165" width="2.9020%" height="15" fill="rgb(253,215,39)" fg:x="3950" fg:w="194"/><text x="59.3375%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (137 samples, 2.05%)</title><rect x="59.9402%" y="149" width="2.0494%" height="15" fill="rgb(221,220,41)" fg:x="4007" fg:w="137"/><text x="60.1902%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.16%)</title><rect x="61.8250%" y="133" width="0.1645%" height="15" fill="rgb(218,133,21)" fg:x="4133" fg:w="11"/><text x="62.0750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (12 samples, 0.18%)</title><rect x="61.9895%" y="165" width="0.1795%" height="15" fill="rgb(221,193,43)" fg:x="4144" fg:w="12"/><text x="62.2395%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (869 samples, 13.00%)</title><rect x="49.1847%" y="181" width="12.9993%" height="15" fill="rgb(240,128,52)" fg:x="3288" fg:w="869"/><text x="49.4347%" y="191.50">gj`&lt;parquet::record:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="62.1690%" y="165" width="0.0150%" height="15" fill="rgb(253,114,12)" fg:x="4156" fg:w="1"/><text x="62.4190%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (10 samples, 0.15%)</title><rect x="62.1840%" y="181" width="0.1496%" height="15" fill="rgb(215,223,47)" fg:x="4157" fg:w="10"/><text x="62.4340%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (9 samples, 0.13%)</title><rect x="62.3336%" y="181" width="0.1346%" height="15" fill="rgb(248,225,23)" fg:x="4167" fg:w="9"/><text x="62.5836%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (8 samples, 0.12%)</title><rect x="62.4682%" y="181" width="0.1197%" height="15" fill="rgb(250,108,0)" fg:x="4176" fg:w="8"/><text x="62.7182%" y="191.50"></text></g><g><title>gj`__rdl_alloc (9 samples, 0.13%)</title><rect x="62.5879%" y="181" width="0.1346%" height="15" fill="rgb(228,208,7)" fg:x="4184" fg:w="9"/><text x="62.8379%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.06%)</title><rect x="62.7225%" y="181" width="0.0598%" height="15" fill="rgb(244,45,10)" fg:x="4193" fg:w="4"/><text x="62.9725%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (1 samples, 0.01%)</title><rect x="62.7823%" y="181" width="0.0150%" height="15" fill="rgb(207,125,25)" fg:x="4197" fg:w="1"/><text x="63.0323%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (1 samples, 0.01%)</title><rect x="62.7823%" y="165" width="0.0150%" height="15" fill="rgb(210,195,18)" fg:x="4197" fg:w="1"/><text x="63.0323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="62.7823%" y="149" width="0.0150%" height="15" fill="rgb(249,80,12)" fg:x="4197" fg:w="1"/><text x="63.0323%" y="159.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (73 samples, 1.09%)</title><rect x="62.7973%" y="69" width="1.0920%" height="15" fill="rgb(221,65,9)" fg:x="4198" fg:w="73"/><text x="63.0473%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (74 samples, 1.11%)</title><rect x="62.7973%" y="85" width="1.1070%" height="15" fill="rgb(235,49,36)" fg:x="4198" fg:w="74"/><text x="63.0473%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="63.8893%" y="69" width="0.0150%" height="15" fill="rgb(225,32,20)" fg:x="4271" fg:w="1"/><text x="64.1393%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="63.9043%" y="85" width="0.0150%" height="15" fill="rgb(215,141,46)" fg:x="4272" fg:w="1"/><text x="64.1543%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="63.9043%" y="69" width="0.0150%" height="15" fill="rgb(250,160,47)" fg:x="4272" fg:w="1"/><text x="64.1543%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (78 samples, 1.17%)</title><rect x="62.7973%" y="101" width="1.1668%" height="15" fill="rgb(216,222,40)" fg:x="4198" fg:w="78"/><text x="63.0473%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.04%)</title><rect x="63.9192%" y="85" width="0.0449%" height="15" fill="rgb(234,217,39)" fg:x="4273" fg:w="3"/><text x="64.1692%" y="95.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (1 samples, 0.01%)</title><rect x="63.9641%" y="101" width="0.0150%" height="15" fill="rgb(207,178,40)" fg:x="4276" fg:w="1"/><text x="64.2141%" y="111.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (1 samples, 0.01%)</title><rect x="63.9641%" y="85" width="0.0150%" height="15" fill="rgb(221,136,13)" fg:x="4276" fg:w="1"/><text x="64.2141%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (1 samples, 0.01%)</title><rect x="63.9641%" y="69" width="0.0150%" height="15" fill="rgb(249,199,10)" fg:x="4276" fg:w="1"/><text x="64.2141%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.01%)</title><rect x="63.9641%" y="53" width="0.0150%" height="15" fill="rgb(249,222,13)" fg:x="4276" fg:w="1"/><text x="64.2141%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.01%)</title><rect x="63.9641%" y="37" width="0.0150%" height="15" fill="rgb(244,185,38)" fg:x="4276" fg:w="1"/><text x="64.2141%" y="47.50"></text></g><g><title>gj`std::io::default_read_buf (8 samples, 0.12%)</title><rect x="63.9791%" y="85" width="0.1197%" height="15" fill="rgb(236,202,9)" fg:x="4277" fg:w="8"/><text x="64.2291%" y="95.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="63.9791%" y="69" width="0.1197%" height="15" fill="rgb(250,229,37)" fg:x="4277" fg:w="8"/><text x="64.2291%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (8 samples, 0.12%)</title><rect x="63.9791%" y="53" width="0.1197%" height="15" fill="rgb(206,174,23)" fg:x="4277" fg:w="8"/><text x="64.2291%" y="63.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (88 samples, 1.32%)</title><rect x="62.7973%" y="181" width="1.3164%" height="15" fill="rgb(211,33,43)" fg:x="4198" fg:w="88"/><text x="63.0473%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (88 samples, 1.32%)</title><rect x="62.7973%" y="165" width="1.3164%" height="15" fill="rgb(245,58,50)" fg:x="4198" fg:w="88"/><text x="63.0473%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (88 samples, 1.32%)</title><rect x="62.7973%" y="149" width="1.3164%" height="15" fill="rgb(244,68,36)" fg:x="4198" fg:w="88"/><text x="63.0473%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (88 samples, 1.32%)</title><rect x="62.7973%" y="133" width="1.3164%" height="15" fill="rgb(232,229,15)" fg:x="4198" fg:w="88"/><text x="63.0473%" y="143.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (88 samples, 1.32%)</title><rect x="62.7973%" y="117" width="1.3164%" height="15" fill="rgb(254,30,23)" fg:x="4198" fg:w="88"/><text x="63.0473%" y="127.50"></text></g><g><title>gj`std::io::Read::read_to_end (9 samples, 0.13%)</title><rect x="63.9791%" y="101" width="0.1346%" height="15" fill="rgb(235,160,14)" fg:x="4277" fg:w="9"/><text x="64.2291%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="64.0987%" y="85" width="0.0150%" height="15" fill="rgb(212,155,44)" fg:x="4285" fg:w="1"/><text x="64.3487%" y="95.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (2 samples, 0.03%)</title><rect x="64.1137%" y="181" width="0.0299%" height="15" fill="rgb(226,2,50)" fg:x="4286" fg:w="2"/><text x="64.3637%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (13 samples, 0.19%)</title><rect x="64.1436%" y="181" width="0.1945%" height="15" fill="rgb(234,177,6)" fg:x="4288" fg:w="13"/><text x="64.3936%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (2 samples, 0.03%)</title><rect x="64.3381%" y="181" width="0.0299%" height="15" fill="rgb(217,24,9)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::reader_tree (2 samples, 0.03%)</title><rect x="64.3381%" y="165" width="0.0299%" height="15" fill="rgb(220,13,46)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="175.50"></text></g><g><title>gj`parquet::file::reader::RowGroupReader::get_column_reader (2 samples, 0.03%)</title><rect x="64.3381%" y="149" width="0.0299%" height="15" fill="rgb(239,221,27)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="159.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedRowGroupReader&lt;R&gt; as parquet::file::reader::RowGroupReader&gt;::get_column_page_reader (2 samples, 0.03%)</title><rect x="64.3381%" y="133" width="0.0299%" height="15" fill="rgb(222,198,25)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="143.50"></text></g><g><title>gj`parquet::file::serialized_reader::_&lt;impl parquet::file::reader::ChunkReader for std::fs::File&gt;::get_read (2 samples, 0.03%)</title><rect x="64.3381%" y="117" width="0.0299%" height="15" fill="rgb(211,99,13)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="127.50"></text></g><g><title>gj`parquet::util::io::FileSource&lt;R&gt;::new (2 samples, 0.03%)</title><rect x="64.3381%" y="101" width="0.0299%" height="15" fill="rgb(232,111,31)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="111.50"></text></g><g><title>gj`std::fs::File::try_clone (2 samples, 0.03%)</title><rect x="64.3381%" y="85" width="0.0299%" height="15" fill="rgb(245,82,37)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (2 samples, 0.03%)</title><rect x="64.3381%" y="69" width="0.0299%" height="15" fill="rgb(227,149,46)" fg:x="4301" fg:w="2"/><text x="64.5881%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.19%)</title><rect x="64.3680%" y="181" width="0.1945%" height="15" fill="rgb(218,36,50)" fg:x="4303" fg:w="13"/><text x="64.6180%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (1,095 samples, 16.38%)</title><rect x="49.0800%" y="197" width="16.3800%" height="15" fill="rgb(226,80,48)" fg:x="3281" fg:w="1095"/><text x="49.3300%" y="207.50">gj`&lt;parquet::record::read..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (60 samples, 0.90%)</title><rect x="64.5625%" y="181" width="0.8975%" height="15" fill="rgb(238,224,15)" fg:x="4316" fg:w="60"/><text x="64.8125%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (8 samples, 0.12%)</title><rect x="65.4600%" y="197" width="0.1197%" height="15" fill="rgb(241,136,10)" fg:x="4376" fg:w="8"/><text x="65.7100%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (20 samples, 0.30%)</title><rect x="65.5797%" y="197" width="0.2992%" height="15" fill="rgb(208,32,45)" fg:x="4384" fg:w="20"/><text x="65.8297%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (4 samples, 0.06%)</title><rect x="65.8788%" y="197" width="0.0598%" height="15" fill="rgb(207,135,9)" fg:x="4404" fg:w="4"/><text x="66.1288%" y="207.50"></text></g><g><title>gj`__rdl_alloc (10 samples, 0.15%)</title><rect x="65.9387%" y="197" width="0.1496%" height="15" fill="rgb(206,86,44)" fg:x="4408" fg:w="10"/><text x="66.1887%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.01%)</title><rect x="66.0883%" y="117" width="0.0150%" height="15" fill="rgb(245,177,15)" fg:x="4418" fg:w="1"/><text x="66.3383%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.01%)</title><rect x="66.0883%" y="101" width="0.0150%" height="15" fill="rgb(206,64,50)" fg:x="4418" fg:w="1"/><text x="66.3383%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="66.1032%" y="117" width="0.0150%" height="15" fill="rgb(234,36,40)" fg:x="4419" fg:w="1"/><text x="66.3532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="66.1032%" y="101" width="0.0150%" height="15" fill="rgb(213,64,8)" fg:x="4419" fg:w="1"/><text x="66.3532%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="66.1032%" y="85" width="0.0150%" height="15" fill="rgb(210,75,36)" fg:x="4419" fg:w="1"/><text x="66.3532%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="66.1182%" y="117" width="0.0150%" height="15" fill="rgb(229,88,21)" fg:x="4420" fg:w="1"/><text x="66.3682%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="66.1182%" y="101" width="0.0150%" height="15" fill="rgb(252,204,47)" fg:x="4420" fg:w="1"/><text x="66.3682%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.06%)</title><rect x="66.0883%" y="133" width="0.0598%" height="15" fill="rgb(208,77,27)" fg:x="4418" fg:w="4"/><text x="66.3383%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (1 samples, 0.01%)</title><rect x="66.1331%" y="117" width="0.0150%" height="15" fill="rgb(221,76,26)" fg:x="4421" fg:w="1"/><text x="66.3831%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (1 samples, 0.01%)</title><rect x="66.1331%" y="101" width="0.0150%" height="15" fill="rgb(225,139,18)" fg:x="4421" fg:w="1"/><text x="66.3831%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (1 samples, 0.01%)</title><rect x="66.1331%" y="85" width="0.0150%" height="15" fill="rgb(230,137,11)" fg:x="4421" fg:w="1"/><text x="66.3831%" y="95.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.12%)</title><rect x="66.0883%" y="197" width="0.1197%" height="15" fill="rgb(212,28,1)" fg:x="4418" fg:w="8"/><text x="66.3383%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (8 samples, 0.12%)</title><rect x="66.0883%" y="181" width="0.1197%" height="15" fill="rgb(248,164,17)" fg:x="4418" fg:w="8"/><text x="66.3383%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.12%)</title><rect x="66.0883%" y="165" width="0.1197%" height="15" fill="rgb(222,171,42)" fg:x="4418" fg:w="8"/><text x="66.3383%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.12%)</title><rect x="66.0883%" y="149" width="0.1197%" height="15" fill="rgb(243,84,45)" fg:x="4418" fg:w="8"/><text x="66.3383%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="66.1481%" y="133" width="0.0598%" height="15" fill="rgb(252,49,23)" fg:x="4422" fg:w="4"/><text x="66.3981%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (23 samples, 0.34%)</title><rect x="66.2079%" y="197" width="0.3441%" height="15" fill="rgb(215,19,7)" fg:x="4426" fg:w="23"/><text x="66.4579%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (18 samples, 0.27%)</title><rect x="66.5520%" y="197" width="0.2693%" height="15" fill="rgb(238,81,41)" fg:x="4449" fg:w="18"/><text x="66.8020%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (205 samples, 3.07%)</title><rect x="67.6739%" y="181" width="3.0666%" height="15" fill="rgb(210,199,37)" fg:x="4524" fg:w="205"/><text x="67.9239%" y="191.50">gj`..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (316 samples, 4.73%)</title><rect x="66.8212%" y="197" width="4.7270%" height="15" fill="rgb(244,192,49)" fg:x="4467" fg:w="316"/><text x="67.0712%" y="207.50">gj`has..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (54 samples, 0.81%)</title><rect x="70.7405%" y="181" width="0.8078%" height="15" fill="rgb(226,211,11)" fg:x="4729" fg:w="54"/><text x="70.9905%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.10%)</title><rect x="72.3261%" y="181" width="0.1047%" height="15" fill="rgb(236,162,54)" fg:x="4835" fg:w="7"/><text x="72.5761%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (33 samples, 0.49%)</title><rect x="73.8220%" y="149" width="0.4936%" height="15" fill="rgb(220,229,9)" fg:x="4935" fg:w="33"/><text x="74.0720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (107 samples, 1.60%)</title><rect x="72.7300%" y="165" width="1.6006%" height="15" fill="rgb(250,87,22)" fg:x="4862" fg:w="107"/><text x="72.9800%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="74.3156%" y="149" width="0.0150%" height="15" fill="rgb(239,43,17)" fg:x="4968" fg:w="1"/><text x="74.5656%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (192 samples, 2.87%)</title><rect x="71.5482%" y="197" width="2.8721%" height="15" fill="rgb(231,177,25)" fg:x="4783" fg:w="192"/><text x="71.7982%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (133 samples, 1.99%)</title><rect x="72.4308%" y="181" width="1.9895%" height="15" fill="rgb(219,179,1)" fg:x="4842" fg:w="133"/><text x="72.6808%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.09%)</title><rect x="74.3306%" y="165" width="0.0898%" height="15" fill="rgb(238,219,53)" fg:x="4969" fg:w="6"/><text x="74.5806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (19 samples, 0.28%)</title><rect x="74.4203%" y="197" width="0.2842%" height="15" fill="rgb(232,167,36)" fg:x="4975" fg:w="19"/><text x="74.6703%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (233 samples, 3.49%)</title><rect x="80.1346%" y="181" width="3.4854%" height="15" fill="rgb(244,19,51)" fg:x="5357" fg:w="233"/><text x="80.3846%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.16%)</title><rect x="83.6200%" y="181" width="0.1645%" height="15" fill="rgb(224,6,22)" fg:x="5590" fg:w="11"/><text x="83.8700%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (633 samples, 9.47%)</title><rect x="74.7046%" y="197" width="9.4690%" height="15" fill="rgb(224,145,5)" fg:x="4994" fg:w="633"/><text x="74.9546%" y="207.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`szone_size (26 samples, 0.39%)</title><rect x="83.7846%" y="181" width="0.3889%" height="15" fill="rgb(234,130,49)" fg:x="5601" fg:w="26"/><text x="84.0346%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.39%)</title><rect x="83.7846%" y="165" width="0.3889%" height="15" fill="rgb(254,6,2)" fg:x="5601" fg:w="26"/><text x="84.0346%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (33 samples, 0.49%)</title><rect x="85.3254%" y="165" width="0.4936%" height="15" fill="rgb(208,96,46)" fg:x="5704" fg:w="33"/><text x="85.5754%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (124 samples, 1.85%)</title><rect x="84.1735%" y="197" width="1.8549%" height="15" fill="rgb(239,3,39)" fg:x="5627" fg:w="124"/><text x="84.4235%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (91 samples, 1.36%)</title><rect x="84.6672%" y="181" width="1.3613%" height="15" fill="rgb(233,210,1)" fg:x="5660" fg:w="91"/><text x="84.9172%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.21%)</title><rect x="85.8190%" y="165" width="0.2094%" height="15" fill="rgb(244,137,37)" fg:x="5737" fg:w="14"/><text x="86.0690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (26 samples, 0.39%)</title><rect x="86.0284%" y="197" width="0.3889%" height="15" fill="rgb(240,136,2)" fg:x="5751" fg:w="26"/><text x="86.2784%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (139 samples, 2.08%)</title><rect x="86.4174%" y="197" width="2.0793%" height="15" fill="rgb(239,18,37)" fg:x="5777" fg:w="139"/><text x="86.6674%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (51 samples, 0.76%)</title><rect x="88.4966%" y="197" width="0.7629%" height="15" fill="rgb(218,185,22)" fg:x="5916" fg:w="51"/><text x="88.7466%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.09%)</title><rect x="89.2595%" y="197" width="0.0898%" height="15" fill="rgb(225,218,4)" fg:x="5967" fg:w="6"/><text x="89.5095%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.07%)</title><rect x="89.3493%" y="197" width="0.0748%" height="15" fill="rgb(230,182,32)" fg:x="5973" fg:w="5"/><text x="89.5993%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.21%)</title><rect x="89.4241%" y="197" width="0.2094%" height="15" fill="rgb(242,56,43)" fg:x="5978" fg:w="14"/><text x="89.6741%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (151 samples, 2.26%)</title><rect x="89.6335%" y="197" width="2.2588%" height="15" fill="rgb(233,99,24)" fg:x="5992" fg:w="151"/><text x="89.8835%" y="207.50">l..</text></g><g><title>gj`gj::util::from_parquet (3,565 samples, 53.33%)</title><rect x="39.8355%" y="213" width="53.3283%" height="15" fill="rgb(234,209,42)" fg:x="2663" fg:w="3565"/><text x="40.0855%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (85 samples, 1.27%)</title><rect x="91.8923%" y="197" width="1.2715%" height="15" fill="rgb(227,7,12)" fg:x="6143" fg:w="85"/><text x="92.1423%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (26 samples, 0.39%)</title><rect x="93.1638%" y="213" width="0.3889%" height="15" fill="rgb(245,203,43)" fg:x="6228" fg:w="26"/><text x="93.4138%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (2 samples, 0.03%)</title><rect x="93.5527%" y="213" width="0.0299%" height="15" fill="rgb(238,205,33)" fg:x="6254" fg:w="2"/><text x="93.8027%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.13%)</title><rect x="93.5826%" y="213" width="0.1346%" height="15" fill="rgb(231,56,7)" fg:x="6256" fg:w="9"/><text x="93.8326%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (51 samples, 0.76%)</title><rect x="93.7173%" y="213" width="0.7629%" height="15" fill="rgb(244,186,29)" fg:x="6265" fg:w="51"/><text x="93.9673%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (75 samples, 1.12%)</title><rect x="94.4802%" y="213" width="1.1219%" height="15" fill="rgb(234,111,31)" fg:x="6316" fg:w="75"/><text x="94.7302%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="95.6021%" y="213" width="0.0150%" height="15" fill="rgb(241,149,10)" fg:x="6391" fg:w="1"/><text x="95.8521%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (60 samples, 0.90%)</title><rect x="95.6171%" y="213" width="0.8975%" height="15" fill="rgb(249,206,44)" fg:x="6392" fg:w="60"/><text x="95.8671%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (38 samples, 0.57%)</title><rect x="96.5146%" y="213" width="0.5684%" height="15" fill="rgb(251,153,30)" fg:x="6452" fg:w="38"/><text x="96.7646%" y="223.50"></text></g><g><title>gj`gj::util::load_db (3,925 samples, 58.71%)</title><rect x="38.6387%" y="229" width="58.7135%" height="15" fill="rgb(239,152,38)" fg:x="2583" fg:w="3925"/><text x="38.8887%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.27%)</title><rect x="97.0830%" y="213" width="0.2693%" height="15" fill="rgb(249,139,47)" fg:x="6490" fg:w="18"/><text x="97.3330%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.04%)</title><rect x="97.3523%" y="229" width="0.0449%" height="15" fill="rgb(244,64,35)" fg:x="6508" fg:w="3"/><text x="97.6023%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.34%)</title><rect x="97.3972%" y="229" width="0.3441%" height="15" fill="rgb(216,46,15)" fg:x="6511" fg:w="23"/><text x="97.6472%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (27 samples, 0.40%)</title><rect x="97.7412%" y="229" width="0.4039%" height="15" fill="rgb(250,74,19)" fg:x="6534" fg:w="27"/><text x="97.9912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (58 samples, 0.87%)</title><rect x="98.1451%" y="229" width="0.8676%" height="15" fill="rgb(249,42,33)" fg:x="6561" fg:w="58"/><text x="98.3951%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.01%)</title><rect x="99.0127%" y="229" width="0.0150%" height="15" fill="rgb(242,149,17)" fg:x="6619" fg:w="1"/><text x="99.2627%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.01%)</title><rect x="99.0127%" y="213" width="0.0150%" height="15" fill="rgb(244,29,21)" fg:x="6619" fg:w="1"/><text x="99.2627%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.01%)</title><rect x="99.0127%" y="197" width="0.0150%" height="15" fill="rgb(220,130,37)" fg:x="6619" fg:w="1"/><text x="99.2627%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.36%)</title><rect x="99.0277%" y="229" width="0.3590%" height="15" fill="rgb(211,67,2)" fg:x="6620" fg:w="24"/><text x="99.2777%" y="239.50"></text></g><g><title>gj`std::rt::lang_start::_{{closure}} (6,661 samples, 99.64%)</title><rect x="0.0000%" y="277" width="99.6410%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="6661"/><text x="0.2500%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (6,661 samples, 99.64%)</title><rect x="0.0000%" y="261" width="99.6410%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="6661"/><text x="0.2500%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>gj`gj::main (6,661 samples, 99.64%)</title><rect x="0.0000%" y="245" width="99.6410%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="6661"/><text x="0.2500%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (17 samples, 0.25%)</title><rect x="99.3867%" y="229" width="0.2543%" height="15" fill="rgb(242,119,39)" fg:x="6644" fg:w="17"/><text x="99.6367%" y="239.50"></text></g><g><title>gj`main (6,662 samples, 99.66%)</title><rect x="0.0000%" y="309" width="99.6559%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="6662"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (6,662 samples, 99.66%)</title><rect x="0.0000%" y="293" width="99.6559%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="6662"/><text x="0.2500%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.01%)</title><rect x="99.6410%" y="277" width="0.0150%" height="15" fill="rgb(241,142,54)" fg:x="6661" fg:w="1"/><text x="99.8910%" y="287.50"></text></g><g><title>dyld`start (6,663 samples, 99.67%)</title><rect x="0.0000%" y="325" width="99.6709%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="6663"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.01%)</title><rect x="99.6559%" y="309" width="0.0150%" height="15" fill="rgb(210,85,47)" fg:x="6662" fg:w="1"/><text x="99.9059%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.01%)</title><rect x="99.6559%" y="293" width="0.0150%" height="15" fill="rgb(224,206,25)" fg:x="6662" fg:w="1"/><text x="99.9059%" y="303.50"></text></g><g><title>all (6,685 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="6685"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (22 samples, 0.33%)</title><rect x="99.6709%" y="325" width="0.3291%" height="15" fill="rgb(236,59,4)" fg:x="6663" fg:w="22"/><text x="99.9209%" y="335.50"></text></g></svg></svg>