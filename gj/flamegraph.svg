<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="26963"><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.05%)</title><rect x="0.0074%" y="277" width="0.0519%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="14"/><text x="0.2574%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (95 samples, 0.35%)</title><rect x="1.1238%" y="245" width="0.3523%" height="15" fill="rgb(217,0,24)" fg:x="303" fg:w="95"/><text x="1.3738%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (163 samples, 0.60%)</title><rect x="0.8790%" y="261" width="0.6045%" height="15" fill="rgb(221,193,54)" fg:x="237" fg:w="163"/><text x="1.1290%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.06%)</title><rect x="1.4835%" y="261" width="0.0556%" height="15" fill="rgb(248,212,6)" fg:x="400" fg:w="15"/><text x="1.7335%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.06%)</title><rect x="1.4835%" y="245" width="0.0556%" height="15" fill="rgb(208,68,35)" fg:x="400" fg:w="15"/><text x="1.7335%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.06%)</title><rect x="1.4835%" y="229" width="0.0556%" height="15" fill="rgb(232,128,0)" fg:x="400" fg:w="15"/><text x="1.7335%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (3 samples, 0.01%)</title><rect x="1.5391%" y="261" width="0.0111%" height="15" fill="rgb(207,160,47)" fg:x="415" fg:w="3"/><text x="1.7891%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (105 samples, 0.39%)</title><rect x="1.5503%" y="261" width="0.3894%" height="15" fill="rgb(228,23,34)" fg:x="418" fg:w="105"/><text x="1.8003%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (29 samples, 0.11%)</title><rect x="1.8321%" y="245" width="0.1076%" height="15" fill="rgb(218,30,26)" fg:x="494" fg:w="29"/><text x="2.0821%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.11%)</title><rect x="1.8321%" y="229" width="0.1076%" height="15" fill="rgb(220,122,19)" fg:x="494" fg:w="29"/><text x="2.0821%" y="239.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (515 samples, 1.91%)</title><rect x="0.0593%" y="277" width="1.9100%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="515"/><text x="0.3093%" y="287.50">g..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.03%)</title><rect x="1.9397%" y="261" width="0.0297%" height="15" fill="rgb(240,193,28)" fg:x="523" fg:w="8"/><text x="2.1897%" y="271.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.03%)</title><rect x="1.9694%" y="277" width="0.0334%" height="15" fill="rgb(216,20,37)" fg:x="531" fg:w="9"/><text x="2.2194%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (339 samples, 1.26%)</title><rect x="3.1710%" y="229" width="1.2573%" height="15" fill="rgb(206,188,39)" fg:x="855" fg:w="339"/><text x="3.4210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (555 samples, 2.06%)</title><rect x="2.3736%" y="245" width="2.0584%" height="15" fill="rgb(217,207,13)" fg:x="640" fg:w="555"/><text x="2.6236%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (21 samples, 0.08%)</title><rect x="4.4320%" y="245" width="0.0779%" height="15" fill="rgb(231,73,38)" fg:x="1195" fg:w="21"/><text x="4.6820%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (505 samples, 1.87%)</title><rect x="4.5099%" y="245" width="1.8729%" height="15" fill="rgb(225,20,46)" fg:x="1216" fg:w="505"/><text x="4.7599%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (29 samples, 0.11%)</title><rect x="6.2753%" y="229" width="0.1076%" height="15" fill="rgb(210,31,41)" fg:x="1692" fg:w="29"/><text x="6.5253%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.11%)</title><rect x="6.2753%" y="213" width="0.1076%" height="15" fill="rgb(221,200,47)" fg:x="1692" fg:w="29"/><text x="6.5253%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,151 samples, 4.27%)</title><rect x="2.1622%" y="261" width="4.2688%" height="15" fill="rgb(226,26,5)" fg:x="583" fg:w="1151"/><text x="2.4122%" y="271.50">gj`&lt;a..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.05%)</title><rect x="6.3828%" y="245" width="0.0482%" height="15" fill="rgb(249,33,26)" fg:x="1721" fg:w="13"/><text x="6.6328%" y="255.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="6.8427%" y="245" width="0.0334%" height="15" fill="rgb(235,183,28)" fg:x="1845" fg:w="9"/><text x="7.0927%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (213 samples, 0.79%)</title><rect x="8.8863%" y="197" width="0.7900%" height="15" fill="rgb(221,5,38)" fg:x="2396" fg:w="213"/><text x="9.1363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (435 samples, 1.61%)</title><rect x="8.0777%" y="213" width="1.6133%" height="15" fill="rgb(247,18,42)" fg:x="2178" fg:w="435"/><text x="8.3277%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="9.6762%" y="197" width="0.0148%" height="15" fill="rgb(241,131,45)" fg:x="2609" fg:w="4"/><text x="9.9262%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.09%)</title><rect x="9.6911%" y="213" width="0.0890%" height="15" fill="rgb(249,31,29)" fg:x="2613" fg:w="24"/><text x="9.9411%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (301 samples, 1.12%)</title><rect x="9.7801%" y="213" width="1.1163%" height="15" fill="rgb(225,111,53)" fg:x="2637" fg:w="301"/><text x="10.0301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (77 samples, 0.29%)</title><rect x="10.6108%" y="197" width="0.2856%" height="15" fill="rgb(238,160,17)" fg:x="2861" fg:w="77"/><text x="10.8608%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (77 samples, 0.29%)</title><rect x="10.6108%" y="181" width="0.2856%" height="15" fill="rgb(214,148,48)" fg:x="2861" fg:w="77"/><text x="10.8608%" y="191.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,033 samples, 3.83%)</title><rect x="7.2173%" y="229" width="3.8312%" height="15" fill="rgb(232,36,49)" fg:x="1946" fg:w="1033"/><text x="7.4673%" y="239.50">gj`&lt;..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (41 samples, 0.15%)</title><rect x="10.8964%" y="213" width="0.1521%" height="15" fill="rgb(209,103,24)" fg:x="2938" fg:w="41"/><text x="11.1464%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (16 samples, 0.06%)</title><rect x="11.0485%" y="229" width="0.0593%" height="15" fill="rgb(229,88,8)" fg:x="2979" fg:w="16"/><text x="11.2985%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (44 samples, 0.16%)</title><rect x="11.1115%" y="229" width="0.1632%" height="15" fill="rgb(213,181,19)" fg:x="2996" fg:w="44"/><text x="11.3615%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (28 samples, 0.10%)</title><rect x="11.6085%" y="213" width="0.1038%" height="15" fill="rgb(254,191,54)" fg:x="3130" fg:w="28"/><text x="11.8585%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (119 samples, 0.44%)</title><rect x="11.2747%" y="229" width="0.4413%" height="15" fill="rgb(241,83,37)" fg:x="3040" fg:w="119"/><text x="11.5247%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (54 samples, 0.20%)</title><rect x="11.7161%" y="229" width="0.2003%" height="15" fill="rgb(233,36,39)" fg:x="3159" fg:w="54"/><text x="11.9661%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (153 samples, 0.57%)</title><rect x="11.9163%" y="229" width="0.5674%" height="15" fill="rgb(226,3,54)" fg:x="3213" fg:w="153"/><text x="12.1663%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (89 samples, 0.33%)</title><rect x="12.1537%" y="213" width="0.3301%" height="15" fill="rgb(245,192,40)" fg:x="3277" fg:w="89"/><text x="12.4037%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (89 samples, 0.33%)</title><rect x="12.1537%" y="197" width="0.3301%" height="15" fill="rgb(238,167,29)" fg:x="3277" fg:w="89"/><text x="12.4037%" y="207.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,520 samples, 5.64%)</title><rect x="6.8761%" y="245" width="5.6374%" height="15" fill="rgb(232,182,51)" fg:x="1854" fg:w="1520"/><text x="7.1261%" y="255.50">gj`&lt;has..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.03%)</title><rect x="12.4838%" y="229" width="0.0297%" height="15" fill="rgb(231,60,39)" fg:x="3366" fg:w="8"/><text x="12.7338%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="12.5134%" y="245" width="0.0148%" height="15" fill="rgb(208,69,12)" fg:x="3374" fg:w="4"/><text x="12.7634%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.01%)</title><rect x="12.5283%" y="245" width="0.0148%" height="15" fill="rgb(235,93,37)" fg:x="3378" fg:w="4"/><text x="12.7783%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.13%)</title><rect x="12.5431%" y="245" width="0.1298%" height="15" fill="rgb(213,116,39)" fg:x="3382" fg:w="35"/><text x="12.7931%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.08%)</title><rect x="12.5950%" y="229" width="0.0779%" height="15" fill="rgb(222,207,29)" fg:x="3396" fg:w="21"/><text x="12.8450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="12.6729%" y="245" width="0.0111%" height="15" fill="rgb(206,96,30)" fg:x="3417" fg:w="3"/><text x="12.9229%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (9 samples, 0.03%)</title><rect x="12.6840%" y="245" width="0.0334%" height="15" fill="rgb(218,138,4)" fg:x="3420" fg:w="9"/><text x="12.9340%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (85 samples, 0.32%)</title><rect x="12.7174%" y="245" width="0.3152%" height="15" fill="rgb(250,191,14)" fg:x="3429" fg:w="85"/><text x="12.9674%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (60 samples, 0.22%)</title><rect x="12.8101%" y="229" width="0.2225%" height="15" fill="rgb(239,60,40)" fg:x="3454" fg:w="60"/><text x="13.0601%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.22%)</title><rect x="12.8101%" y="213" width="0.2225%" height="15" fill="rgb(206,27,48)" fg:x="3454" fg:w="60"/><text x="13.0601%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,789 samples, 6.64%)</title><rect x="6.4310%" y="261" width="6.6350%" height="15" fill="rgb(225,35,8)" fg:x="1734" fg:w="1789"/><text x="6.6810%" y="271.50">gj`&lt;hashb..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.03%)</title><rect x="13.0327%" y="245" width="0.0334%" height="15" fill="rgb(250,213,24)" fg:x="3514" fg:w="9"/><text x="13.2827%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$free (18 samples, 0.07%)</title><rect x="13.0661%" y="261" width="0.0668%" height="15" fill="rgb(247,123,22)" fg:x="3523" fg:w="18"/><text x="13.3161%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.02%)</title><rect x="13.4814%" y="245" width="0.0223%" height="15" fill="rgb(231,138,38)" fg:x="3635" fg:w="6"/><text x="13.7314%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (69 samples, 0.26%)</title><rect x="13.5037%" y="245" width="0.2559%" height="15" fill="rgb(231,145,46)" fg:x="3641" fg:w="69"/><text x="13.7537%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.12%)</title><rect x="13.6372%" y="229" width="0.1224%" height="15" fill="rgb(251,118,11)" fg:x="3677" fg:w="33"/><text x="13.8872%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.03%)</title><rect x="13.7596%" y="245" width="0.0334%" height="15" fill="rgb(217,147,25)" fg:x="3710" fg:w="9"/><text x="14.0096%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (9 samples, 0.03%)</title><rect x="13.7596%" y="229" width="0.0334%" height="15" fill="rgb(247,81,37)" fg:x="3710" fg:w="9"/><text x="14.0096%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (9 samples, 0.03%)</title><rect x="13.7596%" y="213" width="0.0334%" height="15" fill="rgb(209,12,38)" fg:x="3710" fg:w="9"/><text x="14.0096%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (34 samples, 0.13%)</title><rect x="13.8004%" y="245" width="0.1261%" height="15" fill="rgb(227,1,9)" fg:x="3721" fg:w="34"/><text x="14.0504%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.03%)</title><rect x="13.9005%" y="229" width="0.0260%" height="15" fill="rgb(248,47,43)" fg:x="3748" fg:w="7"/><text x="14.1505%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.03%)</title><rect x="13.9005%" y="213" width="0.0260%" height="15" fill="rgb(221,10,30)" fg:x="3748" fg:w="7"/><text x="14.1505%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (216 samples, 0.80%)</title><rect x="13.1365%" y="261" width="0.8011%" height="15" fill="rgb(210,229,1)" fg:x="3542" fg:w="216"/><text x="13.3865%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="13.9265%" y="245" width="0.0111%" height="15" fill="rgb(222,148,37)" fg:x="3755" fg:w="3"/><text x="14.1765%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (32 samples, 0.12%)</title><rect x="13.9376%" y="261" width="0.1187%" height="15" fill="rgb(234,67,33)" fg:x="3758" fg:w="32"/><text x="14.1876%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (377 samples, 1.40%)</title><rect x="14.8314%" y="245" width="1.3982%" height="15" fill="rgb(247,98,35)" fg:x="3999" fg:w="377"/><text x="15.0814%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (590 samples, 2.19%)</title><rect x="14.0563%" y="261" width="2.1882%" height="15" fill="rgb(247,138,52)" fg:x="3790" fg:w="590"/><text x="14.3063%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.01%)</title><rect x="16.2296%" y="245" width="0.0148%" height="15" fill="rgb(213,79,30)" fg:x="4376" fg:w="4"/><text x="16.4796%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.01%)</title><rect x="16.2296%" y="229" width="0.0148%" height="15" fill="rgb(246,177,23)" fg:x="4376" fg:w="4"/><text x="16.4796%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (12 samples, 0.04%)</title><rect x="16.2482%" y="245" width="0.0445%" height="15" fill="rgb(230,62,27)" fg:x="4381" fg:w="12"/><text x="16.4982%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.02%)</title><rect x="16.2927%" y="245" width="0.0223%" height="15" fill="rgb(216,154,8)" fg:x="4393" fg:w="6"/><text x="16.5427%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (46 samples, 0.17%)</title><rect x="16.2445%" y="261" width="0.1706%" height="15" fill="rgb(244,35,45)" fg:x="4380" fg:w="46"/><text x="16.4945%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (25 samples, 0.09%)</title><rect x="16.3224%" y="245" width="0.0927%" height="15" fill="rgb(251,115,12)" fg:x="4401" fg:w="25"/><text x="16.5724%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.09%)</title><rect x="16.3261%" y="229" width="0.0890%" height="15" fill="rgb(240,54,50)" fg:x="4402" fg:w="24"/><text x="16.5761%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="16.4818%" y="229" width="0.0185%" height="15" fill="rgb(233,84,52)" fg:x="4444" fg:w="5"/><text x="16.7318%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (10 samples, 0.04%)</title><rect x="16.5004%" y="229" width="0.0371%" height="15" fill="rgb(207,117,47)" fg:x="4449" fg:w="10"/><text x="16.7504%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (4 samples, 0.01%)</title><rect x="16.5449%" y="229" width="0.0148%" height="15" fill="rgb(249,43,39)" fg:x="4461" fg:w="4"/><text x="16.7949%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (47 samples, 0.17%)</title><rect x="16.4151%" y="261" width="0.1743%" height="15" fill="rgb(209,38,44)" fg:x="4426" fg:w="47"/><text x="16.6651%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (45 samples, 0.17%)</title><rect x="16.4225%" y="245" width="0.1669%" height="15" fill="rgb(236,212,23)" fg:x="4428" fg:w="45"/><text x="16.6725%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (8 samples, 0.03%)</title><rect x="16.5597%" y="229" width="0.0297%" height="15" fill="rgb(242,79,21)" fg:x="4465" fg:w="8"/><text x="16.8097%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.03%)</title><rect x="16.5634%" y="213" width="0.0260%" height="15" fill="rgb(211,96,35)" fg:x="4466" fg:w="7"/><text x="16.8134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (149 samples, 0.55%)</title><rect x="16.5968%" y="261" width="0.5526%" height="15" fill="rgb(253,215,40)" fg:x="4475" fg:w="149"/><text x="16.8468%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.24%)</title><rect x="17.5018%" y="229" width="0.2374%" height="15" fill="rgb(211,81,21)" fg:x="4719" fg:w="64"/><text x="17.7518%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (160 samples, 0.59%)</title><rect x="17.1494%" y="261" width="0.5934%" height="15" fill="rgb(208,190,38)" fg:x="4624" fg:w="160"/><text x="17.3994%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (65 samples, 0.24%)</title><rect x="17.5018%" y="245" width="0.2411%" height="15" fill="rgb(235,213,38)" fg:x="4719" fg:w="65"/><text x="17.7518%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (25 samples, 0.09%)</title><rect x="17.7428%" y="261" width="0.0927%" height="15" fill="rgb(237,122,38)" fg:x="4784" fg:w="25"/><text x="17.9928%" y="271.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,272 samples, 15.84%)</title><rect x="2.0027%" y="277" width="15.8439%" height="15" fill="rgb(244,218,35)" fg:x="540" fg:w="4272"/><text x="2.2527%" y="287.50">gj`&lt;hashbrown::raw::RawT..</text></g><g><title>gj`DYLD-STUB$$free (40 samples, 0.15%)</title><rect x="17.8467%" y="277" width="0.1484%" height="15" fill="rgb(240,68,47)" fg:x="4812" fg:w="40"/><text x="18.0967%" y="287.50"></text></g><g><title>gj`DYLD-STUB$$malloc (18 samples, 0.07%)</title><rect x="17.9950%" y="277" width="0.0668%" height="15" fill="rgb(210,16,53)" fg:x="4852" fg:w="18"/><text x="18.2450%" y="287.50"></text></g><g><title>gj`__rdl_alloc (125 samples, 0.46%)</title><rect x="18.0618%" y="277" width="0.4636%" height="15" fill="rgb(235,124,12)" fg:x="4870" fg:w="125"/><text x="18.3118%" y="287.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="18.6107%" y="261" width="0.0185%" height="15" fill="rgb(224,169,11)" fg:x="5018" fg:w="5"/><text x="18.8607%" y="271.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.01%)</title><rect x="18.8073%" y="245" width="0.0111%" height="15" fill="rgb(250,166,2)" fg:x="5071" fg:w="3"/><text x="19.0573%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.02%)</title><rect x="18.9630%" y="229" width="0.0185%" height="15" fill="rgb(242,216,29)" fg:x="5113" fg:w="5"/><text x="19.2130%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.03%)</title><rect x="19.1633%" y="197" width="0.0297%" height="15" fill="rgb(230,116,27)" fg:x="5167" fg:w="8"/><text x="19.4133%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (46 samples, 0.17%)</title><rect x="19.0298%" y="213" width="0.1706%" height="15" fill="rgb(228,99,48)" fg:x="5131" fg:w="46"/><text x="19.2798%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (107 samples, 0.40%)</title><rect x="18.8184%" y="245" width="0.3968%" height="15" fill="rgb(253,11,6)" fg:x="5074" fg:w="107"/><text x="19.0684%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (63 samples, 0.23%)</title><rect x="18.9816%" y="229" width="0.2337%" height="15" fill="rgb(247,143,39)" fg:x="5118" fg:w="63"/><text x="19.2316%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="19.2004%" y="213" width="0.0148%" height="15" fill="rgb(236,97,10)" fg:x="5177" fg:w="4"/><text x="19.4504%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.03%)</title><rect x="19.2152%" y="245" width="0.0334%" height="15" fill="rgb(233,208,19)" fg:x="5181" fg:w="9"/><text x="19.4652%" y="255.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (169 samples, 0.63%)</title><rect x="18.6292%" y="261" width="0.6268%" height="15" fill="rgb(216,164,2)" fg:x="5023" fg:w="169"/><text x="18.8792%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (35 samples, 0.13%)</title><rect x="19.3339%" y="229" width="0.1298%" height="15" fill="rgb(220,129,5)" fg:x="5213" fg:w="35"/><text x="19.5839%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.06%)</title><rect x="19.4044%" y="213" width="0.0593%" height="15" fill="rgb(242,17,10)" fg:x="5232" fg:w="16"/><text x="19.6544%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.03%)</title><rect x="19.4674%" y="229" width="0.0334%" height="15" fill="rgb(242,107,0)" fg:x="5249" fg:w="9"/><text x="19.7174%" y="239.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.19%)</title><rect x="19.3191%" y="245" width="0.1929%" height="15" fill="rgb(251,28,31)" fg:x="5209" fg:w="52"/><text x="19.5691%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="19.5008%" y="229" width="0.0111%" height="15" fill="rgb(233,223,10)" fg:x="5258" fg:w="3"/><text x="19.7508%" y="239.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="19.5268%" y="229" width="0.0111%" height="15" fill="rgb(215,21,27)" fg:x="5265" fg:w="3"/><text x="19.7768%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="19.5268%" y="213" width="0.0111%" height="15" fill="rgb(232,23,21)" fg:x="5265" fg:w="3"/><text x="19.7768%" y="223.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.04%)</title><rect x="19.5119%" y="245" width="0.0408%" height="15" fill="rgb(244,5,23)" fg:x="5261" fg:w="11"/><text x="19.7619%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.17%)</title><rect x="19.5676%" y="245" width="0.1669%" height="15" fill="rgb(226,81,46)" fg:x="5276" fg:w="45"/><text x="19.8176%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (21 samples, 0.08%)</title><rect x="19.6566%" y="229" width="0.0779%" height="15" fill="rgb(247,70,30)" fg:x="5300" fg:w="21"/><text x="19.9066%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (4 samples, 0.01%)</title><rect x="19.7345%" y="245" width="0.0148%" height="15" fill="rgb(212,68,19)" fg:x="5321" fg:w="4"/><text x="19.9845%" y="255.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.57%)</title><rect x="19.2560%" y="261" width="0.5712%" height="15" fill="rgb(240,187,13)" fg:x="5192" fg:w="154"/><text x="19.5060%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.08%)</title><rect x="19.7493%" y="245" width="0.0779%" height="15" fill="rgb(223,113,26)" fg:x="5325" fg:w="21"/><text x="19.9993%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$free (7 samples, 0.03%)</title><rect x="19.8272%" y="261" width="0.0260%" height="15" fill="rgb(206,192,2)" fg:x="5346" fg:w="7"/><text x="20.0772%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="19.8531%" y="261" width="0.0185%" height="15" fill="rgb(241,108,4)" fg:x="5353" fg:w="5"/><text x="20.1031%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="19.8717%" y="261" width="0.0111%" height="15" fill="rgb(247,173,49)" fg:x="5358" fg:w="3"/><text x="20.1217%" y="271.50"></text></g><g><title>gj`__rdl_alloc (7 samples, 0.03%)</title><rect x="19.8828%" y="261" width="0.0260%" height="15" fill="rgb(224,114,35)" fg:x="5361" fg:w="7"/><text x="20.1328%" y="271.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.02%)</title><rect x="19.9125%" y="261" width="0.0223%" height="15" fill="rgb(245,159,27)" fg:x="5369" fg:w="6"/><text x="20.1625%" y="271.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (79 samples, 0.29%)</title><rect x="20.2722%" y="229" width="0.2930%" height="15" fill="rgb(245,172,44)" fg:x="5466" fg:w="79"/><text x="20.5222%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.07%)</title><rect x="20.6320%" y="197" width="0.0668%" height="15" fill="rgb(236,23,11)" fg:x="5563" fg:w="18"/><text x="20.8820%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="20.6876%" y="181" width="0.0111%" height="15" fill="rgb(205,117,38)" fg:x="5578" fg:w="3"/><text x="20.9376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.15%)</title><rect x="20.5652%" y="229" width="0.1484%" height="15" fill="rgb(237,72,25)" fg:x="5545" fg:w="40"/><text x="20.8152%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 0.10%)</title><rect x="20.6097%" y="213" width="0.1038%" height="15" fill="rgb(244,70,9)" fg:x="5557" fg:w="28"/><text x="20.8597%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="20.6987%" y="197" width="0.0148%" height="15" fill="rgb(217,125,39)" fg:x="5581" fg:w="4"/><text x="20.9487%" y="207.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (141 samples, 0.52%)</title><rect x="20.2055%" y="245" width="0.5229%" height="15" fill="rgb(235,36,10)" fg:x="5448" fg:w="141"/><text x="20.4555%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.01%)</title><rect x="20.7136%" y="229" width="0.0148%" height="15" fill="rgb(251,123,47)" fg:x="5585" fg:w="4"/><text x="20.9636%" y="239.50"></text></g><g><title>gj`__rdl_alloc (3 samples, 0.01%)</title><rect x="20.7358%" y="245" width="0.0111%" height="15" fill="rgb(221,13,13)" fg:x="5591" fg:w="3"/><text x="20.9858%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="20.8026%" y="229" width="0.0185%" height="15" fill="rgb(238,131,9)" fg:x="5609" fg:w="5"/><text x="21.0526%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="20.9769%" y="165" width="0.0148%" height="15" fill="rgb(211,50,8)" fg:x="5656" fg:w="4"/><text x="21.2269%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.09%)</title><rect x="20.9101%" y="181" width="0.0853%" height="15" fill="rgb(245,182,24)" fg:x="5638" fg:w="23"/><text x="21.1601%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.17%)</title><rect x="20.8285%" y="213" width="0.1706%" height="15" fill="rgb(242,14,37)" fg:x="5616" fg:w="46"/><text x="21.0785%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (32 samples, 0.12%)</title><rect x="20.8805%" y="197" width="0.1187%" height="15" fill="rgb(246,228,12)" fg:x="5630" fg:w="32"/><text x="21.1305%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (50 samples, 0.19%)</title><rect x="20.8211%" y="229" width="0.1854%" height="15" fill="rgb(213,55,15)" fg:x="5614" fg:w="50"/><text x="21.0711%" y="239.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (72 samples, 0.27%)</title><rect x="20.7469%" y="245" width="0.2670%" height="15" fill="rgb(209,9,3)" fg:x="5594" fg:w="72"/><text x="20.9969%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="21.0140%" y="245" width="0.0111%" height="15" fill="rgb(230,59,30)" fg:x="5666" fg:w="3"/><text x="21.2640%" y="255.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.12%)</title><rect x="21.1141%" y="213" width="0.1187%" height="15" fill="rgb(209,121,21)" fg:x="5693" fg:w="32"/><text x="21.3641%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 0.13%)</title><rect x="21.1030%" y="229" width="0.1335%" height="15" fill="rgb(220,109,13)" fg:x="5690" fg:w="36"/><text x="21.3530%" y="239.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 0.08%)</title><rect x="21.2513%" y="213" width="0.0816%" height="15" fill="rgb(232,18,1)" fg:x="5730" fg:w="22"/><text x="21.5013%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 0.08%)</title><rect x="21.2513%" y="197" width="0.0816%" height="15" fill="rgb(215,41,42)" fg:x="5730" fg:w="22"/><text x="21.5013%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="21.3515%" y="197" width="0.0111%" height="15" fill="rgb(224,123,36)" fg:x="5757" fg:w="3"/><text x="21.6015%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="21.3515%" y="181" width="0.0111%" height="15" fill="rgb(240,125,3)" fg:x="5757" fg:w="3"/><text x="21.6015%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.01%)</title><rect x="21.3515%" y="165" width="0.0111%" height="15" fill="rgb(205,98,50)" fg:x="5757" fg:w="3"/><text x="21.6015%" y="175.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="21.3812%" y="181" width="0.0148%" height="15" fill="rgb(205,185,37)" fg:x="5765" fg:w="4"/><text x="21.6312%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.01%)</title><rect x="21.3849%" y="165" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="5766" fg:w="3"/><text x="21.6349%" y="175.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.01%)</title><rect x="21.4034%" y="37" width="0.0111%" height="15" fill="rgb(213,199,42)" fg:x="5771" fg:w="3"/><text x="21.6534%" y="47.50"></text></g><g><title>gj`gj::join::bushy_join_inner (16 samples, 0.06%)</title><rect x="21.3626%" y="197" width="0.0593%" height="15" fill="rgb(235,201,11)" fg:x="5760" fg:w="16"/><text x="21.6126%" y="207.50"></text></g><g><title>gj`gj::join::bushy_join_inner (7 samples, 0.03%)</title><rect x="21.3960%" y="181" width="0.0260%" height="15" fill="rgb(207,46,11)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="191.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="165" width="0.0260%" height="15" fill="rgb(241,35,35)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="175.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="149" width="0.0260%" height="15" fill="rgb(243,32,47)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="159.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="133" width="0.0260%" height="15" fill="rgb(247,202,23)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="143.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="117" width="0.0260%" height="15" fill="rgb(219,102,11)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="127.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="101" width="0.0260%" height="15" fill="rgb(243,110,44)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="111.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="85" width="0.0260%" height="15" fill="rgb(222,74,54)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="95.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="69" width="0.0260%" height="15" fill="rgb(216,99,12)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="79.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.03%)</title><rect x="21.3960%" y="53" width="0.0260%" height="15" fill="rgb(226,22,26)" fg:x="5769" fg:w="7"/><text x="21.6460%" y="63.50"></text></g><g><title>gj`gj::join::bushy_join_inner (24 samples, 0.09%)</title><rect x="21.3366%" y="213" width="0.0890%" height="15" fill="rgb(217,163,10)" fg:x="5753" fg:w="24"/><text x="21.5866%" y="223.50"></text></g><g><title>gj`gj::join::materialize (6 samples, 0.02%)</title><rect x="21.4257%" y="213" width="0.0223%" height="15" fill="rgb(213,25,53)" fg:x="5777" fg:w="6"/><text x="21.6757%" y="223.50"></text></g><g><title>gj`gj::join::materialize (6 samples, 0.02%)</title><rect x="21.4257%" y="197" width="0.0223%" height="15" fill="rgb(252,105,26)" fg:x="5777" fg:w="6"/><text x="21.6757%" y="207.50"></text></g><g><title>gj`gj::join::materialize (5 samples, 0.02%)</title><rect x="21.4294%" y="181" width="0.0185%" height="15" fill="rgb(220,39,43)" fg:x="5778" fg:w="5"/><text x="21.6794%" y="191.50"></text></g><g><title>gj`gj::join::materialize (5 samples, 0.02%)</title><rect x="21.4294%" y="165" width="0.0185%" height="15" fill="rgb(229,68,48)" fg:x="5778" fg:w="5"/><text x="21.6794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="21.4479%" y="213" width="0.0111%" height="15" fill="rgb(252,8,32)" fg:x="5783" fg:w="3"/><text x="21.6979%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join_inner (61 samples, 0.23%)</title><rect x="21.2476%" y="229" width="0.2262%" height="15" fill="rgb(223,20,43)" fg:x="5729" fg:w="61"/><text x="21.4976%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (31 samples, 0.11%)</title><rect x="21.6148%" y="181" width="0.1150%" height="15" fill="rgb(229,81,49)" fg:x="5828" fg:w="31"/><text x="21.8648%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.07%)</title><rect x="21.6593%" y="165" width="0.0705%" height="15" fill="rgb(236,28,36)" fg:x="5840" fg:w="19"/><text x="21.9093%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (13 samples, 0.05%)</title><rect x="21.6816%" y="149" width="0.0482%" height="15" fill="rgb(249,185,26)" fg:x="5846" fg:w="13"/><text x="21.9316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="21.7149%" y="133" width="0.0148%" height="15" fill="rgb(249,174,33)" fg:x="5855" fg:w="4"/><text x="21.9649%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 0.16%)</title><rect x="21.5814%" y="213" width="0.1595%" height="15" fill="rgb(233,201,37)" fg:x="5819" fg:w="43"/><text x="21.8314%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (36 samples, 0.13%)</title><rect x="21.6074%" y="197" width="0.1335%" height="15" fill="rgb(221,78,26)" fg:x="5826" fg:w="36"/><text x="21.8574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="21.7298%" y="181" width="0.0111%" height="15" fill="rgb(250,127,30)" fg:x="5859" fg:w="3"/><text x="21.9798%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$realloc (3 samples, 0.01%)</title><rect x="21.8633%" y="181" width="0.0111%" height="15" fill="rgb(230,49,44)" fg:x="5895" fg:w="3"/><text x="22.1133%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="21.8818%" y="165" width="0.0148%" height="15" fill="rgb(229,67,23)" fg:x="5900" fg:w="4"/><text x="22.1318%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.01%)</title><rect x="21.9338%" y="149" width="0.0111%" height="15" fill="rgb(249,83,47)" fg:x="5914" fg:w="3"/><text x="22.1838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="21.9783%" y="133" width="0.0185%" height="15" fill="rgb(215,43,3)" fg:x="5926" fg:w="5"/><text x="22.2283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (28 samples, 0.10%)</title><rect x="22.0265%" y="117" width="0.1038%" height="15" fill="rgb(238,154,13)" fg:x="5939" fg:w="28"/><text x="22.2765%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.09%)</title><rect x="22.1303%" y="117" width="0.0890%" height="15" fill="rgb(219,56,2)" fg:x="5967" fg:w="24"/><text x="22.3803%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.07%)</title><rect x="22.1452%" y="101" width="0.0742%" height="15" fill="rgb(233,0,4)" fg:x="5971" fg:w="20"/><text x="22.3952%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="22.2008%" y="85" width="0.0185%" height="15" fill="rgb(235,30,7)" fg:x="5986" fg:w="5"/><text x="22.4508%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (68 samples, 0.25%)</title><rect x="21.9968%" y="133" width="0.2522%" height="15" fill="rgb(250,79,13)" fg:x="5931" fg:w="68"/><text x="22.2468%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="22.2193%" y="117" width="0.0297%" height="15" fill="rgb(211,146,34)" fg:x="5991" fg:w="8"/><text x="22.4693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (88 samples, 0.33%)</title><rect x="21.9449%" y="149" width="0.3264%" height="15" fill="rgb(228,22,38)" fg:x="5917" fg:w="88"/><text x="22.1949%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.02%)</title><rect x="22.2490%" y="133" width="0.0223%" height="15" fill="rgb(235,168,5)" fg:x="5999" fg:w="6"/><text x="22.4990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.03%)</title><rect x="22.2713%" y="149" width="0.0334%" height="15" fill="rgb(221,155,16)" fg:x="6005" fg:w="9"/><text x="22.5213%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (118 samples, 0.44%)</title><rect x="21.8744%" y="181" width="0.4376%" height="15" fill="rgb(215,215,53)" fg:x="5898" fg:w="118"/><text x="22.1244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (112 samples, 0.42%)</title><rect x="21.8967%" y="165" width="0.4154%" height="15" fill="rgb(223,4,10)" fg:x="5904" fg:w="112"/><text x="22.1467%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (135 samples, 0.50%)</title><rect x="21.8373%" y="197" width="0.5007%" height="15" fill="rgb(234,103,6)" fg:x="5888" fg:w="135"/><text x="22.0873%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.03%)</title><rect x="22.3121%" y="181" width="0.0260%" height="15" fill="rgb(227,97,0)" fg:x="6016" fg:w="7"/><text x="22.5621%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (53 samples, 0.20%)</title><rect x="22.5494%" y="181" width="0.1966%" height="15" fill="rgb(234,150,53)" fg:x="6080" fg:w="53"/><text x="22.7994%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$free (70 samples, 0.26%)</title><rect x="22.7460%" y="181" width="0.2596%" height="15" fill="rgb(228,201,54)" fg:x="6133" fg:w="70"/><text x="22.9960%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$realloc (6 samples, 0.02%)</title><rect x="23.0353%" y="165" width="0.0223%" height="15" fill="rgb(222,22,37)" fg:x="6211" fg:w="6"/><text x="23.2853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.01%)</title><rect x="23.0798%" y="149" width="0.0111%" height="15" fill="rgb(237,53,32)" fg:x="6223" fg:w="3"/><text x="23.3298%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (3 samples, 0.01%)</title><rect x="23.1243%" y="133" width="0.0111%" height="15" fill="rgb(233,25,53)" fg:x="6235" fg:w="3"/><text x="23.3743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="23.1873%" y="117" width="0.0111%" height="15" fill="rgb(210,40,34)" fg:x="6252" fg:w="3"/><text x="23.4373%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="23.1985%" y="117" width="0.0260%" height="15" fill="rgb(241,220,44)" fg:x="6255" fg:w="7"/><text x="23.4485%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (12 samples, 0.04%)</title><rect x="23.2318%" y="101" width="0.0445%" height="15" fill="rgb(235,28,35)" fg:x="6264" fg:w="12"/><text x="23.4818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.09%)</title><rect x="23.2763%" y="101" width="0.0853%" height="15" fill="rgb(210,56,17)" fg:x="6276" fg:w="23"/><text x="23.5263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (21 samples, 0.08%)</title><rect x="23.2838%" y="85" width="0.0779%" height="15" fill="rgb(224,130,29)" fg:x="6278" fg:w="21"/><text x="23.5338%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="23.3357%" y="69" width="0.0260%" height="15" fill="rgb(235,212,8)" fg:x="6292" fg:w="7"/><text x="23.5857%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (46 samples, 0.17%)</title><rect x="23.2244%" y="117" width="0.1706%" height="15" fill="rgb(223,33,50)" fg:x="6262" fg:w="46"/><text x="23.4744%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (9 samples, 0.03%)</title><rect x="23.3616%" y="101" width="0.0334%" height="15" fill="rgb(219,149,13)" fg:x="6299" fg:w="9"/><text x="23.6116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (73 samples, 0.27%)</title><rect x="23.1354%" y="133" width="0.2707%" height="15" fill="rgb(250,156,29)" fg:x="6238" fg:w="73"/><text x="23.3854%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="23.3950%" y="117" width="0.0111%" height="15" fill="rgb(216,193,19)" fg:x="6308" fg:w="3"/><text x="23.6450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.03%)</title><rect x="23.4061%" y="133" width="0.0297%" height="15" fill="rgb(216,135,14)" fg:x="6311" fg:w="8"/><text x="23.6561%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (108 samples, 0.40%)</title><rect x="23.0612%" y="165" width="0.4005%" height="15" fill="rgb(241,47,5)" fg:x="6218" fg:w="108"/><text x="23.3112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (100 samples, 0.37%)</title><rect x="23.0909%" y="149" width="0.3709%" height="15" fill="rgb(233,42,35)" fg:x="6226" fg:w="100"/><text x="23.3409%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.03%)</title><rect x="23.4358%" y="133" width="0.0260%" height="15" fill="rgb(231,13,6)" fg:x="6319" fg:w="7"/><text x="23.6858%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (125 samples, 0.46%)</title><rect x="23.0056%" y="181" width="0.4636%" height="15" fill="rgb(207,181,40)" fg:x="6203" fg:w="125"/><text x="23.2556%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (7 samples, 0.03%)</title><rect x="23.4692%" y="181" width="0.0260%" height="15" fill="rgb(254,173,49)" fg:x="6328" fg:w="7"/><text x="23.7192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (81 samples, 0.30%)</title><rect x="27.3708%" y="133" width="0.3004%" height="15" fill="rgb(221,1,38)" fg:x="7380" fg:w="81"/><text x="27.6208%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (260 samples, 0.96%)</title><rect x="30.7533%" y="101" width="0.9643%" height="15" fill="rgb(206,124,46)" fg:x="8292" fg:w="260"/><text x="31.0033%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (951 samples, 3.53%)</title><rect x="28.5057%" y="117" width="3.5271%" height="15" fill="rgb(249,21,11)" fg:x="7686" fg:w="951"/><text x="28.7557%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (85 samples, 0.32%)</title><rect x="31.7175%" y="101" width="0.3152%" height="15" fill="rgb(222,201,40)" fg:x="8552" fg:w="85"/><text x="31.9675%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,746 samples, 6.48%)</title><rect x="25.8280%" y="149" width="6.4755%" height="15" fill="rgb(235,61,29)" fg:x="6964" fg:w="1746"/><text x="26.0780%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,249 samples, 4.63%)</title><rect x="27.6713%" y="133" width="4.6323%" height="15" fill="rgb(219,207,3)" fg:x="7461" fg:w="1249"/><text x="27.9213%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (73 samples, 0.27%)</title><rect x="32.0328%" y="117" width="0.2707%" height="15" fill="rgb(222,56,46)" fg:x="8637" fg:w="73"/><text x="32.2828%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (124 samples, 0.46%)</title><rect x="32.3035%" y="149" width="0.4599%" height="15" fill="rgb(239,76,54)" fg:x="8710" fg:w="124"/><text x="32.5535%" y="159.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,050 samples, 7.60%)</title><rect x="25.1938%" y="165" width="7.6030%" height="15" fill="rgb(231,124,27)" fg:x="6793" fg:w="2050"/><text x="25.4438%" y="175.50">gj`&lt;alloc:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.03%)</title><rect x="32.7634%" y="149" width="0.0334%" height="15" fill="rgb(249,195,6)" fg:x="8834" fg:w="9"/><text x="33.0134%" y="159.50"></text></g><g><title>gj`DYLD-STUB$$free (44 samples, 0.16%)</title><rect x="32.7968%" y="165" width="0.1632%" height="15" fill="rgb(237,174,47)" fg:x="8843" fg:w="44"/><text x="33.0468%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (84 samples, 0.31%)</title><rect x="32.9600%" y="165" width="0.3115%" height="15" fill="rgb(206,201,31)" fg:x="8887" fg:w="84"/><text x="33.2100%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (99 samples, 0.37%)</title><rect x="33.2715%" y="165" width="0.3672%" height="15" fill="rgb(231,57,52)" fg:x="8971" fg:w="99"/><text x="33.5215%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (72 samples, 0.27%)</title><rect x="33.6387%" y="165" width="0.2670%" height="15" fill="rgb(248,177,22)" fg:x="9070" fg:w="72"/><text x="33.8887%" y="175.50"></text></g><g><title>gj`__rdl_alloc (46 samples, 0.17%)</title><rect x="33.9057%" y="165" width="0.1706%" height="15" fill="rgb(215,211,37)" fg:x="9142" fg:w="46"/><text x="34.1557%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (3 samples, 0.01%)</title><rect x="34.0763%" y="85" width="0.0111%" height="15" fill="rgb(241,128,51)" fg:x="9188" fg:w="3"/><text x="34.3263%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (3 samples, 0.01%)</title><rect x="34.0763%" y="69" width="0.0111%" height="15" fill="rgb(227,165,31)" fg:x="9188" fg:w="3"/><text x="34.3263%" y="79.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.02%)</title><rect x="34.0763%" y="165" width="0.0223%" height="15" fill="rgb(228,167,24)" fg:x="9188" fg:w="6"/><text x="34.3263%" y="175.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="34.0763%" y="149" width="0.0223%" height="15" fill="rgb(228,143,12)" fg:x="9188" fg:w="6"/><text x="34.3263%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.02%)</title><rect x="34.0763%" y="133" width="0.0223%" height="15" fill="rgb(249,149,8)" fg:x="9188" fg:w="6"/><text x="34.3263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.02%)</title><rect x="34.0763%" y="117" width="0.0223%" height="15" fill="rgb(243,35,44)" fg:x="9188" fg:w="6"/><text x="34.3263%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.02%)</title><rect x="34.0763%" y="101" width="0.0223%" height="15" fill="rgb(246,89,9)" fg:x="9188" fg:w="6"/><text x="34.3263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.01%)</title><rect x="34.0875%" y="85" width="0.0111%" height="15" fill="rgb(233,213,13)" fg:x="9191" fg:w="3"/><text x="34.3375%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.01%)</title><rect x="34.0875%" y="69" width="0.0111%" height="15" fill="rgb(233,141,41)" fg:x="9191" fg:w="3"/><text x="34.3375%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.01%)</title><rect x="34.0875%" y="53" width="0.0111%" height="15" fill="rgb(239,167,4)" fg:x="9191" fg:w="3"/><text x="34.3375%" y="63.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (107 samples, 0.40%)</title><rect x="34.0986%" y="165" width="0.3968%" height="15" fill="rgb(209,217,16)" fg:x="9194" fg:w="107"/><text x="34.3486%" y="175.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (268 samples, 0.99%)</title><rect x="34.9182%" y="149" width="0.9940%" height="15" fill="rgb(219,88,35)" fg:x="9415" fg:w="268"/><text x="35.1682%" y="159.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (118 samples, 0.44%)</title><rect x="35.9122%" y="149" width="0.4376%" height="15" fill="rgb(220,193,23)" fg:x="9683" fg:w="118"/><text x="36.1622%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (204 samples, 0.76%)</title><rect x="37.4142%" y="133" width="0.7566%" height="15" fill="rgb(230,90,52)" fg:x="10088" fg:w="204"/><text x="37.6642%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (492 samples, 1.82%)</title><rect x="36.3498%" y="149" width="1.8247%" height="15" fill="rgb(252,106,19)" fg:x="9801" fg:w="492"/><text x="36.5998%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (30 samples, 0.11%)</title><rect x="38.1745%" y="149" width="0.1113%" height="15" fill="rgb(206,74,20)" fg:x="10293" fg:w="30"/><text x="38.4245%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (131 samples, 0.49%)</title><rect x="38.2858%" y="149" width="0.4859%" height="15" fill="rgb(230,138,44)" fg:x="10323" fg:w="131"/><text x="38.5358%" y="159.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,203 samples, 4.46%)</title><rect x="34.4954%" y="165" width="4.4617%" height="15" fill="rgb(235,182,43)" fg:x="9301" fg:w="1203"/><text x="34.7454%" y="175.50">gj`ha..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (50 samples, 0.19%)</title><rect x="38.7717%" y="149" width="0.1854%" height="15" fill="rgb(242,16,51)" fg:x="10454" fg:w="50"/><text x="39.0217%" y="159.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (499 samples, 1.85%)</title><rect x="39.4504%" y="149" width="1.8507%" height="15" fill="rgb(248,9,4)" fg:x="10637" fg:w="499"/><text x="39.7004%" y="159.50">g..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (839 samples, 3.11%)</title><rect x="38.9571%" y="165" width="3.1117%" height="15" fill="rgb(210,31,22)" fg:x="10504" fg:w="839"/><text x="39.2071%" y="175.50">gj`..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (207 samples, 0.77%)</title><rect x="41.3010%" y="149" width="0.7677%" height="15" fill="rgb(239,54,39)" fg:x="11136" fg:w="207"/><text x="41.5510%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 0.23%)</title><rect x="42.0688%" y="165" width="0.2337%" height="15" fill="rgb(230,99,41)" fg:x="11343" fg:w="63"/><text x="42.3188%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (43 samples, 0.16%)</title><rect x="42.3024%" y="165" width="0.1595%" height="15" fill="rgb(253,106,12)" fg:x="11406" fg:w="43"/><text x="42.5524%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (373 samples, 1.38%)</title><rect x="44.7057%" y="149" width="1.3834%" height="15" fill="rgb(213,46,41)" fg:x="12054" fg:w="373"/><text x="44.9557%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (982 samples, 3.64%)</title><rect x="42.4619%" y="165" width="3.6420%" height="15" fill="rgb(215,133,35)" fg:x="11449" fg:w="982"/><text x="42.7119%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="46.0891%" y="149" width="0.0148%" height="15" fill="rgb(213,28,5)" fg:x="12427" fg:w="4"/><text x="46.3391%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (97 samples, 0.36%)</title><rect x="46.1076%" y="165" width="0.3598%" height="15" fill="rgb(215,77,49)" fg:x="12432" fg:w="97"/><text x="46.3576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (237 samples, 0.88%)</title><rect x="46.4674%" y="165" width="0.8790%" height="15" fill="rgb(248,100,22)" fg:x="12529" fg:w="237"/><text x="46.7174%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (87 samples, 0.32%)</title><rect x="47.3464%" y="165" width="0.3227%" height="15" fill="rgb(208,67,9)" fg:x="12766" fg:w="87"/><text x="47.5964%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (548 samples, 2.03%)</title><rect x="47.6690%" y="165" width="2.0324%" height="15" fill="rgb(219,133,21)" fg:x="12853" fg:w="548"/><text x="47.9190%" y="175.50">l..</text></g><g><title>gj`gj::join::materialize (7,374 samples, 27.35%)</title><rect x="23.4952%" y="181" width="27.3486%" height="15" fill="rgb(246,46,29)" fg:x="6335" fg:w="7374"/><text x="23.7452%" y="191.50">gj`gj::join::materialize</text></g><g><title>libsystem_platform.dylib`_platform_memmove (308 samples, 1.14%)</title><rect x="49.7014%" y="165" width="1.1423%" height="15" fill="rgb(246,185,52)" fg:x="13401" fg:w="308"/><text x="49.9514%" y="175.50"></text></g><g><title>gj`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 0.16%)</title><rect x="50.8437%" y="181" width="0.1632%" height="15" fill="rgb(252,136,11)" fg:x="13709" fg:w="44"/><text x="51.0937%" y="191.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (55 samples, 0.20%)</title><rect x="51.0069%" y="181" width="0.2040%" height="15" fill="rgb(219,138,53)" fg:x="13753" fg:w="55"/><text x="51.2569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.03%)</title><rect x="51.3036%" y="133" width="0.0260%" height="15" fill="rgb(211,51,23)" fg:x="13833" fg:w="7"/><text x="51.5536%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.10%)</title><rect x="51.2591%" y="149" width="0.1038%" height="15" fill="rgb(247,221,28)" fg:x="13821" fg:w="28"/><text x="51.5091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (9 samples, 0.03%)</title><rect x="51.3296%" y="133" width="0.0334%" height="15" fill="rgb(251,222,45)" fg:x="13840" fg:w="9"/><text x="51.5796%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.16%)</title><rect x="51.2109%" y="181" width="0.1632%" height="15" fill="rgb(217,162,53)" fg:x="13808" fg:w="44"/><text x="51.4609%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (38 samples, 0.14%)</title><rect x="51.2332%" y="165" width="0.1409%" height="15" fill="rgb(229,93,14)" fg:x="13814" fg:w="38"/><text x="51.4832%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="51.3630%" y="149" width="0.0111%" height="15" fill="rgb(209,67,49)" fg:x="13849" fg:w="3"/><text x="51.6130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (68 samples, 0.25%)</title><rect x="51.3741%" y="181" width="0.2522%" height="15" fill="rgb(213,87,29)" fg:x="13852" fg:w="68"/><text x="51.6241%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (149 samples, 0.55%)</title><rect x="51.6300%" y="181" width="0.5526%" height="15" fill="rgb(205,151,52)" fg:x="13921" fg:w="149"/><text x="51.8800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (12 samples, 0.04%)</title><rect x="52.1381%" y="165" width="0.0445%" height="15" fill="rgb(253,215,39)" fg:x="14058" fg:w="12"/><text x="52.3881%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (82 samples, 0.30%)</title><rect x="52.1826%" y="181" width="0.3041%" height="15" fill="rgb(221,220,41)" fg:x="14070" fg:w="82"/><text x="52.4326%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (70 samples, 0.26%)</title><rect x="52.4867%" y="181" width="0.2596%" height="15" fill="rgb(218,133,21)" fg:x="14152" fg:w="70"/><text x="52.7367%" y="191.50"></text></g><g><title>gj`gj::join::materialize (8,199 samples, 30.41%)</title><rect x="22.3454%" y="197" width="30.4083%" height="15" fill="rgb(221,193,43)" fg:x="6025" fg:w="8199"/><text x="22.5954%" y="207.50">gj`gj::join::materialize</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (18 samples, 0.07%)</title><rect x="52.8131%" y="165" width="0.0668%" height="15" fill="rgb(240,128,52)" fg:x="14240" fg:w="18"/><text x="53.0631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.01%)</title><rect x="52.8650%" y="149" width="0.0148%" height="15" fill="rgb(253,114,12)" fg:x="14254" fg:w="4"/><text x="53.1150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (36 samples, 0.13%)</title><rect x="52.7538%" y="197" width="0.1335%" height="15" fill="rgb(215,223,47)" fg:x="14224" fg:w="36"/><text x="53.0038%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.10%)</title><rect x="52.7872%" y="181" width="0.1001%" height="15" fill="rgb(248,225,23)" fg:x="14233" fg:w="27"/><text x="53.0372%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (5 samples, 0.02%)</title><rect x="52.8873%" y="197" width="0.0185%" height="15" fill="rgb(250,108,0)" fg:x="14260" fg:w="5"/><text x="53.1373%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="52.9058%" y="197" width="0.0111%" height="15" fill="rgb(228,208,7)" fg:x="14265" fg:w="3"/><text x="53.1558%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.07%)</title><rect x="52.9170%" y="197" width="0.0742%" height="15" fill="rgb(244,45,10)" fg:x="14268" fg:w="20"/><text x="53.1670%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.02%)</title><rect x="52.9689%" y="181" width="0.0223%" height="15" fill="rgb(207,125,25)" fg:x="14282" fg:w="6"/><text x="53.2189%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.03%)</title><rect x="52.9986%" y="197" width="0.0334%" height="15" fill="rgb(210,195,18)" fg:x="14290" fg:w="9"/><text x="53.2486%" y="207.50"></text></g><g><title>gj`gj::join::materialize (8,442 samples, 31.31%)</title><rect x="21.7446%" y="213" width="31.3096%" height="15" fill="rgb(249,80,12)" fg:x="5863" fg:w="8442"/><text x="21.9946%" y="223.50">gj`gj::join::materialize</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="53.0394%" y="197" width="0.0148%" height="15" fill="rgb(221,65,9)" fg:x="14301" fg:w="4"/><text x="53.2894%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (18 samples, 0.07%)</title><rect x="53.0616%" y="213" width="0.0668%" height="15" fill="rgb(235,49,36)" fg:x="14307" fg:w="18"/><text x="53.3116%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.03%)</title><rect x="53.1024%" y="197" width="0.0260%" height="15" fill="rgb(225,32,20)" fg:x="14318" fg:w="7"/><text x="53.3524%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (11 samples, 0.04%)</title><rect x="53.1358%" y="213" width="0.0408%" height="15" fill="rgb(215,141,46)" fg:x="14327" fg:w="11"/><text x="53.3858%" y="223.50"></text></g><g><title>gj`gj::join::materialize (8,552 samples, 31.72%)</title><rect x="21.4739%" y="229" width="31.7175%" height="15" fill="rgb(250,160,47)" fg:x="5790" fg:w="8552"/><text x="21.7239%" y="239.50">gj`gj::join::materialize</text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.02%)</title><rect x="53.1988%" y="229" width="0.0223%" height="15" fill="rgb(216,222,40)" fg:x="14344" fg:w="6"/><text x="53.4488%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.01%)</title><rect x="53.2285%" y="229" width="0.0111%" height="15" fill="rgb(234,217,39)" fg:x="14352" fg:w="3"/><text x="53.4785%" y="239.50"></text></g><g><title>gj`gj::join::bushy_join_inner (8,689 samples, 32.23%)</title><rect x="21.0251%" y="245" width="32.2256%" height="15" fill="rgb(207,178,40)" fg:x="5669" fg:w="8689"/><text x="21.2751%" y="255.50">gj`gj::join::bushy_join_inner</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="53.2396%" y="229" width="0.0111%" height="15" fill="rgb(221,136,13)" fg:x="14355" fg:w="3"/><text x="53.4896%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (14 samples, 0.05%)</title><rect x="53.3843%" y="229" width="0.0519%" height="15" fill="rgb(249,199,10)" fg:x="14394" fg:w="14"/><text x="53.6343%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.05%)</title><rect x="53.5549%" y="197" width="0.0519%" height="15" fill="rgb(249,222,13)" fg:x="14440" fg:w="14"/><text x="53.8049%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (42 samples, 0.16%)</title><rect x="53.4807%" y="213" width="0.1558%" height="15" fill="rgb(244,185,38)" fg:x="14420" fg:w="42"/><text x="53.7307%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.03%)</title><rect x="53.6068%" y="197" width="0.0297%" height="15" fill="rgb(236,202,9)" fg:x="14454" fg:w="8"/><text x="53.8568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (106 samples, 0.39%)</title><rect x="53.2545%" y="245" width="0.3931%" height="15" fill="rgb(250,229,37)" fg:x="14359" fg:w="106"/><text x="53.5045%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 0.21%)</title><rect x="53.4362%" y="229" width="0.2114%" height="15" fill="rgb(206,174,23)" fg:x="14408" fg:w="57"/><text x="53.6862%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.01%)</title><rect x="53.6365%" y="213" width="0.0111%" height="15" fill="rgb(211,33,43)" fg:x="14462" fg:w="3"/><text x="53.8865%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="53.6476%" y="245" width="0.0111%" height="15" fill="rgb(245,58,50)" fg:x="14465" fg:w="3"/><text x="53.8976%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (74 samples, 0.27%)</title><rect x="53.9295%" y="229" width="0.2745%" height="15" fill="rgb(244,68,36)" fg:x="14541" fg:w="74"/><text x="54.1795%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (149 samples, 0.55%)</title><rect x="53.6587%" y="245" width="0.5526%" height="15" fill="rgb(232,229,15)" fg:x="14468" fg:w="149"/><text x="53.9087%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (60 samples, 0.22%)</title><rect x="54.2187%" y="245" width="0.2225%" height="15" fill="rgb(254,30,23)" fg:x="14619" fg:w="60"/><text x="54.4687%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.09%)</title><rect x="54.4413%" y="245" width="0.0927%" height="15" fill="rgb(235,160,14)" fg:x="14679" fg:w="25"/><text x="54.6913%" y="255.50"></text></g><g><title>gj`gj::join::bushy_join_inner (9,352 samples, 34.68%)</title><rect x="19.9347%" y="261" width="34.6846%" height="15" fill="rgb(212,155,44)" fg:x="5375" fg:w="9352"/><text x="20.1847%" y="271.50">gj`gj::join::bushy_join_inner</text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.09%)</title><rect x="54.5340%" y="245" width="0.0853%" height="15" fill="rgb(226,2,50)" fg:x="14704" fg:w="23"/><text x="54.7840%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (4 samples, 0.01%)</title><rect x="54.7157%" y="245" width="0.0148%" height="15" fill="rgb(234,177,6)" fg:x="14753" fg:w="4"/><text x="54.9657%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="54.8937%" y="229" width="0.0185%" height="15" fill="rgb(217,24,9)" fg:x="14801" fg:w="5"/><text x="55.1437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.09%)</title><rect x="54.9976%" y="181" width="0.0890%" height="15" fill="rgb(220,13,46)" fg:x="14829" fg:w="24"/><text x="55.2476%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="55.0681%" y="165" width="0.0185%" height="15" fill="rgb(239,221,27)" fg:x="14848" fg:w="5"/><text x="55.3181%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (45 samples, 0.17%)</title><rect x="54.9234%" y="213" width="0.1669%" height="15" fill="rgb(222,198,25)" fg:x="14809" fg:w="45"/><text x="55.1734%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (30 samples, 0.11%)</title><rect x="54.9790%" y="197" width="0.1113%" height="15" fill="rgb(211,99,13)" fg:x="14824" fg:w="30"/><text x="55.2290%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (50 samples, 0.19%)</title><rect x="54.9160%" y="229" width="0.1854%" height="15" fill="rgb(232,111,31)" fg:x="14807" fg:w="50"/><text x="55.1660%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="55.0903%" y="213" width="0.0111%" height="15" fill="rgb(245,82,37)" fg:x="14854" fg:w="3"/><text x="55.3403%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (100 samples, 0.37%)</title><rect x="54.7417%" y="245" width="0.3709%" height="15" fill="rgb(227,149,46)" fg:x="14760" fg:w="100"/><text x="54.9917%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="55.1014%" y="229" width="0.0111%" height="15" fill="rgb(218,36,50)" fg:x="14857" fg:w="3"/><text x="55.3514%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (30 samples, 0.11%)</title><rect x="55.3425%" y="197" width="0.1113%" height="15" fill="rgb(226,80,48)" fg:x="14922" fg:w="30"/><text x="55.5925%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="55.4389%" y="181" width="0.0148%" height="15" fill="rgb(238,224,15)" fg:x="14948" fg:w="4"/><text x="55.6889%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 0.23%)</title><rect x="55.2387%" y="229" width="0.2337%" height="15" fill="rgb(241,136,10)" fg:x="14894" fg:w="63"/><text x="55.4887%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.16%)</title><rect x="55.3091%" y="213" width="0.1632%" height="15" fill="rgb(208,32,45)" fg:x="14913" fg:w="44"/><text x="55.5591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.02%)</title><rect x="55.4538%" y="197" width="0.0185%" height="15" fill="rgb(207,135,9)" fg:x="14952" fg:w="5"/><text x="55.7038%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.01%)</title><rect x="55.4723%" y="229" width="0.0148%" height="15" fill="rgb(206,86,44)" fg:x="14957" fg:w="4"/><text x="55.7223%" y="239.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (100 samples, 0.37%)</title><rect x="55.1200%" y="245" width="0.3709%" height="15" fill="rgb(245,177,15)" fg:x="14862" fg:w="100"/><text x="55.3700%" y="255.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (251 samples, 0.93%)</title><rect x="54.6193%" y="261" width="0.9309%" height="15" fill="rgb(206,64,50)" fg:x="14727" fg:w="251"/><text x="54.8693%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (14 samples, 0.05%)</title><rect x="55.4983%" y="245" width="0.0519%" height="15" fill="rgb(234,36,40)" fg:x="14964" fg:w="14"/><text x="55.7483%" y="255.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (9 samples, 0.03%)</title><rect x="55.5502%" y="261" width="0.0334%" height="15" fill="rgb(213,64,8)" fg:x="14978" fg:w="9"/><text x="55.8002%" y="271.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.02%)</title><rect x="55.5836%" y="261" width="0.0223%" height="15" fill="rgb(210,75,36)" fg:x="14987" fg:w="6"/><text x="55.8336%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.04%)</title><rect x="55.8395%" y="213" width="0.0408%" height="15" fill="rgb(229,88,21)" fg:x="15056" fg:w="11"/><text x="56.0895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (34 samples, 0.13%)</title><rect x="55.7579%" y="229" width="0.1261%" height="15" fill="rgb(252,204,47)" fg:x="15034" fg:w="34"/><text x="56.0079%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (77 samples, 0.29%)</title><rect x="55.6058%" y="261" width="0.2856%" height="15" fill="rgb(208,77,27)" fg:x="14993" fg:w="77"/><text x="55.8558%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (44 samples, 0.16%)</title><rect x="55.7282%" y="245" width="0.1632%" height="15" fill="rgb(221,76,26)" fg:x="15026" fg:w="44"/><text x="55.9782%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (13 samples, 0.05%)</title><rect x="55.8914%" y="261" width="0.0482%" height="15" fill="rgb(225,139,18)" fg:x="15070" fg:w="13"/><text x="56.1414%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (140 samples, 0.52%)</title><rect x="55.9470%" y="261" width="0.5192%" height="15" fill="rgb(230,137,11)" fg:x="15085" fg:w="140"/><text x="56.1970%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (53 samples, 0.20%)</title><rect x="56.2697%" y="245" width="0.1966%" height="15" fill="rgb(212,28,1)" fg:x="15172" fg:w="53"/><text x="56.5197%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (28 samples, 0.10%)</title><rect x="56.4663%" y="261" width="0.1038%" height="15" fill="rgb(248,164,17)" fg:x="15225" fg:w="28"/><text x="56.7163%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (65 samples, 0.24%)</title><rect x="56.5701%" y="261" width="0.2411%" height="15" fill="rgb(222,171,42)" fg:x="15253" fg:w="65"/><text x="56.8201%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (15 samples, 0.06%)</title><rect x="56.8112%" y="261" width="0.0556%" height="15" fill="rgb(243,84,45)" fg:x="15318" fg:w="15"/><text x="57.0612%" y="271.50"></text></g><g><title>gj`gj::join::bushy_join (10,354 samples, 38.40%)</title><rect x="18.5328%" y="277" width="38.4008%" height="15" fill="rgb(252,49,23)" fg:x="4997" fg:w="10354"/><text x="18.7828%" y="287.50">gj`gj::join::bushy_join</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.07%)</title><rect x="56.8668%" y="261" width="0.0668%" height="15" fill="rgb(215,19,7)" fg:x="15333" fg:w="18"/><text x="57.1168%" y="271.50"></text></g><g><title>gj`gj::join::bushy_join_inner (6 samples, 0.02%)</title><rect x="56.9336%" y="277" width="0.0223%" height="15" fill="rgb(238,81,41)" fg:x="15351" fg:w="6"/><text x="57.1836%" y="287.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (205 samples, 0.76%)</title><rect x="56.9558%" y="277" width="0.7603%" height="15" fill="rgb(210,199,37)" fg:x="15357" fg:w="205"/><text x="57.2058%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.06%)</title><rect x="59.4259%" y="229" width="0.0593%" height="15" fill="rgb(244,192,49)" fg:x="16023" fg:w="16"/><text x="59.6759%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (31 samples, 0.11%)</title><rect x="60.0156%" y="197" width="0.1150%" height="15" fill="rgb(226,211,11)" fg:x="16182" fg:w="31"/><text x="60.2656%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (204 samples, 0.76%)</title><rect x="59.5965%" y="213" width="0.7566%" height="15" fill="rgb(236,162,54)" fg:x="16069" fg:w="204"/><text x="59.8465%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (60 samples, 0.22%)</title><rect x="60.1305%" y="197" width="0.2225%" height="15" fill="rgb(220,229,9)" fg:x="16213" fg:w="60"/><text x="60.3805%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (340 samples, 1.26%)</title><rect x="59.1588%" y="245" width="1.2610%" height="15" fill="rgb(250,87,22)" fg:x="15951" fg:w="340"/><text x="59.4088%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (252 samples, 0.93%)</title><rect x="59.4852%" y="229" width="0.9346%" height="15" fill="rgb(239,43,17)" fg:x="16039" fg:w="252"/><text x="59.7352%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.07%)</title><rect x="60.3531%" y="213" width="0.0668%" height="15" fill="rgb(231,177,25)" fg:x="16273" fg:w="18"/><text x="60.6031%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.08%)</title><rect x="60.4198%" y="245" width="0.0816%" height="15" fill="rgb(219,179,1)" fg:x="16291" fg:w="22"/><text x="60.6698%" y="255.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (398 samples, 1.48%)</title><rect x="59.0587%" y="261" width="1.4761%" height="15" fill="rgb(238,219,53)" fg:x="15924" fg:w="398"/><text x="59.3087%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.03%)</title><rect x="60.5014%" y="245" width="0.0334%" height="15" fill="rgb(232,167,36)" fg:x="16313" fg:w="9"/><text x="60.7514%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (17 samples, 0.06%)</title><rect x="60.5385%" y="261" width="0.0630%" height="15" fill="rgb(244,19,51)" fg:x="16323" fg:w="17"/><text x="60.7885%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="60.6016%" y="261" width="0.0148%" height="15" fill="rgb(224,6,22)" fg:x="16340" fg:w="4"/><text x="60.8516%" y="271.50"></text></g><g><title>gj`__rdl_alloc (15 samples, 0.06%)</title><rect x="60.6164%" y="261" width="0.0556%" height="15" fill="rgb(224,145,5)" fg:x="16344" fg:w="15"/><text x="60.8664%" y="271.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.06%)</title><rect x="60.6720%" y="261" width="0.0556%" height="15" fill="rgb(234,130,49)" fg:x="16359" fg:w="15"/><text x="60.9220%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memset (3 samples, 0.01%)</title><rect x="62.1222%" y="245" width="0.0111%" height="15" fill="rgb(254,6,2)" fg:x="16750" fg:w="3"/><text x="62.3722%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (6 samples, 0.02%)</title><rect x="62.2186%" y="229" width="0.0223%" height="15" fill="rgb(208,96,46)" fg:x="16776" fg:w="6"/><text x="62.4686%" y="239.50"></text></g><g><title>gj`__rdl_alloc (9 samples, 0.03%)</title><rect x="62.2408%" y="229" width="0.0334%" height="15" fill="rgb(239,3,39)" fg:x="16782" fg:w="9"/><text x="62.4908%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.01%)</title><rect x="62.4560%" y="197" width="0.0148%" height="15" fill="rgb(233,210,1)" fg:x="16840" fg:w="4"/><text x="62.7060%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.09%)</title><rect x="63.2719%" y="165" width="0.0853%" height="15" fill="rgb(244,137,37)" fg:x="17060" fg:w="23"/><text x="63.5219%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (276 samples, 1.02%)</title><rect x="62.5524%" y="181" width="1.0236%" height="15" fill="rgb(240,136,2)" fg:x="16866" fg:w="276"/><text x="62.8024%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (59 samples, 0.22%)</title><rect x="63.3572%" y="165" width="0.2188%" height="15" fill="rgb(239,18,37)" fg:x="17083" fg:w="59"/><text x="63.6072%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (352 samples, 1.31%)</title><rect x="62.3113%" y="213" width="1.3055%" height="15" fill="rgb(218,185,22)" fg:x="16801" fg:w="352"/><text x="62.5613%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (309 samples, 1.15%)</title><rect x="62.4708%" y="197" width="1.1460%" height="15" fill="rgb(225,218,4)" fg:x="16844" fg:w="309"/><text x="62.7208%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.04%)</title><rect x="63.5760%" y="181" width="0.0408%" height="15" fill="rgb(230,182,32)" fg:x="17142" fg:w="11"/><text x="63.8260%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.03%)</title><rect x="63.6168%" y="213" width="0.0334%" height="15" fill="rgb(242,56,43)" fg:x="17153" fg:w="9"/><text x="63.8668%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (377 samples, 1.40%)</title><rect x="62.2742%" y="229" width="1.3982%" height="15" fill="rgb(233,99,24)" fg:x="16791" fg:w="377"/><text x="62.5242%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.02%)</title><rect x="63.6502%" y="213" width="0.0223%" height="15" fill="rgb(234,209,42)" fg:x="17162" fg:w="6"/><text x="63.9002%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (424 samples, 1.57%)</title><rect x="62.1407%" y="245" width="1.5725%" height="15" fill="rgb(227,7,12)" fg:x="16755" fg:w="424"/><text x="62.3907%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.04%)</title><rect x="63.6724%" y="229" width="0.0408%" height="15" fill="rgb(245,203,43)" fg:x="17168" fg:w="11"/><text x="63.9224%" y="239.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (11 samples, 0.04%)</title><rect x="63.7132%" y="245" width="0.0408%" height="15" fill="rgb(238,205,33)" fg:x="17179" fg:w="11"/><text x="63.9632%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (10 samples, 0.04%)</title><rect x="64.6738%" y="213" width="0.0371%" height="15" fill="rgb(231,56,7)" fg:x="17438" fg:w="10"/><text x="64.9238%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.03%)</title><rect x="65.0632%" y="181" width="0.0297%" height="15" fill="rgb(244,186,29)" fg:x="17543" fg:w="8"/><text x="65.3132%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (199 samples, 0.74%)</title><rect x="64.7183%" y="197" width="0.7380%" height="15" fill="rgb(234,111,31)" fg:x="17450" fg:w="199"/><text x="64.9683%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (98 samples, 0.36%)</title><rect x="65.0929%" y="181" width="0.3635%" height="15" fill="rgb(241,149,10)" fg:x="17551" fg:w="98"/><text x="65.3429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (209 samples, 0.78%)</title><rect x="64.7109%" y="213" width="0.7751%" height="15" fill="rgb(249,206,44)" fg:x="17448" fg:w="209"/><text x="64.9609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (8 samples, 0.03%)</title><rect x="65.4564%" y="197" width="0.0297%" height="15" fill="rgb(251,153,30)" fg:x="17649" fg:w="8"/><text x="65.7064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.01%)</title><rect x="65.4935%" y="197" width="0.0111%" height="15" fill="rgb(239,152,38)" fg:x="17659" fg:w="3"/><text x="65.7435%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (250 samples, 0.93%)</title><rect x="64.6182%" y="229" width="0.9272%" height="15" fill="rgb(249,139,47)" fg:x="17423" fg:w="250"/><text x="64.8682%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.06%)</title><rect x="65.4860%" y="213" width="0.0593%" height="15" fill="rgb(244,64,35)" fg:x="17657" fg:w="16"/><text x="65.7360%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.04%)</title><rect x="65.5046%" y="197" width="0.0408%" height="15" fill="rgb(216,46,15)" fg:x="17662" fg:w="11"/><text x="65.7546%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.03%)</title><rect x="65.5120%" y="181" width="0.0334%" height="15" fill="rgb(250,74,19)" fg:x="17664" fg:w="9"/><text x="65.7620%" y="191.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (488 samples, 1.81%)</title><rect x="63.7540%" y="245" width="1.8099%" height="15" fill="rgb(249,42,33)" fg:x="17190" fg:w="488"/><text x="64.0040%" y="255.50">g..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.02%)</title><rect x="65.5454%" y="229" width="0.0185%" height="15" fill="rgb(242,149,17)" fg:x="17673" fg:w="5"/><text x="65.7954%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="65.5639%" y="245" width="0.0148%" height="15" fill="rgb(244,29,21)" fg:x="17678" fg:w="4"/><text x="65.8139%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="65.5825%" y="245" width="0.0185%" height="15" fill="rgb(220,130,37)" fg:x="17683" fg:w="5"/><text x="65.8325%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="65.5825%" y="229" width="0.0185%" height="15" fill="rgb(211,67,2)" fg:x="17683" fg:w="5"/><text x="65.8325%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.01%)</title><rect x="65.6010%" y="245" width="0.0148%" height="15" fill="rgb(235,68,52)" fg:x="17688" fg:w="4"/><text x="65.8510%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.01%)</title><rect x="65.6010%" y="229" width="0.0148%" height="15" fill="rgb(246,142,3)" fg:x="17688" fg:w="4"/><text x="65.8510%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.01%)</title><rect x="65.6010%" y="213" width="0.0148%" height="15" fill="rgb(241,25,7)" fg:x="17688" fg:w="4"/><text x="65.8510%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.03%)</title><rect x="65.6233%" y="245" width="0.0334%" height="15" fill="rgb(242,119,39)" fg:x="17694" fg:w="9"/><text x="65.8733%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="65.6381%" y="229" width="0.0185%" height="15" fill="rgb(241,98,45)" fg:x="17698" fg:w="5"/><text x="65.8881%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (1,378 samples, 5.11%)</title><rect x="60.7314%" y="261" width="5.1107%" height="15" fill="rgb(254,28,30)" fg:x="16375" fg:w="1378"/><text x="60.9814%" y="271.50">gj`gj:..</text></g><g><title>libsystem_platform.dylib`_platform_memset (47 samples, 0.17%)</title><rect x="65.6678%" y="245" width="0.1743%" height="15" fill="rgb(241,142,54)" fg:x="17706" fg:w="47"/><text x="65.9178%" y="255.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (94 samples, 0.35%)</title><rect x="65.8421%" y="261" width="0.3486%" height="15" fill="rgb(222,85,15)" fg:x="17753" fg:w="94"/><text x="66.0921%" y="271.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.01%)</title><rect x="66.1907%" y="261" width="0.0148%" height="15" fill="rgb(210,85,47)" fg:x="17847" fg:w="4"/><text x="66.4407%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.07%)</title><rect x="66.8620%" y="245" width="0.0742%" height="15" fill="rgb(224,206,25)" fg:x="18028" fg:w="20"/><text x="67.1120%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (125 samples, 0.46%)</title><rect x="67.8708%" y="213" width="0.4636%" height="15" fill="rgb(243,201,19)" fg:x="18300" fg:w="125"/><text x="68.1208%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (427 samples, 1.58%)</title><rect x="67.1439%" y="229" width="1.5837%" height="15" fill="rgb(236,59,4)" fg:x="18104" fg:w="427"/><text x="67.3939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (106 samples, 0.39%)</title><rect x="68.3344%" y="213" width="0.3931%" height="15" fill="rgb(254,179,45)" fg:x="18425" fg:w="106"/><text x="68.5844%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (696 samples, 2.58%)</title><rect x="66.2092%" y="261" width="2.5813%" height="15" fill="rgb(226,14,10)" fg:x="17852" fg:w="696"/><text x="66.4592%" y="271.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (500 samples, 1.85%)</title><rect x="66.9362%" y="245" width="1.8544%" height="15" fill="rgb(244,27,41)" fg:x="18048" fg:w="500"/><text x="67.1862%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (17 samples, 0.06%)</title><rect x="68.7275%" y="229" width="0.0630%" height="15" fill="rgb(235,35,32)" fg:x="18531" fg:w="17"/><text x="68.9775%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.08%)</title><rect x="68.7906%" y="261" width="0.0779%" height="15" fill="rgb(218,68,31)" fg:x="18548" fg:w="21"/><text x="69.0406%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (66 samples, 0.24%)</title><rect x="69.2134%" y="245" width="0.2448%" height="15" fill="rgb(207,120,37)" fg:x="18662" fg:w="66"/><text x="69.4634%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (161 samples, 0.60%)</title><rect x="68.8684%" y="261" width="0.5971%" height="15" fill="rgb(227,98,0)" fg:x="18569" fg:w="161"/><text x="69.1184%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (11 samples, 0.04%)</title><rect x="69.4656%" y="261" width="0.0408%" height="15" fill="rgb(207,7,3)" fg:x="18730" fg:w="11"/><text x="69.7156%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (54 samples, 0.20%)</title><rect x="69.5064%" y="261" width="0.2003%" height="15" fill="rgb(206,98,19)" fg:x="18741" fg:w="54"/><text x="69.7564%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.02%)</title><rect x="69.7066%" y="261" width="0.0223%" height="15" fill="rgb(217,5,26)" fg:x="18795" fg:w="6"/><text x="69.9566%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.05%)</title><rect x="69.7289%" y="261" width="0.0519%" height="15" fill="rgb(235,190,38)" fg:x="18801" fg:w="14"/><text x="69.9789%" y="271.50"></text></g><g><title>gj`gj::util::build_tables (3,452 samples, 12.80%)</title><rect x="57.7161%" y="277" width="12.8027%" height="15" fill="rgb(247,86,24)" fg:x="15562" fg:w="3452"/><text x="57.9661%" y="287.50">gj`gj::util::build_..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (199 samples, 0.74%)</title><rect x="69.7808%" y="261" width="0.7380%" height="15" fill="rgb(205,101,16)" fg:x="18815" fg:w="199"/><text x="70.0308%" y="271.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.04%)</title><rect x="70.5189%" y="261" width="0.0371%" height="15" fill="rgb(246,168,33)" fg:x="19014" fg:w="10"/><text x="70.7689%" y="271.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="70.5559%" y="261" width="0.0334%" height="15" fill="rgb(231,114,1)" fg:x="19024" fg:w="9"/><text x="70.8059%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$free (74 samples, 0.27%)</title><rect x="70.5893%" y="261" width="0.2745%" height="15" fill="rgb(207,184,53)" fg:x="19033" fg:w="74"/><text x="70.8393%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$malloc (7 samples, 0.03%)</title><rect x="70.8638%" y="261" width="0.0260%" height="15" fill="rgb(224,95,51)" fg:x="19107" fg:w="7"/><text x="71.1138%" y="271.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (16 samples, 0.06%)</title><rect x="70.8897%" y="261" width="0.0593%" height="15" fill="rgb(212,188,45)" fg:x="19114" fg:w="16"/><text x="71.1397%" y="271.50"></text></g><g><title>gj`__rdl_alloc (19 samples, 0.07%)</title><rect x="70.9491%" y="261" width="0.0705%" height="15" fill="rgb(223,154,38)" fg:x="19130" fg:w="19"/><text x="71.1991%" y="271.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (12 samples, 0.04%)</title><rect x="71.0233%" y="261" width="0.0445%" height="15" fill="rgb(251,22,52)" fg:x="19150" fg:w="12"/><text x="71.2733%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (25 samples, 0.09%)</title><rect x="72.8331%" y="213" width="0.0927%" height="15" fill="rgb(229,209,22)" fg:x="19638" fg:w="25"/><text x="73.0831%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (87 samples, 0.32%)</title><rect x="73.6899%" y="181" width="0.3227%" height="15" fill="rgb(234,138,34)" fg:x="19869" fg:w="87"/><text x="73.9399%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (257 samples, 0.95%)</title><rect x="73.1187%" y="197" width="0.9532%" height="15" fill="rgb(212,95,11)" fg:x="19715" fg:w="257"/><text x="73.3687%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (16 samples, 0.06%)</title><rect x="74.0125%" y="181" width="0.0593%" height="15" fill="rgb(240,179,47)" fg:x="19956" fg:w="16"/><text x="74.2625%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (431 samples, 1.60%)</title><rect x="72.5290%" y="229" width="1.5985%" height="15" fill="rgb(240,163,11)" fg:x="19556" fg:w="431"/><text x="72.7790%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (324 samples, 1.20%)</title><rect x="72.9259%" y="213" width="1.2016%" height="15" fill="rgb(236,37,12)" fg:x="19663" fg:w="324"/><text x="73.1759%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.06%)</title><rect x="74.0719%" y="197" width="0.0556%" height="15" fill="rgb(232,164,16)" fg:x="19972" fg:w="15"/><text x="74.3219%" y="207.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (493 samples, 1.83%)</title><rect x="72.4066%" y="245" width="1.8284%" height="15" fill="rgb(244,205,15)" fg:x="19523" fg:w="493"/><text x="72.6566%" y="255.50">g..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (29 samples, 0.11%)</title><rect x="74.1275%" y="229" width="0.1076%" height="15" fill="rgb(223,117,47)" fg:x="19987" fg:w="29"/><text x="74.3775%" y="239.50"></text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.36%)</title><rect x="74.2351%" y="245" width="0.3560%" height="15" fill="rgb(244,107,35)" fg:x="20016" fg:w="96"/><text x="74.4851%" y="255.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (262 samples, 0.97%)</title><rect x="74.5911%" y="245" width="0.9717%" height="15" fill="rgb(205,140,8)" fg:x="20112" fg:w="262"/><text x="74.8411%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$malloc (11 samples, 0.04%)</title><rect x="76.1822%" y="197" width="0.0408%" height="15" fill="rgb(228,84,46)" fg:x="20541" fg:w="11"/><text x="76.4322%" y="207.50"></text></g><g><title>gj`__rdl_alloc (3 samples, 0.01%)</title><rect x="76.2230%" y="197" width="0.0111%" height="15" fill="rgb(254,188,9)" fg:x="20552" fg:w="3"/><text x="76.4730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.05%)</title><rect x="76.4047%" y="165" width="0.0519%" height="15" fill="rgb(206,112,54)" fg:x="20601" fg:w="14"/><text x="76.6547%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="76.5123%" y="149" width="0.0223%" height="15" fill="rgb(216,84,49)" fg:x="20630" fg:w="6"/><text x="76.7623%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (31 samples, 0.11%)</title><rect x="76.7607%" y="133" width="0.1150%" height="15" fill="rgb(214,194,35)" fg:x="20697" fg:w="31"/><text x="77.0107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (198 samples, 0.73%)</title><rect x="76.4566%" y="165" width="0.7343%" height="15" fill="rgb(249,28,3)" fg:x="20615" fg:w="198"/><text x="76.7066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (177 samples, 0.66%)</title><rect x="76.5345%" y="149" width="0.6565%" height="15" fill="rgb(222,56,52)" fg:x="20636" fg:w="177"/><text x="76.7845%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (85 samples, 0.32%)</title><rect x="76.8757%" y="133" width="0.3152%" height="15" fill="rgb(245,217,50)" fg:x="20728" fg:w="85"/><text x="77.1257%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.09%)</title><rect x="77.0982%" y="117" width="0.0927%" height="15" fill="rgb(213,201,24)" fg:x="20788" fg:w="25"/><text x="77.3482%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (261 samples, 0.97%)</title><rect x="76.2712%" y="181" width="0.9680%" height="15" fill="rgb(248,116,28)" fg:x="20565" fg:w="261"/><text x="76.5212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.05%)</title><rect x="77.1910%" y="165" width="0.0482%" height="15" fill="rgb(219,72,43)" fg:x="20813" fg:w="13"/><text x="77.4410%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.06%)</title><rect x="77.2392%" y="181" width="0.0556%" height="15" fill="rgb(209,138,14)" fg:x="20826" fg:w="15"/><text x="77.4892%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="77.2948%" y="181" width="0.0111%" height="15" fill="rgb(222,18,33)" fg:x="20841" fg:w="3"/><text x="77.5448%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (296 samples, 1.10%)</title><rect x="76.2341%" y="197" width="1.0978%" height="15" fill="rgb(213,199,7)" fg:x="20555" fg:w="296"/><text x="76.4841%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.03%)</title><rect x="77.3059%" y="181" width="0.0260%" height="15" fill="rgb(250,110,10)" fg:x="20844" fg:w="7"/><text x="77.5559%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (332 samples, 1.23%)</title><rect x="76.1043%" y="213" width="1.2313%" height="15" fill="rgb(248,123,6)" fg:x="20520" fg:w="332"/><text x="76.3543%" y="223.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="77.3356%" y="213" width="0.0297%" height="15" fill="rgb(206,91,31)" fg:x="20852" fg:w="8"/><text x="77.5856%" y="223.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (63 samples, 0.23%)</title><rect x="77.3653%" y="213" width="0.2337%" height="15" fill="rgb(211,154,13)" fg:x="20860" fg:w="63"/><text x="77.6153%" y="223.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (9 samples, 0.03%)</title><rect x="77.8548%" y="197" width="0.0334%" height="15" fill="rgb(225,148,7)" fg:x="20992" fg:w="9"/><text x="78.1048%" y="207.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (58 samples, 0.22%)</title><rect x="77.8882%" y="197" width="0.2151%" height="15" fill="rgb(220,160,43)" fg:x="21001" fg:w="58"/><text x="78.1382%" y="207.50"></text></g><g><title>gj`bytes::bytes::shared_drop (9 samples, 0.03%)</title><rect x="78.5373%" y="181" width="0.0334%" height="15" fill="rgb(213,52,39)" fg:x="21176" fg:w="9"/><text x="78.7873%" y="191.50"></text></g><g><title>gj`core::str::converts::from_utf8 (53 samples, 0.20%)</title><rect x="78.5706%" y="181" width="0.1966%" height="15" fill="rgb(243,137,7)" fg:x="21185" fg:w="53"/><text x="78.8206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.01%)</title><rect x="78.9007%" y="149" width="0.0148%" height="15" fill="rgb(230,79,13)" fg:x="21274" fg:w="4"/><text x="79.1507%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (11 samples, 0.04%)</title><rect x="79.0713%" y="117" width="0.0408%" height="15" fill="rgb(247,105,23)" fg:x="21320" fg:w="11"/><text x="79.3213%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (52 samples, 0.19%)</title><rect x="78.9638%" y="133" width="0.1929%" height="15" fill="rgb(223,179,41)" fg:x="21291" fg:w="52"/><text x="79.2138%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.04%)</title><rect x="79.1121%" y="117" width="0.0445%" height="15" fill="rgb(218,9,34)" fg:x="21331" fg:w="12"/><text x="79.3621%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (90 samples, 0.33%)</title><rect x="78.8302%" y="165" width="0.3338%" height="15" fill="rgb(222,106,8)" fg:x="21255" fg:w="90"/><text x="79.0802%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (67 samples, 0.25%)</title><rect x="78.9156%" y="149" width="0.2485%" height="15" fill="rgb(211,220,0)" fg:x="21278" fg:w="67"/><text x="79.1656%" y="159.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (109 samples, 0.40%)</title><rect x="78.7672%" y="181" width="0.4043%" height="15" fill="rgb(229,52,16)" fg:x="21238" fg:w="109"/><text x="79.0172%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="79.1715%" y="181" width="0.0148%" height="15" fill="rgb(212,155,18)" fg:x="21347" fg:w="4"/><text x="79.4215%" y="191.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (375 samples, 1.39%)</title><rect x="78.1033%" y="197" width="1.3908%" height="15" fill="rgb(242,21,14)" fg:x="21059" fg:w="375"/><text x="78.3533%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (83 samples, 0.31%)</title><rect x="79.1863%" y="181" width="0.3078%" height="15" fill="rgb(222,19,48)" fg:x="21351" fg:w="83"/><text x="79.4363%" y="191.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (110 samples, 0.41%)</title><rect x="79.9280%" y="149" width="0.4080%" height="15" fill="rgb(232,45,27)" fg:x="21551" fg:w="110"/><text x="80.1780%" y="159.50"></text></g><g><title>gj`bytes::bytes::shared_clone (61 samples, 0.23%)</title><rect x="80.1098%" y="133" width="0.2262%" height="15" fill="rgb(249,103,42)" fg:x="21600" fg:w="61"/><text x="80.3598%" y="143.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (241 samples, 0.89%)</title><rect x="79.5646%" y="165" width="0.8938%" height="15" fill="rgb(246,81,33)" fg:x="21453" fg:w="241"/><text x="79.8146%" y="175.50"></text></g><g><title>gj`bytes::bytes::shared_drop (33 samples, 0.12%)</title><rect x="80.3360%" y="149" width="0.1224%" height="15" fill="rgb(252,33,42)" fg:x="21661" fg:w="33"/><text x="80.5860%" y="159.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (13 samples, 0.05%)</title><rect x="80.4621%" y="165" width="0.0482%" height="15" fill="rgb(209,212,41)" fg:x="21695" fg:w="13"/><text x="80.7121%" y="175.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (258 samples, 0.96%)</title><rect x="79.5646%" y="181" width="0.9569%" height="15" fill="rgb(207,154,6)" fg:x="21453" fg:w="258"/><text x="79.8146%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="80.5103%" y="165" width="0.0111%" height="15" fill="rgb(223,64,47)" fg:x="21708" fg:w="3"/><text x="80.7603%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (791 samples, 2.93%)</title><rect x="77.5989%" y="213" width="2.9336%" height="15" fill="rgb(211,161,38)" fg:x="20923" fg:w="791"/><text x="77.8489%" y="223.50">gj..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (280 samples, 1.04%)</title><rect x="79.4941%" y="197" width="1.0385%" height="15" fill="rgb(219,138,40)" fg:x="21434" fg:w="280"/><text x="79.7441%" y="207.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (3 samples, 0.01%)</title><rect x="80.5215%" y="181" width="0.0111%" height="15" fill="rgb(241,228,46)" fg:x="21711" fg:w="3"/><text x="80.7715%" y="191.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (13 samples, 0.05%)</title><rect x="80.5326%" y="213" width="0.0482%" height="15" fill="rgb(223,209,38)" fg:x="21714" fg:w="13"/><text x="80.7826%" y="223.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (28 samples, 0.10%)</title><rect x="80.5808%" y="213" width="0.1038%" height="15" fill="rgb(236,164,45)" fg:x="21727" fg:w="28"/><text x="80.8308%" y="223.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (39 samples, 0.14%)</title><rect x="80.6846%" y="213" width="0.1446%" height="15" fill="rgb(231,15,5)" fg:x="21755" fg:w="39"/><text x="80.9346%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.11%)</title><rect x="81.1445%" y="197" width="0.1076%" height="15" fill="rgb(252,35,15)" fg:x="21879" fg:w="29"/><text x="81.3945%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (57 samples, 0.21%)</title><rect x="81.7231%" y="165" width="0.2114%" height="15" fill="rgb(248,181,18)" fg:x="22035" fg:w="57"/><text x="81.9731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (155 samples, 0.57%)</title><rect x="81.3893%" y="181" width="0.5749%" height="15" fill="rgb(233,39,42)" fg:x="21945" fg:w="155"/><text x="81.6393%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.03%)</title><rect x="81.9345%" y="165" width="0.0297%" height="15" fill="rgb(238,110,33)" fg:x="22092" fg:w="8"/><text x="82.1845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (321 samples, 1.19%)</title><rect x="80.8293%" y="213" width="1.1905%" height="15" fill="rgb(233,195,10)" fg:x="21794" fg:w="321"/><text x="81.0793%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (207 samples, 0.77%)</title><rect x="81.2521%" y="197" width="0.7677%" height="15" fill="rgb(254,105,3)" fg:x="21908" fg:w="207"/><text x="81.5021%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.06%)</title><rect x="81.9642%" y="181" width="0.0556%" height="15" fill="rgb(221,225,9)" fg:x="22100" fg:w="15"/><text x="82.2142%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (22 samples, 0.08%)</title><rect x="82.0198%" y="213" width="0.0816%" height="15" fill="rgb(224,227,45)" fg:x="22115" fg:w="22"/><text x="82.2698%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (1,757 samples, 6.52%)</title><rect x="75.5999%" y="229" width="6.5163%" height="15" fill="rgb(229,198,43)" fg:x="20384" fg:w="1757"/><text x="75.8499%" y="239.50">gj`&lt;parqu..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="82.1014%" y="213" width="0.0148%" height="15" fill="rgb(206,209,35)" fg:x="22137" fg:w="4"/><text x="82.3514%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (15 samples, 0.06%)</title><rect x="82.1162%" y="229" width="0.0556%" height="15" fill="rgb(245,195,53)" fg:x="22141" fg:w="15"/><text x="82.3662%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="82.1719%" y="229" width="0.0334%" height="15" fill="rgb(240,92,26)" fg:x="22156" fg:w="9"/><text x="82.4219%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$memmove (14 samples, 0.05%)</title><rect x="82.2052%" y="229" width="0.0519%" height="15" fill="rgb(207,40,23)" fg:x="22165" fg:w="14"/><text x="82.4552%" y="239.50"></text></g><g><title>gj`__rdl_alloc (7 samples, 0.03%)</title><rect x="82.2572%" y="229" width="0.0260%" height="15" fill="rgb(223,111,35)" fg:x="22179" fg:w="7"/><text x="82.5072%" y="239.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.02%)</title><rect x="82.2831%" y="229" width="0.0185%" height="15" fill="rgb(229,147,28)" fg:x="22186" fg:w="5"/><text x="82.5331%" y="239.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (3 samples, 0.01%)</title><rect x="82.3017%" y="229" width="0.0111%" height="15" fill="rgb(211,29,28)" fg:x="22191" fg:w="3"/><text x="82.5517%" y="239.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (3 samples, 0.01%)</title><rect x="82.3017%" y="213" width="0.0111%" height="15" fill="rgb(228,72,33)" fg:x="22191" fg:w="3"/><text x="82.5517%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (3 samples, 0.01%)</title><rect x="82.3017%" y="197" width="0.0111%" height="15" fill="rgb(205,214,31)" fg:x="22191" fg:w="3"/><text x="82.5517%" y="207.50"></text></g><g><title>gj`bytes::bytes::shared_drop (3 samples, 0.01%)</title><rect x="82.3017%" y="181" width="0.0111%" height="15" fill="rgb(224,111,15)" fg:x="22191" fg:w="3"/><text x="82.5517%" y="191.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (5 samples, 0.02%)</title><rect x="82.3165%" y="181" width="0.0185%" height="15" fill="rgb(253,21,26)" fg:x="22195" fg:w="5"/><text x="82.5665%" y="191.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (5 samples, 0.02%)</title><rect x="82.3165%" y="165" width="0.0185%" height="15" fill="rgb(245,139,43)" fg:x="22195" fg:w="5"/><text x="82.5665%" y="175.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (154 samples, 0.57%)</title><rect x="82.3351%" y="117" width="0.5712%" height="15" fill="rgb(252,170,7)" fg:x="22200" fg:w="154"/><text x="82.5851%" y="127.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (159 samples, 0.59%)</title><rect x="82.3351%" y="133" width="0.5897%" height="15" fill="rgb(231,118,14)" fg:x="22200" fg:w="159"/><text x="82.5851%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="82.9062%" y="117" width="0.0185%" height="15" fill="rgb(238,83,0)" fg:x="22354" fg:w="5"/><text x="83.1562%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.02%)</title><rect x="82.9322%" y="133" width="0.0185%" height="15" fill="rgb(221,39,39)" fg:x="22361" fg:w="5"/><text x="83.1822%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="82.9322%" y="117" width="0.0185%" height="15" fill="rgb(222,119,46)" fg:x="22361" fg:w="5"/><text x="83.1822%" y="127.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (177 samples, 0.66%)</title><rect x="82.3351%" y="149" width="0.6565%" height="15" fill="rgb(222,165,49)" fg:x="22200" fg:w="177"/><text x="82.5851%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (11 samples, 0.04%)</title><rect x="82.9507%" y="133" width="0.0408%" height="15" fill="rgb(219,113,52)" fg:x="22366" fg:w="11"/><text x="83.2007%" y="143.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (8 samples, 0.03%)</title><rect x="82.9915%" y="149" width="0.0297%" height="15" fill="rgb(214,7,15)" fg:x="22377" fg:w="8"/><text x="83.2415%" y="159.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (8 samples, 0.03%)</title><rect x="82.9915%" y="133" width="0.0297%" height="15" fill="rgb(235,32,4)" fg:x="22377" fg:w="8"/><text x="83.2415%" y="143.50"></text></g><g><title>gj`std::io::default_read_exact (8 samples, 0.03%)</title><rect x="82.9915%" y="117" width="0.0297%" height="15" fill="rgb(238,90,54)" fg:x="22377" fg:w="8"/><text x="83.2415%" y="127.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.03%)</title><rect x="82.9915%" y="101" width="0.0297%" height="15" fill="rgb(213,208,19)" fg:x="22377" fg:w="8"/><text x="83.2415%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (8 samples, 0.03%)</title><rect x="82.9915%" y="85" width="0.0297%" height="15" fill="rgb(233,156,4)" fg:x="22377" fg:w="8"/><text x="83.2415%" y="95.50"></text></g><g><title>gj`std::io::default_read_buf (33 samples, 0.12%)</title><rect x="83.0212%" y="133" width="0.1224%" height="15" fill="rgb(207,194,5)" fg:x="22385" fg:w="33"/><text x="83.2712%" y="143.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (33 samples, 0.12%)</title><rect x="83.0212%" y="117" width="0.1224%" height="15" fill="rgb(206,111,30)" fg:x="22385" fg:w="33"/><text x="83.2712%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (33 samples, 0.12%)</title><rect x="83.0212%" y="101" width="0.1224%" height="15" fill="rgb(243,70,54)" fg:x="22385" fg:w="33"/><text x="83.2712%" y="111.50"></text></g><g><title>gj`std::io::Read::read_to_end (36 samples, 0.13%)</title><rect x="83.0212%" y="149" width="0.1335%" height="15" fill="rgb(242,28,8)" fg:x="22385" fg:w="36"/><text x="83.2712%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.01%)</title><rect x="83.1436%" y="133" width="0.0111%" height="15" fill="rgb(219,106,18)" fg:x="22418" fg:w="3"/><text x="83.3936%" y="143.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (228 samples, 0.85%)</title><rect x="82.3128%" y="229" width="0.8456%" height="15" fill="rgb(244,222,10)" fg:x="22194" fg:w="228"/><text x="82.5628%" y="239.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (228 samples, 0.85%)</title><rect x="82.3128%" y="213" width="0.8456%" height="15" fill="rgb(236,179,52)" fg:x="22194" fg:w="228"/><text x="82.5628%" y="223.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (228 samples, 0.85%)</title><rect x="82.3128%" y="197" width="0.8456%" height="15" fill="rgb(213,23,39)" fg:x="22194" fg:w="228"/><text x="82.5628%" y="207.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (222 samples, 0.82%)</title><rect x="82.3351%" y="181" width="0.8234%" height="15" fill="rgb(238,48,10)" fg:x="22200" fg:w="222"/><text x="82.5851%" y="191.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (222 samples, 0.82%)</title><rect x="82.3351%" y="165" width="0.8234%" height="15" fill="rgb(251,196,23)" fg:x="22200" fg:w="222"/><text x="82.5851%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (16 samples, 0.06%)</title><rect x="83.1584%" y="229" width="0.0593%" height="15" fill="rgb(250,152,24)" fg:x="22422" fg:w="16"/><text x="83.4084%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.04%)</title><rect x="83.2177%" y="229" width="0.0445%" height="15" fill="rgb(209,150,17)" fg:x="22438" fg:w="12"/><text x="83.4677%" y="239.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (2,183 samples, 8.10%)</title><rect x="75.5628%" y="245" width="8.0963%" height="15" fill="rgb(234,202,34)" fg:x="20374" fg:w="2183"/><text x="75.8128%" y="255.50">gj`&lt;parquet..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (106 samples, 0.39%)</title><rect x="83.2660%" y="229" width="0.3931%" height="15" fill="rgb(253,148,53)" fg:x="22451" fg:w="106"/><text x="83.5160%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (17 samples, 0.06%)</title><rect x="83.6591%" y="245" width="0.0630%" height="15" fill="rgb(218,129,16)" fg:x="22557" fg:w="17"/><text x="83.9091%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (26 samples, 0.10%)</title><rect x="83.7221%" y="245" width="0.0964%" height="15" fill="rgb(216,85,19)" fg:x="22574" fg:w="26"/><text x="83.9721%" y="255.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (18 samples, 0.07%)</title><rect x="83.8186%" y="245" width="0.0668%" height="15" fill="rgb(235,228,7)" fg:x="22600" fg:w="18"/><text x="84.0686%" y="255.50"></text></g><g><title>gj`__rdl_alloc (16 samples, 0.06%)</title><rect x="83.8853%" y="245" width="0.0593%" height="15" fill="rgb(245,175,0)" fg:x="22618" fg:w="16"/><text x="84.1353%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.03%)</title><rect x="83.9447%" y="245" width="0.0260%" height="15" fill="rgb(208,168,36)" fg:x="22634" fg:w="7"/><text x="84.1947%" y="255.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (7 samples, 0.03%)</title><rect x="83.9447%" y="229" width="0.0260%" height="15" fill="rgb(246,171,24)" fg:x="22634" fg:w="7"/><text x="84.1947%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.03%)</title><rect x="83.9447%" y="213" width="0.0260%" height="15" fill="rgb(215,142,24)" fg:x="22634" fg:w="7"/><text x="84.1947%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.03%)</title><rect x="83.9447%" y="197" width="0.0260%" height="15" fill="rgb(250,187,7)" fg:x="22634" fg:w="7"/><text x="84.1947%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="83.9521%" y="181" width="0.0185%" height="15" fill="rgb(228,66,33)" fg:x="22636" fg:w="5"/><text x="84.2021%" y="191.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (36 samples, 0.13%)</title><rect x="83.9706%" y="245" width="0.1335%" height="15" fill="rgb(234,215,21)" fg:x="22641" fg:w="36"/><text x="84.2206%" y="255.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (30 samples, 0.11%)</title><rect x="84.1041%" y="245" width="0.1113%" height="15" fill="rgb(222,191,20)" fg:x="22677" fg:w="30"/><text x="84.3541%" y="255.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (307 samples, 1.14%)</title><rect x="84.5344%" y="229" width="1.1386%" height="15" fill="rgb(245,79,54)" fg:x="22793" fg:w="307"/><text x="84.7844%" y="239.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (517 samples, 1.92%)</title><rect x="84.2154%" y="245" width="1.9174%" height="15" fill="rgb(240,10,37)" fg:x="22707" fg:w="517"/><text x="84.4654%" y="255.50">g..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (124 samples, 0.46%)</title><rect x="85.6730%" y="229" width="0.4599%" height="15" fill="rgb(214,192,32)" fg:x="23100" fg:w="124"/><text x="85.9230%" y="239.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (4 samples, 0.01%)</title><rect x="86.1328%" y="245" width="0.0148%" height="15" fill="rgb(209,36,54)" fg:x="23224" fg:w="4"/><text x="86.3828%" y="255.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (4 samples, 0.01%)</title><rect x="86.1328%" y="229" width="0.0148%" height="15" fill="rgb(220,10,11)" fg:x="23224" fg:w="4"/><text x="86.3828%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (15 samples, 0.06%)</title><rect x="86.4258%" y="229" width="0.0556%" height="15" fill="rgb(221,106,17)" fg:x="23303" fg:w="15"/><text x="86.6758%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (41 samples, 0.15%)</title><rect x="86.9933%" y="197" width="0.1521%" height="15" fill="rgb(251,142,44)" fg:x="23456" fg:w="41"/><text x="87.2433%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (142 samples, 0.53%)</title><rect x="86.6298%" y="213" width="0.5266%" height="15" fill="rgb(238,13,15)" fg:x="23358" fg:w="142"/><text x="86.8798%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="87.1453%" y="197" width="0.0111%" height="15" fill="rgb(208,107,27)" fg:x="23497" fg:w="3"/><text x="87.3953%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (290 samples, 1.08%)</title><rect x="86.1477%" y="245" width="1.0755%" height="15" fill="rgb(205,136,37)" fg:x="23228" fg:w="290"/><text x="86.3977%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (200 samples, 0.74%)</title><rect x="86.4815%" y="229" width="0.7418%" height="15" fill="rgb(250,205,27)" fg:x="23318" fg:w="200"/><text x="86.7315%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (18 samples, 0.07%)</title><rect x="87.1565%" y="213" width="0.0668%" height="15" fill="rgb(210,80,43)" fg:x="23500" fg:w="18"/><text x="87.4065%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (24 samples, 0.09%)</title><rect x="87.2232%" y="245" width="0.0890%" height="15" fill="rgb(247,160,36)" fg:x="23518" fg:w="24"/><text x="87.4732%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (354 samples, 1.31%)</title><rect x="89.3521%" y="229" width="1.3129%" height="15" fill="rgb(234,13,49)" fg:x="24092" fg:w="354"/><text x="89.6021%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (11 samples, 0.04%)</title><rect x="90.6650%" y="229" width="0.0408%" height="15" fill="rgb(234,122,0)" fg:x="24446" fg:w="11"/><text x="90.9150%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (966 samples, 3.58%)</title><rect x="87.3122%" y="245" width="3.5827%" height="15" fill="rgb(207,146,38)" fg:x="23542" fg:w="966"/><text x="87.5622%" y="255.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (51 samples, 0.19%)</title><rect x="90.7058%" y="229" width="0.1891%" height="15" fill="rgb(207,177,25)" fg:x="24457" fg:w="51"/><text x="90.9558%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (46 samples, 0.17%)</title><rect x="90.7243%" y="213" width="0.1706%" height="15" fill="rgb(211,178,42)" fg:x="24462" fg:w="46"/><text x="90.9743%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (59 samples, 0.22%)</title><rect x="91.3511%" y="213" width="0.2188%" height="15" fill="rgb(230,69,54)" fg:x="24631" fg:w="59"/><text x="91.6011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (206 samples, 0.76%)</title><rect x="90.8949%" y="245" width="0.7640%" height="15" fill="rgb(214,135,41)" fg:x="24508" fg:w="206"/><text x="91.1449%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (162 samples, 0.60%)</title><rect x="91.0581%" y="229" width="0.6008%" height="15" fill="rgb(237,67,25)" fg:x="24552" fg:w="162"/><text x="91.3081%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (24 samples, 0.09%)</title><rect x="91.5699%" y="213" width="0.0890%" height="15" fill="rgb(222,189,50)" fg:x="24690" fg:w="24"/><text x="91.8199%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (52 samples, 0.19%)</title><rect x="91.6589%" y="245" width="0.1929%" height="15" fill="rgb(245,148,34)" fg:x="24714" fg:w="52"/><text x="91.9089%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (219 samples, 0.81%)</title><rect x="91.8518%" y="245" width="0.8122%" height="15" fill="rgb(222,29,6)" fg:x="24766" fg:w="219"/><text x="92.1018%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (84 samples, 0.31%)</title><rect x="92.6640%" y="245" width="0.3115%" height="15" fill="rgb(221,189,43)" fg:x="24985" fg:w="84"/><text x="92.9140%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (12 samples, 0.04%)</title><rect x="92.9756%" y="245" width="0.0445%" height="15" fill="rgb(207,36,27)" fg:x="25069" fg:w="12"/><text x="93.2256%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.04%)</title><rect x="93.0201%" y="245" width="0.0408%" height="15" fill="rgb(217,90,24)" fg:x="25081" fg:w="11"/><text x="93.2701%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.06%)</title><rect x="93.0609%" y="245" width="0.0593%" height="15" fill="rgb(224,66,35)" fg:x="25092" fg:w="16"/><text x="93.3109%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (226 samples, 0.84%)</title><rect x="93.1202%" y="245" width="0.8382%" height="15" fill="rgb(221,13,50)" fg:x="25108" fg:w="226"/><text x="93.3702%" y="255.50"></text></g><g><title>gj`gj::util::from_parquet (6,276 samples, 23.28%)</title><rect x="71.0678%" y="261" width="23.2763%" height="15" fill="rgb(236,68,49)" fg:x="19162" fg:w="6276"/><text x="71.3178%" y="271.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (104 samples, 0.39%)</title><rect x="93.9584%" y="245" width="0.3857%" height="15" fill="rgb(229,146,28)" fg:x="25334" fg:w="104"/><text x="94.2084%" y="255.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (46 samples, 0.17%)</title><rect x="94.3441%" y="261" width="0.1706%" height="15" fill="rgb(225,31,38)" fg:x="25438" fg:w="46"/><text x="94.5941%" y="271.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (4 samples, 0.01%)</title><rect x="94.5147%" y="261" width="0.0148%" height="15" fill="rgb(250,208,3)" fg:x="25484" fg:w="4"/><text x="94.7647%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.04%)</title><rect x="94.5332%" y="261" width="0.0445%" height="15" fill="rgb(246,54,23)" fg:x="25489" fg:w="12"/><text x="94.7832%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (100 samples, 0.37%)</title><rect x="94.5778%" y="261" width="0.3709%" height="15" fill="rgb(243,76,11)" fg:x="25501" fg:w="100"/><text x="94.8278%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (119 samples, 0.44%)</title><rect x="94.9486%" y="261" width="0.4413%" height="15" fill="rgb(245,21,50)" fg:x="25601" fg:w="119"/><text x="95.1986%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.04%)</title><rect x="95.3900%" y="261" width="0.0445%" height="15" fill="rgb(228,9,43)" fg:x="25720" fg:w="12"/><text x="95.6400%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (106 samples, 0.39%)</title><rect x="95.4345%" y="261" width="0.3931%" height="15" fill="rgb(208,100,47)" fg:x="25732" fg:w="106"/><text x="95.6845%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (66 samples, 0.24%)</title><rect x="95.8276%" y="261" width="0.2448%" height="15" fill="rgb(232,26,8)" fg:x="25838" fg:w="66"/><text x="96.0776%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (8 samples, 0.03%)</title><rect x="96.0724%" y="261" width="0.0297%" height="15" fill="rgb(216,166,38)" fg:x="25904" fg:w="8"/><text x="96.3224%" y="271.50"></text></g><g><title>gj`gj::util::load_db (6,944 samples, 25.75%)</title><rect x="70.5189%" y="277" width="25.7538%" height="15" fill="rgb(251,202,51)" fg:x="19014" fg:w="6944"/><text x="70.7689%" y="287.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.17%)</title><rect x="96.1021%" y="261" width="0.1706%" height="15" fill="rgb(254,216,34)" fg:x="25912" fg:w="46"/><text x="96.3521%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (134 samples, 0.50%)</title><rect x="96.2764%" y="277" width="0.4970%" height="15" fill="rgb(251,32,27)" fg:x="25959" fg:w="134"/><text x="96.5264%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (111 samples, 0.41%)</title><rect x="96.7734%" y="277" width="0.4117%" height="15" fill="rgb(208,127,28)" fg:x="26093" fg:w="111"/><text x="97.0234%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (380 samples, 1.41%)</title><rect x="97.1850%" y="277" width="1.4093%" height="15" fill="rgb(224,137,22)" fg:x="26204" fg:w="380"/><text x="97.4350%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.04%)</title><rect x="98.5944%" y="277" width="0.0371%" height="15" fill="rgb(254,70,32)" fg:x="26584" fg:w="10"/><text x="98.8444%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (10 samples, 0.04%)</title><rect x="98.5944%" y="261" width="0.0371%" height="15" fill="rgb(229,75,37)" fg:x="26584" fg:w="10"/><text x="98.8444%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.04%)</title><rect x="98.5944%" y="245" width="0.0371%" height="15" fill="rgb(252,64,23)" fg:x="26584" fg:w="10"/><text x="98.8444%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc (196 samples, 0.73%)</title><rect x="98.6315%" y="277" width="0.7269%" height="15" fill="rgb(232,162,48)" fg:x="26594" fg:w="196"/><text x="98.8815%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (86 samples, 0.32%)</title><rect x="99.3584%" y="277" width="0.3190%" height="15" fill="rgb(246,160,12)" fg:x="26790" fg:w="86"/><text x="99.6084%" y="287.50"></text></g><g><title>gj`main (26,922 samples, 99.85%)</title><rect x="0.0000%" y="357" width="99.8479%" height="15" fill="rgb(247,166,0)" fg:x="0" fg:w="26922"/><text x="0.2500%" y="367.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (26,921 samples, 99.84%)</title><rect x="0.0037%" y="341" width="99.8442%" height="15" fill="rgb(249,219,21)" fg:x="1" fg:w="26921"/><text x="0.2537%" y="351.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (26,921 samples, 99.84%)</title><rect x="0.0037%" y="325" width="99.8442%" height="15" fill="rgb(205,209,3)" fg:x="1" fg:w="26921"/><text x="0.2537%" y="335.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (26,921 samples, 99.84%)</title><rect x="0.0037%" y="309" width="99.8442%" height="15" fill="rgb(243,44,1)" fg:x="1" fg:w="26921"/><text x="0.2537%" y="319.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>gj`gj::main (26,921 samples, 99.84%)</title><rect x="0.0037%" y="293" width="99.8442%" height="15" fill="rgb(206,159,16)" fg:x="1" fg:w="26921"/><text x="0.2537%" y="303.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (46 samples, 0.17%)</title><rect x="99.6773%" y="277" width="0.1706%" height="15" fill="rgb(244,77,30)" fg:x="26876" fg:w="46"/><text x="99.9273%" y="287.50"></text></g><g><title>dyld`start (26,923 samples, 99.85%)</title><rect x="0.0000%" y="373" width="99.8516%" height="15" fill="rgb(218,69,12)" fg:x="0" fg:w="26923"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>all (26,963 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(212,87,7)" fg:x="0" fg:w="26963"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__exit (40 samples, 0.15%)</title><rect x="99.8516%" y="373" width="0.1484%" height="15" fill="rgb(245,114,25)" fg:x="26923" fg:w="40"/><text x="100.1016%" y="383.50"></text></g></svg></svg>