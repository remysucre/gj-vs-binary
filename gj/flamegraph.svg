<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="61515"><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (268 samples, 0.44%)</title><rect x="0.1463%" y="197" width="0.4357%" height="15" fill="rgb(227,0,7)" fg:x="90" fg:w="268"/><text x="0.3963%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (50 samples, 0.08%)</title><rect x="0.9234%" y="181" width="0.0813%" height="15" fill="rgb(217,0,24)" fg:x="568" fg:w="50"/><text x="1.1734%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (268 samples, 0.44%)</title><rect x="0.5820%" y="197" width="0.4357%" height="15" fill="rgb(221,193,54)" fg:x="358" fg:w="268"/><text x="0.8320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.01%)</title><rect x="1.0046%" y="181" width="0.0130%" height="15" fill="rgb(248,212,6)" fg:x="618" fg:w="8"/><text x="1.2546%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.01%)</title><rect x="1.0046%" y="165" width="0.0130%" height="15" fill="rgb(208,68,35)" fg:x="618" fg:w="8"/><text x="1.2546%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.01%)</title><rect x="1.0176%" y="197" width="0.0146%" height="15" fill="rgb(232,128,0)" fg:x="626" fg:w="9"/><text x="1.2676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.03%)</title><rect x="1.0713%" y="165" width="0.0276%" height="15" fill="rgb(207,160,47)" fg:x="659" fg:w="17"/><text x="1.3213%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (59 samples, 0.10%)</title><rect x="1.0323%" y="197" width="0.0959%" height="15" fill="rgb(228,23,34)" fg:x="635" fg:w="59"/><text x="1.2823%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (58 samples, 0.09%)</title><rect x="1.0339%" y="181" width="0.0943%" height="15" fill="rgb(218,30,26)" fg:x="636" fg:w="58"/><text x="1.2839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (12 samples, 0.02%)</title><rect x="1.1087%" y="165" width="0.0195%" height="15" fill="rgb(220,122,19)" fg:x="682" fg:w="12"/><text x="1.3587%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.02%)</title><rect x="1.1087%" y="149" width="0.0195%" height="15" fill="rgb(250,228,42)" fg:x="682" fg:w="12"/><text x="1.3587%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.02%)</title><rect x="1.1282%" y="197" width="0.0244%" height="15" fill="rgb(240,193,28)" fg:x="694" fg:w="15"/><text x="1.3782%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (69 samples, 0.11%)</title><rect x="1.2989%" y="165" width="0.1122%" height="15" fill="rgb(216,20,37)" fg:x="799" fg:w="69"/><text x="1.5489%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (160 samples, 0.26%)</title><rect x="1.1526%" y="197" width="0.2601%" height="15" fill="rgb(206,188,39)" fg:x="709" fg:w="160"/><text x="1.4026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (70 samples, 0.11%)</title><rect x="1.2989%" y="181" width="0.1138%" height="15" fill="rgb(217,207,13)" fg:x="799" fg:w="70"/><text x="1.5489%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (20 samples, 0.03%)</title><rect x="1.4127%" y="197" width="0.0325%" height="15" fill="rgb(231,73,38)" fg:x="869" fg:w="20"/><text x="1.6627%" y="207.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (882 samples, 1.43%)</title><rect x="0.0179%" y="213" width="1.4338%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="882"/><text x="0.2679%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (8 samples, 0.01%)</title><rect x="1.4517%" y="213" width="0.0130%" height="15" fill="rgb(210,31,41)" fg:x="893" fg:w="8"/><text x="1.7017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (30 samples, 0.05%)</title><rect x="1.4777%" y="213" width="0.0488%" height="15" fill="rgb(221,200,47)" fg:x="909" fg:w="30"/><text x="1.7277%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (91 samples, 0.15%)</title><rect x="1.5265%" y="213" width="0.1479%" height="15" fill="rgb(226,26,5)" fg:x="939" fg:w="91"/><text x="1.7765%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.02%)</title><rect x="1.6744%" y="213" width="0.0244%" height="15" fill="rgb(249,33,26)" fg:x="1030" fg:w="15"/><text x="1.9244%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.02%)</title><rect x="1.6744%" y="197" width="0.0244%" height="15" fill="rgb(235,183,28)" fg:x="1030" fg:w="15"/><text x="1.9244%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.02%)</title><rect x="1.6744%" y="181" width="0.0244%" height="15" fill="rgb(221,5,38)" fg:x="1030" fg:w="15"/><text x="1.9244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (31 samples, 0.05%)</title><rect x="1.7020%" y="213" width="0.0504%" height="15" fill="rgb(247,18,42)" fg:x="1047" fg:w="31"/><text x="1.9520%" y="223.50"></text></g><g><title>gj`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,069 samples, 1.74%)</title><rect x="0.0179%" y="229" width="1.7378%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1069"/><text x="0.2679%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (34 samples, 0.06%)</title><rect x="2.9944%" y="197" width="0.0553%" height="15" fill="rgb(249,31,29)" fg:x="1842" fg:w="34"/><text x="3.2444%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (14 samples, 0.02%)</title><rect x="3.0269%" y="181" width="0.0228%" height="15" fill="rgb(225,111,53)" fg:x="1862" fg:w="14"/><text x="3.2769%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (85 samples, 0.14%)</title><rect x="3.0497%" y="197" width="0.1382%" height="15" fill="rgb(238,160,17)" fg:x="1876" fg:w="85"/><text x="3.2997%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (85 samples, 0.14%)</title><rect x="3.0497%" y="181" width="0.1382%" height="15" fill="rgb(214,148,48)" fg:x="1876" fg:w="85"/><text x="3.2997%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (85 samples, 0.14%)</title><rect x="3.0497%" y="165" width="0.1382%" height="15" fill="rgb(232,36,49)" fg:x="1876" fg:w="85"/><text x="3.2997%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (19 samples, 0.03%)</title><rect x="3.1927%" y="197" width="0.0309%" height="15" fill="rgb(209,103,24)" fg:x="1964" fg:w="19"/><text x="3.4427%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::RawValue&gt;&gt;&gt; (900 samples, 1.46%)</title><rect x="1.7687%" y="213" width="1.4631%" height="15" fill="rgb(229,88,8)" fg:x="1088" fg:w="900"/><text x="2.0187%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.03%)</title><rect x="3.2317%" y="197" width="0.0293%" height="15" fill="rgb(213,181,19)" fg:x="1988" fg:w="18"/><text x="3.4817%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;gj::sql::Attribute,alloc::vec::Vec&lt;gj::trie::Value&gt;&gt;&gt; (69 samples, 0.11%)</title><rect x="3.2317%" y="213" width="0.1122%" height="15" fill="rgb(254,191,54)" fg:x="1988" fg:w="69"/><text x="3.4817%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (51 samples, 0.08%)</title><rect x="3.2610%" y="197" width="0.0829%" height="15" fill="rgb(241,83,37)" fg:x="2006" fg:w="51"/><text x="3.5110%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (51 samples, 0.08%)</title><rect x="3.2610%" y="181" width="0.0829%" height="15" fill="rgb(233,36,39)" fg:x="2006" fg:w="51"/><text x="3.5110%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (51 samples, 0.08%)</title><rect x="3.2610%" y="165" width="0.0829%" height="15" fill="rgb(226,3,54)" fg:x="2006" fg:w="51"/><text x="3.5110%" y="175.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (991 samples, 1.61%)</title><rect x="1.7638%" y="229" width="1.6110%" height="15" fill="rgb(245,192,40)" fg:x="1085" fg:w="991"/><text x="2.0138%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (61 samples, 0.10%)</title><rect x="3.3748%" y="229" width="0.0992%" height="15" fill="rgb(238,167,29)" fg:x="2076" fg:w="61"/><text x="3.6248%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$free (26 samples, 0.04%)</title><rect x="3.4739%" y="229" width="0.0423%" height="15" fill="rgb(232,182,51)" fg:x="2137" fg:w="26"/><text x="3.7239%" y="239.50"></text></g><g><title>gj`DYLD-STUB$$malloc (110 samples, 0.18%)</title><rect x="3.5162%" y="229" width="0.1788%" height="15" fill="rgb(231,60,39)" fg:x="2163" fg:w="110"/><text x="3.7662%" y="239.50"></text></g><g><title>gj`__rdl_alloc (17 samples, 0.03%)</title><rect x="3.6950%" y="229" width="0.0276%" height="15" fill="rgb(208,69,12)" fg:x="2273" fg:w="17"/><text x="3.9450%" y="239.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,554 samples, 2.53%)</title><rect x="4.1307%" y="213" width="2.5262%" height="15" fill="rgb(235,93,37)" fg:x="2541" fg:w="1554"/><text x="4.3807%" y="223.50">gj..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (119 samples, 0.19%)</title><rect x="6.4635%" y="197" width="0.1934%" height="15" fill="rgb(213,116,39)" fg:x="3976" fg:w="119"/><text x="6.7135%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (27 samples, 0.04%)</title><rect x="6.6569%" y="213" width="0.0439%" height="15" fill="rgb(222,207,29)" fg:x="4095" fg:w="27"/><text x="6.9069%" y="223.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.02%)</title><rect x="8.1135%" y="197" width="0.0211%" height="15" fill="rgb(206,96,30)" fg:x="4991" fg:w="13"/><text x="8.3635%" y="207.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,378 samples, 2.24%)</title><rect x="8.7783%" y="181" width="2.2401%" height="15" fill="rgb(218,138,4)" fg:x="5400" fg:w="1378"/><text x="9.0283%" y="191.50">g..</text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1,810 samples, 2.94%)</title><rect x="8.1346%" y="197" width="2.9424%" height="15" fill="rgb(250,191,14)" fg:x="5004" fg:w="1810"/><text x="8.3846%" y="207.50">gj..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (36 samples, 0.06%)</title><rect x="11.0185%" y="181" width="0.0585%" height="15" fill="rgb(239,60,40)" fg:x="6778" fg:w="36"/><text x="11.2685%" y="191.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (332 samples, 0.54%)</title><rect x="11.6183%" y="165" width="0.5397%" height="15" fill="rgb(206,27,48)" fg:x="7147" fg:w="332"/><text x="11.8683%" y="175.50"></text></g><g><title>gj`&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (480 samples, 0.78%)</title><rect x="11.4281%" y="181" width="0.7803%" height="15" fill="rgb(225,35,8)" fg:x="7030" fg:w="480"/><text x="11.6781%" y="191.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (31 samples, 0.05%)</title><rect x="12.1580%" y="165" width="0.0504%" height="15" fill="rgb(250,213,24)" fg:x="7479" fg:w="31"/><text x="12.4080%" y="175.50"></text></g><g><title>gj`gj::join::materialize (38 samples, 0.06%)</title><rect x="12.2084%" y="181" width="0.0618%" height="15" fill="rgb(247,123,22)" fg:x="7510" fg:w="38"/><text x="12.4584%" y="191.50"></text></g><g><title>gj`gj::join::materialize (35 samples, 0.06%)</title><rect x="12.2133%" y="165" width="0.0569%" height="15" fill="rgb(231,138,38)" fg:x="7513" fg:w="35"/><text x="12.4633%" y="175.50"></text></g><g><title>gj`gj::join::materialize (23 samples, 0.04%)</title><rect x="12.2328%" y="149" width="0.0374%" height="15" fill="rgb(231,145,46)" fg:x="7525" fg:w="23"/><text x="12.4828%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.04%)</title><rect x="12.2344%" y="133" width="0.0358%" height="15" fill="rgb(251,118,11)" fg:x="7526" fg:w="22"/><text x="12.4844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.03%)</title><rect x="12.2393%" y="117" width="0.0309%" height="15" fill="rgb(217,147,25)" fg:x="7529" fg:w="19"/><text x="12.4893%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (17 samples, 0.03%)</title><rect x="12.2425%" y="101" width="0.0276%" height="15" fill="rgb(247,81,37)" fg:x="7531" fg:w="17"/><text x="12.4925%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="12.2588%" y="85" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="7541" fg:w="7"/><text x="12.5088%" y="95.50"></text></g><g><title>gj`gj::join::singleton_join_inner (9 samples, 0.01%)</title><rect x="12.2702%" y="181" width="0.0146%" height="15" fill="rgb(227,1,9)" fg:x="7548" fg:w="9"/><text x="12.5202%" y="191.50"></text></g><g><title>gj`gj::join::materialize (7 samples, 0.01%)</title><rect x="12.2734%" y="165" width="0.0114%" height="15" fill="rgb(248,47,43)" fg:x="7550" fg:w="7"/><text x="12.5234%" y="175.50"></text></g><g><title>gj`gj::join::singleton_join_inner (760 samples, 1.24%)</title><rect x="11.0770%" y="197" width="1.2355%" height="15" fill="rgb(221,10,30)" fg:x="6814" fg:w="760"/><text x="11.3270%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (17 samples, 0.03%)</title><rect x="12.2848%" y="181" width="0.0276%" height="15" fill="rgb(210,229,1)" fg:x="7557" fg:w="17"/><text x="12.5348%" y="191.50"></text></g><g><title>gj`gj::join::singleton_join_inner (3,530 samples, 5.74%)</title><rect x="6.7008%" y="213" width="5.7384%" height="15" fill="rgb(222,148,37)" fg:x="4122" fg:w="3530"/><text x="6.9508%" y="223.50">gj`gj::..</text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (78 samples, 0.13%)</title><rect x="12.3124%" y="197" width="0.1268%" height="15" fill="rgb(234,67,33)" fg:x="7574" fg:w="78"/><text x="12.5624%" y="207.50"></text></g><g><title>gj`smallvec::SmallVec&lt;A&gt;::reserve (269 samples, 0.44%)</title><rect x="12.4392%" y="213" width="0.4373%" height="15" fill="rgb(247,98,35)" fg:x="7652" fg:w="269"/><text x="12.6892%" y="223.50"></text></g><g><title>gj`gj::join::bushy_join (5,709 samples, 9.28%)</title><rect x="3.7227%" y="229" width="9.2807%" height="15" fill="rgb(247,138,52)" fg:x="2290" fg:w="5709"/><text x="3.9727%" y="239.50">gj`gj::join::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (78 samples, 0.13%)</title><rect x="12.8765%" y="213" width="0.1268%" height="15" fill="rgb(213,79,30)" fg:x="7921" fg:w="78"/><text x="13.1265%" y="223.50"></text></g><g><title>gj`gj::join::singleton_join_inner (63 samples, 0.10%)</title><rect x="13.0033%" y="229" width="0.1024%" height="15" fill="rgb(246,177,23)" fg:x="7999" fg:w="63"/><text x="13.2533%" y="239.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (20 samples, 0.03%)</title><rect x="13.1106%" y="229" width="0.0325%" height="15" fill="rgb(230,62,27)" fg:x="8065" fg:w="20"/><text x="13.3606%" y="239.50"></text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.07%)</title><rect x="13.4959%" y="213" width="0.0650%" height="15" fill="rgb(216,154,8)" fg:x="8302" fg:w="40"/><text x="13.7459%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.01%)</title><rect x="14.4615%" y="117" width="0.0114%" height="15" fill="rgb(244,35,45)" fg:x="8896" fg:w="7"/><text x="14.7115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (49 samples, 0.08%)</title><rect x="14.4062%" y="133" width="0.0797%" height="15" fill="rgb(251,115,12)" fg:x="8862" fg:w="49"/><text x="14.6562%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (8 samples, 0.01%)</title><rect x="14.4729%" y="117" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="8903" fg:w="8"/><text x="14.7229%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (72 samples, 0.12%)</title><rect x="14.3770%" y="165" width="0.1170%" height="15" fill="rgb(233,84,52)" fg:x="8844" fg:w="72"/><text x="14.6270%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.10%)</title><rect x="14.3981%" y="149" width="0.0959%" height="15" fill="rgb(207,117,47)" fg:x="8857" fg:w="59"/><text x="14.6481%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (80 samples, 0.13%)</title><rect x="14.3705%" y="181" width="0.1300%" height="15" fill="rgb(249,43,39)" fg:x="8840" fg:w="80"/><text x="14.6205%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (86 samples, 0.14%)</title><rect x="14.3624%" y="197" width="0.1398%" height="15" fill="rgb(209,38,44)" fg:x="8835" fg:w="86"/><text x="14.6124%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (9 samples, 0.01%)</title><rect x="15.3800%" y="133" width="0.0146%" height="15" fill="rgb(236,212,23)" fg:x="9461" fg:w="9"/><text x="15.6300%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (89 samples, 0.14%)</title><rect x="15.2743%" y="165" width="0.1447%" height="15" fill="rgb(242,79,21)" fg:x="9396" fg:w="89"/><text x="15.5243%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (84 samples, 0.14%)</title><rect x="15.2825%" y="149" width="0.1366%" height="15" fill="rgb(211,96,35)" fg:x="9401" fg:w="84"/><text x="15.5325%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (15 samples, 0.02%)</title><rect x="15.3946%" y="133" width="0.0244%" height="15" fill="rgb(253,215,40)" fg:x="9470" fg:w="15"/><text x="15.6446%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (117 samples, 0.19%)</title><rect x="15.2483%" y="181" width="0.1902%" height="15" fill="rgb(211,81,21)" fg:x="9380" fg:w="117"/><text x="15.4983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="15.4190%" y="165" width="0.0195%" height="15" fill="rgb(208,190,38)" fg:x="9485" fg:w="12"/><text x="15.6690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="15.4206%" y="149" width="0.0179%" height="15" fill="rgb(235,213,38)" fg:x="9486" fg:w="11"/><text x="15.6706%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.01%)</title><rect x="15.4271%" y="133" width="0.0114%" height="15" fill="rgb(237,122,38)" fg:x="9490" fg:w="7"/><text x="15.6771%" y="143.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (583 samples, 0.95%)</title><rect x="14.5054%" y="197" width="0.9477%" height="15" fill="rgb(244,218,35)" fg:x="8923" fg:w="583"/><text x="14.7554%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.02%)</title><rect x="15.4531%" y="197" width="0.0179%" height="15" fill="rgb(240,68,47)" fg:x="9506" fg:w="11"/><text x="15.7031%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (11 samples, 0.02%)</title><rect x="15.4808%" y="197" width="0.0179%" height="15" fill="rgb(210,16,53)" fg:x="9523" fg:w="11"/><text x="15.7308%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.02%)</title><rect x="15.4808%" y="181" width="0.0179%" height="15" fill="rgb(235,124,12)" fg:x="9523" fg:w="11"/><text x="15.7308%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.02%)</title><rect x="15.4808%" y="165" width="0.0179%" height="15" fill="rgb(224,169,11)" fg:x="9523" fg:w="11"/><text x="15.7308%" y="175.50"></text></g><g><title>gj`gj::trie::Trie&lt;T&gt;::insert (1,235 samples, 2.01%)</title><rect x="13.5674%" y="213" width="2.0076%" height="15" fill="rgb(250,166,2)" fg:x="8346" fg:w="1235"/><text x="13.8174%" y="223.50">g..</text></g><g><title>libsystem_platform.dylib`_platform_memset (38 samples, 0.06%)</title><rect x="15.5133%" y="197" width="0.0618%" height="15" fill="rgb(242,216,29)" fg:x="9543" fg:w="38"/><text x="15.7633%" y="207.50"></text></g><g><title>gj`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (220 samples, 0.36%)</title><rect x="15.5751%" y="213" width="0.3576%" height="15" fill="rgb(230,116,27)" fg:x="9581" fg:w="220"/><text x="15.8251%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (16 samples, 0.03%)</title><rect x="16.0432%" y="197" width="0.0260%" height="15" fill="rgb(228,99,48)" fg:x="9869" fg:w="16"/><text x="16.2932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (106 samples, 0.17%)</title><rect x="16.5716%" y="165" width="0.1723%" height="15" fill="rgb(253,11,6)" fg:x="10194" fg:w="106"/><text x="16.8216%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (393 samples, 0.64%)</title><rect x="16.1278%" y="181" width="0.6389%" height="15" fill="rgb(247,143,39)" fg:x="9921" fg:w="393"/><text x="16.3778%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (14 samples, 0.02%)</title><rect x="16.7439%" y="165" width="0.0228%" height="15" fill="rgb(236,97,10)" fg:x="10300" fg:w="14"/><text x="16.9939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (526 samples, 0.86%)</title><rect x="15.9327%" y="213" width="0.8551%" height="15" fill="rgb(233,208,19)" fg:x="9801" fg:w="526"/><text x="16.1827%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (442 samples, 0.72%)</title><rect x="16.0693%" y="197" width="0.7185%" height="15" fill="rgb(216,164,2)" fg:x="9885" fg:w="442"/><text x="16.3193%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.02%)</title><rect x="16.7666%" y="181" width="0.0211%" height="15" fill="rgb(220,129,5)" fg:x="10314" fg:w="13"/><text x="17.0166%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.03%)</title><rect x="16.7878%" y="213" width="0.0341%" height="15" fill="rgb(242,17,10)" fg:x="10327" fg:w="21"/><text x="17.0378%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (63 samples, 0.10%)</title><rect x="17.0186%" y="197" width="0.1024%" height="15" fill="rgb(242,107,0)" fg:x="10469" fg:w="63"/><text x="17.2686%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (187 samples, 0.30%)</title><rect x="16.8219%" y="213" width="0.3040%" height="15" fill="rgb(251,28,31)" fg:x="10348" fg:w="187"/><text x="17.0719%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.02%)</title><rect x="17.1259%" y="213" width="0.0195%" height="15" fill="rgb(233,223,10)" fg:x="10535" fg:w="12"/><text x="17.3759%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (733 samples, 1.19%)</title><rect x="17.1454%" y="213" width="1.1916%" height="15" fill="rgb(215,21,27)" fg:x="10547" fg:w="733"/><text x="17.3954%" y="223.50"></text></g><g><title>gj`gj::util::build_tables (3,211 samples, 5.22%)</title><rect x="13.1431%" y="229" width="5.2199%" height="15" fill="rgb(232,23,21)" fg:x="8085" fg:w="3211"/><text x="13.3931%" y="239.50">gj`gj:..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.02%)</title><rect x="18.3402%" y="213" width="0.0228%" height="15" fill="rgb(244,5,23)" fg:x="11282" fg:w="14"/><text x="18.5902%" y="223.50"></text></g><g><title>gj`gj::util::from_raw (1,203 samples, 1.96%)</title><rect x="18.3630%" y="229" width="1.9556%" height="15" fill="rgb(226,81,46)" fg:x="11296" fg:w="1203"/><text x="18.6130%" y="239.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,203 samples, 1.96%)</title><rect x="18.3630%" y="213" width="1.9556%" height="15" fill="rgb(247,70,30)" fg:x="11296" fg:w="1203"/><text x="18.6130%" y="223.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,203 samples, 1.96%)</title><rect x="18.3630%" y="197" width="1.9556%" height="15" fill="rgb(212,68,19)" fg:x="11296" fg:w="1203"/><text x="18.6130%" y="207.50">g..</text></g><g><title>gj`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,203 samples, 1.96%)</title><rect x="18.3630%" y="181" width="1.9556%" height="15" fill="rgb(240,187,13)" fg:x="11296" fg:w="1203"/><text x="18.6130%" y="191.50">g..</text></g><g><title>gj`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,203 samples, 1.96%)</title><rect x="18.3630%" y="165" width="1.9556%" height="15" fill="rgb(223,113,26)" fg:x="11296" fg:w="1203"/><text x="18.6130%" y="175.50">g..</text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (104 samples, 0.17%)</title><rect x="20.3186%" y="213" width="0.1691%" height="15" fill="rgb(206,192,2)" fg:x="12499" fg:w="104"/><text x="20.5686%" y="223.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.10%)</title><rect x="20.4877%" y="213" width="0.1040%" height="15" fill="rgb(241,108,4)" fg:x="12603" fg:w="64"/><text x="20.7377%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$free (528 samples, 0.86%)</title><rect x="20.5917%" y="213" width="0.8583%" height="15" fill="rgb(247,173,49)" fg:x="12667" fg:w="528"/><text x="20.8417%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$malloc (100 samples, 0.16%)</title><rect x="21.4501%" y="213" width="0.1626%" height="15" fill="rgb(224,114,35)" fg:x="13195" fg:w="100"/><text x="21.7001%" y="223.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (108 samples, 0.18%)</title><rect x="21.6126%" y="213" width="0.1756%" height="15" fill="rgb(245,159,27)" fg:x="13295" fg:w="108"/><text x="21.8626%" y="223.50"></text></g><g><title>gj`__rdl_alloc (133 samples, 0.22%)</title><rect x="21.7882%" y="213" width="0.2162%" height="15" fill="rgb(245,172,44)" fg:x="13403" fg:w="133"/><text x="22.0382%" y="223.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (88 samples, 0.14%)</title><rect x="22.0044%" y="213" width="0.1431%" height="15" fill="rgb(236,23,11)" fg:x="13536" fg:w="88"/><text x="22.2544%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 0.12%)</title><rect x="27.3819%" y="165" width="0.1219%" height="15" fill="rgb(205,117,38)" fg:x="16844" fg:w="75"/><text x="27.6319%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (400 samples, 0.65%)</title><rect x="29.6074%" y="133" width="0.6502%" height="15" fill="rgb(237,72,25)" fg:x="18213" fg:w="400"/><text x="29.8574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,319 samples, 2.14%)</title><rect x="28.1216%" y="149" width="2.1442%" height="15" fill="rgb(244,70,9)" fg:x="17299" fg:w="1319"/><text x="28.3716%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,535 samples, 4.12%)</title><rect x="26.3090%" y="181" width="4.1209%" height="15" fill="rgb(217,125,39)" fg:x="16184" fg:w="2535"/><text x="26.5590%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,800 samples, 2.93%)</title><rect x="27.5039%" y="165" width="2.9261%" height="15" fill="rgb(235,36,10)" fg:x="16919" fg:w="1800"/><text x="27.7539%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (101 samples, 0.16%)</title><rect x="30.2658%" y="149" width="0.1642%" height="15" fill="rgb(251,123,47)" fg:x="18618" fg:w="101"/><text x="30.5158%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (194 samples, 0.32%)</title><rect x="30.4300%" y="181" width="0.3154%" height="15" fill="rgb(221,13,13)" fg:x="18719" fg:w="194"/><text x="30.6800%" y="191.50"></text></g><g><title>gj`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,927 samples, 4.76%)</title><rect x="25.9888%" y="197" width="4.7582%" height="15" fill="rgb(238,131,9)" fg:x="15987" fg:w="2927"/><text x="26.2388%" y="207.50">gj`&lt;al..</text></g><g><title>gj`&lt;parquet::record::api::RowColumnIter as core::iter::traits::iterator::Iterator&gt;::next (879 samples, 1.43%)</title><rect x="30.7470%" y="197" width="1.4289%" height="15" fill="rgb(211,50,8)" fg:x="18914" fg:w="879"/><text x="30.9970%" y="207.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (2,109 samples, 3.43%)</title><rect x="32.1759%" y="197" width="3.4284%" height="15" fill="rgb(245,182,24)" fg:x="19793" fg:w="2109"/><text x="32.4259%" y="207.50">gj`..</text></g><g><title>gj`DYLD-STUB$$malloc (61 samples, 0.10%)</title><rect x="37.5014%" y="149" width="0.0992%" height="15" fill="rgb(242,14,37)" fg:x="23069" fg:w="61"/><text x="37.7514%" y="159.50"></text></g><g><title>gj`__rdl_alloc (52 samples, 0.08%)</title><rect x="37.6006%" y="149" width="0.0845%" height="15" fill="rgb(246,228,12)" fg:x="23130" fg:w="52"/><text x="37.8506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (104 samples, 0.17%)</title><rect x="38.5061%" y="117" width="0.1691%" height="15" fill="rgb(213,55,15)" fg:x="23687" fg:w="104"/><text x="38.7561%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.07%)</title><rect x="38.9060%" y="101" width="0.0748%" height="15" fill="rgb(209,9,3)" fg:x="23933" fg:w="46"/><text x="39.1560%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (292 samples, 0.47%)</title><rect x="39.8992%" y="85" width="0.4747%" height="15" fill="rgb(230,59,30)" fg:x="24544" fg:w="292"/><text x="40.1492%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,603 samples, 2.61%)</title><rect x="38.6751%" y="117" width="2.6059%" height="15" fill="rgb(209,121,21)" fg:x="23791" fg:w="1603"/><text x="38.9251%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,415 samples, 2.30%)</title><rect x="38.9807%" y="101" width="2.3003%" height="15" fill="rgb(220,109,13)" fg:x="23979" fg:w="1415"/><text x="39.2307%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (558 samples, 0.91%)</title><rect x="40.3739%" y="85" width="0.9071%" height="15" fill="rgb(232,18,1)" fg:x="24836" fg:w="558"/><text x="40.6239%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (118 samples, 0.19%)</title><rect x="41.0892%" y="69" width="0.1918%" height="15" fill="rgb(215,41,42)" fg:x="25276" fg:w="118"/><text x="41.3392%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,175 samples, 3.54%)</title><rect x="37.9062%" y="133" width="3.5357%" height="15" fill="rgb(224,123,36)" fg:x="23318" fg:w="2175"/><text x="38.1562%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (99 samples, 0.16%)</title><rect x="41.2810%" y="117" width="0.1609%" height="15" fill="rgb(240,125,3)" fg:x="25394" fg:w="99"/><text x="41.5310%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (83 samples, 0.13%)</title><rect x="41.4419%" y="133" width="0.1349%" height="15" fill="rgb(205,98,50)" fg:x="25493" fg:w="83"/><text x="41.6919%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (53 samples, 0.09%)</title><rect x="41.5769%" y="133" width="0.0862%" height="15" fill="rgb(205,185,37)" fg:x="25576" fg:w="53"/><text x="41.8269%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (2,497 samples, 4.06%)</title><rect x="37.6851%" y="149" width="4.0592%" height="15" fill="rgb(238,207,15)" fg:x="23182" fg:w="2497"/><text x="37.9351%" y="159.50">gj`a..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="41.6630%" y="133" width="0.0813%" height="15" fill="rgb(213,199,42)" fg:x="25629" fg:w="50"/><text x="41.9130%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,796 samples, 4.55%)</title><rect x="37.2364%" y="165" width="4.5452%" height="15" fill="rgb(235,201,11)" fg:x="22906" fg:w="2796"/><text x="37.4864%" y="175.50">gj`al..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.04%)</title><rect x="41.7443%" y="149" width="0.0374%" height="15" fill="rgb(207,46,11)" fg:x="25679" fg:w="23"/><text x="41.9943%" y="159.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (91 samples, 0.15%)</title><rect x="41.7817%" y="165" width="0.1479%" height="15" fill="rgb(241,35,35)" fg:x="25702" fg:w="91"/><text x="42.0317%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::field_name (584 samples, 0.95%)</title><rect x="41.9296%" y="165" width="0.9494%" height="15" fill="rgb(243,32,47)" fg:x="25793" fg:w="584"/><text x="42.1796%" y="175.50"></text></g><g><title>gj`parquet::record::reader::Reader::current_def_level (436 samples, 0.71%)</title><rect x="43.5991%" y="149" width="0.7088%" height="15" fill="rgb(247,202,23)" fg:x="26820" fg:w="436"/><text x="43.8491%" y="159.50"></text></g><g><title>gj`core::str::converts::from_utf8 (19 samples, 0.03%)</title><rect x="45.6376%" y="133" width="0.0309%" height="15" fill="rgb(219,102,11)" fg:x="28074" fg:w="19"/><text x="45.8876%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (20 samples, 0.03%)</title><rect x="45.6978%" y="85" width="0.0325%" height="15" fill="rgb(243,110,44)" fg:x="28111" fg:w="20"/><text x="45.9478%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="45.6799%" y="117" width="0.0520%" height="15" fill="rgb(222,74,54)" fg:x="28100" fg:w="32"/><text x="45.9299%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (25 samples, 0.04%)</title><rect x="45.6913%" y="101" width="0.0406%" height="15" fill="rgb(216,99,12)" fg:x="28107" fg:w="25"/><text x="45.9413%" y="111.50"></text></g><g><title>gj`parquet::record::api::Field::convert_byte_array (41 samples, 0.07%)</title><rect x="45.6685%" y="133" width="0.0667%" height="15" fill="rgb(226,22,26)" fg:x="28093" fg:w="41"/><text x="45.9185%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (930 samples, 1.51%)</title><rect x="44.3079%" y="149" width="1.5118%" height="15" fill="rgb(217,163,10)" fg:x="27256" fg:w="930"/><text x="44.5579%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.08%)</title><rect x="45.7401%" y="133" width="0.0797%" height="15" fill="rgb(213,25,53)" fg:x="28137" fg:w="49"/><text x="45.9901%" y="143.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (63 samples, 0.10%)</title><rect x="46.0262%" y="101" width="0.1024%" height="15" fill="rgb(252,105,26)" fg:x="28313" fg:w="63"/><text x="46.2762%" y="111.50"></text></g><g><title>gj`bytes::bytes::shared_clone (21 samples, 0.03%)</title><rect x="46.0944%" y="85" width="0.0341%" height="15" fill="rgb(220,39,43)" fg:x="28355" fg:w="21"/><text x="46.3444%" y="95.50"></text></g><g><title>gj`&lt;parquet::encodings::decoding::PlainDecoder&lt;T&gt; as parquet::encodings::decoding::Decoder&lt;T&gt;&gt;::get (128 samples, 0.21%)</title><rect x="45.9546%" y="117" width="0.2081%" height="15" fill="rgb(229,68,48)" fg:x="28269" fg:w="128"/><text x="46.2046%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (21 samples, 0.03%)</title><rect x="46.1286%" y="101" width="0.0341%" height="15" fill="rgb(252,8,32)" fg:x="28376" fg:w="21"/><text x="46.3786%" y="111.50"></text></g><g><title>gj`bytes::bytes::Bytes::slice (7 samples, 0.01%)</title><rect x="46.1627%" y="117" width="0.0114%" height="15" fill="rgb(223,20,43)" fg:x="28397" fg:w="7"/><text x="46.4127%" y="127.50"></text></g><g><title>gj`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (187 samples, 0.30%)</title><rect x="45.9530%" y="133" width="0.3040%" height="15" fill="rgb(229,81,49)" fg:x="28268" fg:w="187"/><text x="46.2030%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.08%)</title><rect x="46.1774%" y="117" width="0.0797%" height="15" fill="rgb(236,28,36)" fg:x="28406" fg:w="49"/><text x="46.4274%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (2,100 samples, 3.41%)</title><rect x="42.8790%" y="165" width="3.4138%" height="15" fill="rgb(249,185,26)" fg:x="26377" fg:w="2100"/><text x="43.1290%" y="175.50">gj`..</text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (291 samples, 0.47%)</title><rect x="45.8197%" y="149" width="0.4731%" height="15" fill="rgb(249,174,33)" fg:x="28186" fg:w="291"/><text x="46.0697%" y="159.50"></text></g><g><title>gj`parquet::encodings::rle::RleDecoder::get_batch (22 samples, 0.04%)</title><rect x="46.2570%" y="133" width="0.0358%" height="15" fill="rgb(233,201,37)" fg:x="28455" fg:w="22"/><text x="46.5070%" y="143.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::current_value (75 samples, 0.12%)</title><rect x="46.2928%" y="165" width="0.1219%" height="15" fill="rgb(221,78,26)" fg:x="28477" fg:w="75"/><text x="46.5428%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TripletIter::read_next (184 samples, 0.30%)</title><rect x="46.4147%" y="165" width="0.2991%" height="15" fill="rgb(250,127,30)" fg:x="28552" fg:w="184"/><text x="46.6647%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (222 samples, 0.36%)</title><rect x="46.7138%" y="165" width="0.3609%" height="15" fill="rgb(230,49,44)" fg:x="28736" fg:w="222"/><text x="46.9638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (162 samples, 0.26%)</title><rect x="48.1053%" y="149" width="0.2634%" height="15" fill="rgb(229,67,23)" fg:x="29592" fg:w="162"/><text x="48.3553%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (382 samples, 0.62%)</title><rect x="50.4023%" y="117" width="0.6210%" height="15" fill="rgb(249,83,47)" fg:x="31005" fg:w="382"/><text x="50.6523%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,300 samples, 2.11%)</title><rect x="48.9182%" y="133" width="2.1133%" height="15" fill="rgb(215,43,3)" fg:x="30092" fg:w="1300"/><text x="49.1682%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,589 samples, 4.21%)</title><rect x="47.0747%" y="165" width="4.2087%" height="15" fill="rgb(238,154,13)" fg:x="28958" fg:w="2589"/><text x="47.3247%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,793 samples, 2.91%)</title><rect x="48.3687%" y="149" width="2.9147%" height="15" fill="rgb(219,56,2)" fg:x="29754" fg:w="1793"/><text x="48.6187%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (155 samples, 0.25%)</title><rect x="51.0315%" y="133" width="0.2520%" height="15" fill="rgb(233,0,4)" fg:x="31392" fg:w="155"/><text x="51.2815%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (186 samples, 0.30%)</title><rect x="51.2834%" y="165" width="0.3024%" height="15" fill="rgb(235,30,7)" fg:x="31547" fg:w="186"/><text x="51.5334%" y="175.50"></text></g><g><title>gj`&lt;parquet::record::reader::ReaderIter as core::iter::traits::iterator::Iterator&gt;::next (9,703 samples, 15.77%)</title><rect x="35.8238%" y="181" width="15.7734%" height="15" fill="rgb(250,79,13)" fg:x="22037" fg:w="9703"/><text x="36.0738%" y="191.50">gj`&lt;parquet::record::rea..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.01%)</title><rect x="51.5858%" y="165" width="0.0114%" height="15" fill="rgb(211,146,34)" fg:x="31733" fg:w="7"/><text x="51.8358%" y="175.50"></text></g><g><title>gj`DYLD-STUB$$malloc (110 samples, 0.18%)</title><rect x="51.5972%" y="181" width="0.1788%" height="15" fill="rgb(228,22,38)" fg:x="31740" fg:w="110"/><text x="51.8472%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (73 samples, 0.12%)</title><rect x="51.7760%" y="181" width="0.1187%" height="15" fill="rgb(235,168,5)" fg:x="31850" fg:w="73"/><text x="52.0260%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$memmove (106 samples, 0.17%)</title><rect x="51.8947%" y="181" width="0.1723%" height="15" fill="rgb(221,155,16)" fg:x="31923" fg:w="106"/><text x="52.1447%" y="191.50"></text></g><g><title>gj`__rdl_alloc (140 samples, 0.23%)</title><rect x="52.0670%" y="181" width="0.2276%" height="15" fill="rgb(215,215,53)" fg:x="32029" fg:w="140"/><text x="52.3170%" y="191.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (90 samples, 0.15%)</title><rect x="52.2946%" y="181" width="0.1463%" height="15" fill="rgb(223,4,10)" fg:x="32169" fg:w="90"/><text x="52.5446%" y="191.50"></text></g><g><title>gj`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="52.4425%" y="133" width="0.0406%" height="15" fill="rgb(234,103,6)" fg:x="32260" fg:w="25"/><text x="52.6925%" y="143.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::encodings::decoding::PlainDecoder&lt;parquet::data_type::FloatType&gt;&gt; (25 samples, 0.04%)</title><rect x="52.4425%" y="117" width="0.0406%" height="15" fill="rgb(227,97,0)" fg:x="32260" fg:w="25"/><text x="52.6925%" y="127.50"></text></g><g><title>gj`bytes::bytes::shared_drop (25 samples, 0.04%)</title><rect x="52.4425%" y="101" width="0.0406%" height="15" fill="rgb(234,150,53)" fg:x="32260" fg:w="25"/><text x="52.6925%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (25 samples, 0.04%)</title><rect x="52.4425%" y="85" width="0.0406%" height="15" fill="rgb(228,201,54)" fg:x="32260" fg:w="25"/><text x="52.6925%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.04%)</title><rect x="52.4425%" y="69" width="0.0406%" height="15" fill="rgb(222,22,37)" fg:x="32260" fg:w="25"/><text x="52.6925%" y="79.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (27 samples, 0.04%)</title><rect x="52.4425%" y="181" width="0.0439%" height="15" fill="rgb(237,53,32)" fg:x="32260" fg:w="27"/><text x="52.6925%" y="191.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::reader::Reader&gt; (27 samples, 0.04%)</title><rect x="52.4425%" y="165" width="0.0439%" height="15" fill="rgb(233,25,53)" fg:x="32260" fg:w="27"/><text x="52.6925%" y="175.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;parquet::record::triplet::TripletIter&gt;&gt; (27 samples, 0.04%)</title><rect x="52.4425%" y="149" width="0.0439%" height="15" fill="rgb(210,40,34)" fg:x="32260" fg:w="27"/><text x="52.6925%" y="159.50"></text></g><g><title>gj`snap::decompress::Decoder::decompress (333 samples, 0.54%)</title><rect x="52.4961%" y="69" width="0.5413%" height="15" fill="rgb(241,220,44)" fg:x="32293" fg:w="333"/><text x="52.7461%" y="79.50"></text></g><g><title>gj`&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::decompress (367 samples, 0.60%)</title><rect x="52.4961%" y="85" width="0.5966%" height="15" fill="rgb(235,28,35)" fg:x="32293" fg:w="367"/><text x="52.7461%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (34 samples, 0.06%)</title><rect x="53.0375%" y="69" width="0.0553%" height="15" fill="rgb(210,56,17)" fg:x="32626" fg:w="34"/><text x="53.2875%" y="79.50"></text></g><g><title>gj`parquet::file::serialized_reader::decode_page (390 samples, 0.63%)</title><rect x="52.4961%" y="101" width="0.6340%" height="15" fill="rgb(224,130,29)" fg:x="32293" fg:w="390"/><text x="52.7461%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (18 samples, 0.03%)</title><rect x="53.1009%" y="85" width="0.0293%" height="15" fill="rgb(235,212,8)" fg:x="32665" fg:w="18"/><text x="53.3509%" y="95.50"></text></g><g><title>gj`&lt;thrift::protocol::compact::TCompactInputProtocol&lt;T&gt; as thrift::protocol::TInputProtocol&gt;::read_field_begin (25 samples, 0.04%)</title><rect x="53.1301%" y="85" width="0.0406%" height="15" fill="rgb(223,33,50)" fg:x="32683" fg:w="25"/><text x="53.3801%" y="95.50"></text></g><g><title>gj`std::io::default_read_exact (25 samples, 0.04%)</title><rect x="53.1301%" y="69" width="0.0406%" height="15" fill="rgb(219,149,13)" fg:x="32683" fg:w="25"/><text x="53.3801%" y="79.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (25 samples, 0.04%)</title><rect x="53.1301%" y="53" width="0.0406%" height="15" fill="rgb(250,156,29)" fg:x="32683" fg:w="25"/><text x="53.3801%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (20 samples, 0.03%)</title><rect x="53.1383%" y="37" width="0.0325%" height="15" fill="rgb(216,193,19)" fg:x="32688" fg:w="20"/><text x="53.3883%" y="47.50"></text></g><g><title>gj`parquet_format::parquet_format::PageHeader::read_from_in_protocol (26 samples, 0.04%)</title><rect x="53.1301%" y="101" width="0.0423%" height="15" fill="rgb(216,135,14)" fg:x="32683" fg:w="26"/><text x="53.3801%" y="111.50"></text></g><g><title>gj`&lt;parquet::util::io::FileSource&lt;R&gt; as std::io::Read&gt;::read (119 samples, 0.19%)</title><rect x="53.1724%" y="69" width="0.1934%" height="15" fill="rgb(241,47,5)" fg:x="32709" fg:w="119"/><text x="53.4224%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (118 samples, 0.19%)</title><rect x="53.1740%" y="53" width="0.1918%" height="15" fill="rgb(233,42,35)" fg:x="32710" fg:w="118"/><text x="53.4240%" y="63.50"></text></g><g><title>gj`std::io::default_read_buf (121 samples, 0.20%)</title><rect x="53.1724%" y="85" width="0.1967%" height="15" fill="rgb(231,13,6)" fg:x="32709" fg:w="121"/><text x="53.4224%" y="95.50"></text></g><g><title>gj`std::io::Read::read_to_end (131 samples, 0.21%)</title><rect x="53.1724%" y="101" width="0.2130%" height="15" fill="rgb(207,181,40)" fg:x="32709" fg:w="131"/><text x="53.4224%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (10 samples, 0.02%)</title><rect x="53.3691%" y="85" width="0.0163%" height="15" fill="rgb(254,173,49)" fg:x="32830" fg:w="10"/><text x="53.6191%" y="95.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (555 samples, 0.90%)</title><rect x="52.4864%" y="181" width="0.9022%" height="15" fill="rgb(221,1,38)" fg:x="32287" fg:w="555"/><text x="52.7364%" y="191.50"></text></g><g><title>gj`parquet::record::reader::Reader::advance_columns (555 samples, 0.90%)</title><rect x="52.4864%" y="165" width="0.9022%" height="15" fill="rgb(206,124,46)" fg:x="32287" fg:w="555"/><text x="52.7364%" y="175.50"></text></g><g><title>gj`parquet::record::triplet::TypedTripletIter&lt;T&gt;::read_next (555 samples, 0.90%)</title><rect x="52.4864%" y="149" width="0.9022%" height="15" fill="rgb(249,21,11)" fg:x="32287" fg:w="555"/><text x="52.7364%" y="159.50"></text></g><g><title>gj`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (552 samples, 0.90%)</title><rect x="52.4913%" y="133" width="0.8973%" height="15" fill="rgb(222,201,40)" fg:x="32290" fg:w="552"/><text x="52.7413%" y="143.50"></text></g><g><title>gj`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;T&gt; as parquet::column::page::PageReader&gt;::get_next_page (550 samples, 0.89%)</title><rect x="52.4945%" y="117" width="0.8941%" height="15" fill="rgb(235,61,29)" fg:x="32292" fg:w="550"/><text x="52.7445%" y="127.50"></text></g><g><title>gj`parquet::record::reader::Reader::read_field (212 samples, 0.34%)</title><rect x="53.3902%" y="181" width="0.3446%" height="15" fill="rgb(219,207,3)" fg:x="32843" fg:w="212"/><text x="53.6402%" y="191.50"></text></g><g><title>gj`parquet::record::reader::TreeBuilder::build (8 samples, 0.01%)</title><rect x="53.7349%" y="181" width="0.0130%" height="15" fill="rgb(222,56,46)" fg:x="33055" fg:w="8"/><text x="53.9849%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (149 samples, 0.24%)</title><rect x="53.7479%" y="181" width="0.2422%" height="15" fill="rgb(239,76,54)" fg:x="33063" fg:w="149"/><text x="53.9979%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (19 samples, 0.03%)</title><rect x="53.9901%" y="181" width="0.0309%" height="15" fill="rgb(231,124,27)" fg:x="33212" fg:w="19"/><text x="54.2401%" y="191.50"></text></g><g><title>gj`&lt;parquet::record::reader::RowIter as core::iter::traits::iterator::Iterator&gt;::next (11,999 samples, 19.51%)</title><rect x="35.6043%" y="197" width="19.5058%" height="15" fill="rgb(249,195,6)" fg:x="21902" fg:w="11999"/><text x="35.8543%" y="207.50">gj`&lt;parquet::record::reader::Ro..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (670 samples, 1.09%)</title><rect x="54.0210%" y="181" width="1.0892%" height="15" fill="rgb(237,174,47)" fg:x="33231" fg:w="670"/><text x="54.2710%" y="191.50"></text></g><g><title>gj`DYLD-STUB$$malloc (91 samples, 0.15%)</title><rect x="55.1101%" y="197" width="0.1479%" height="15" fill="rgb(206,201,31)" fg:x="33901" fg:w="91"/><text x="55.3601%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcmp (340 samples, 0.55%)</title><rect x="55.2581%" y="197" width="0.5527%" height="15" fill="rgb(231,57,52)" fg:x="33992" fg:w="340"/><text x="55.5081%" y="207.50"></text></g><g><title>gj`DYLD-STUB$$memcpy (82 samples, 0.13%)</title><rect x="55.8108%" y="197" width="0.1333%" height="15" fill="rgb(248,177,22)" fg:x="34332" fg:w="82"/><text x="56.0608%" y="207.50"></text></g><g><title>gj`__rdl_alloc (102 samples, 0.17%)</title><rect x="55.9441%" y="197" width="0.1658%" height="15" fill="rgb(215,211,37)" fg:x="34414" fg:w="102"/><text x="56.1941%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (18 samples, 0.03%)</title><rect x="56.1099%" y="117" width="0.0293%" height="15" fill="rgb(241,128,51)" fg:x="34516" fg:w="18"/><text x="56.3599%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (18 samples, 0.03%)</title><rect x="56.1099%" y="101" width="0.0293%" height="15" fill="rgb(227,165,31)" fg:x="34516" fg:w="18"/><text x="56.3599%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (12 samples, 0.02%)</title><rect x="56.1392%" y="117" width="0.0195%" height="15" fill="rgb(228,167,24)" fg:x="34534" fg:w="12"/><text x="56.3892%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (12 samples, 0.02%)</title><rect x="56.1392%" y="101" width="0.0195%" height="15" fill="rgb(228,143,12)" fg:x="34534" fg:w="12"/><text x="56.3892%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (12 samples, 0.02%)</title><rect x="56.1392%" y="85" width="0.0195%" height="15" fill="rgb(249,149,8)" fg:x="34534" fg:w="12"/><text x="56.3892%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (39 samples, 0.06%)</title><rect x="56.1099%" y="133" width="0.0634%" height="15" fill="rgb(243,35,44)" fg:x="34516" fg:w="39"/><text x="56.3599%" y="143.50"></text></g><g><title>gj`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (50 samples, 0.08%)</title><rect x="56.1099%" y="197" width="0.0813%" height="15" fill="rgb(246,89,9)" fg:x="34516" fg:w="50"/><text x="56.3599%" y="207.50"></text></g><g><title>gj`alloc::raw_vec::finish_grow (50 samples, 0.08%)</title><rect x="56.1099%" y="181" width="0.0813%" height="15" fill="rgb(233,213,13)" fg:x="34516" fg:w="50"/><text x="56.3599%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (50 samples, 0.08%)</title><rect x="56.1099%" y="165" width="0.0813%" height="15" fill="rgb(233,141,41)" fg:x="34516" fg:w="50"/><text x="56.3599%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (50 samples, 0.08%)</title><rect x="56.1099%" y="149" width="0.0813%" height="15" fill="rgb(239,167,4)" fg:x="34516" fg:w="50"/><text x="56.3599%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.02%)</title><rect x="56.1733%" y="133" width="0.0179%" height="15" fill="rgb(209,217,16)" fg:x="34555" fg:w="11"/><text x="56.4233%" y="143.50"></text></g><g><title>gj`core::hash::BuildHasher::hash_one (366 samples, 0.59%)</title><rect x="56.1912%" y="197" width="0.5950%" height="15" fill="rgb(219,88,35)" fg:x="34566" fg:w="366"/><text x="56.4412%" y="207.50"></text></g><g><title>gj`core::ptr::drop_in_place&lt;parquet::record::api::Field&gt; (216 samples, 0.35%)</title><rect x="56.7861%" y="197" width="0.3511%" height="15" fill="rgb(220,193,23)" fg:x="34932" fg:w="216"/><text x="57.0361%" y="207.50"></text></g><g><title>gj`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,397 samples, 3.90%)</title><rect x="58.2508%" y="181" width="3.8966%" height="15" fill="rgb(230,90,52)" fg:x="35833" fg:w="2397"/><text x="58.5008%" y="191.50">gj`&lt;..</text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4,115 samples, 6.69%)</title><rect x="57.1373%" y="197" width="6.6894%" height="15" fill="rgb(252,106,19)" fg:x="35148" fg:w="4115"/><text x="57.3873%" y="207.50">gj`hashbr..</text></g><g><title>gj`core::hash::BuildHasher::hash_one (1,033 samples, 1.68%)</title><rect x="62.1474%" y="181" width="1.6793%" height="15" fill="rgb(206,74,20)" fg:x="38230" fg:w="1033"/><text x="62.3974%" y="191.50"></text></g><g><title>gj`parquet::file::serialized_reader::SerializedFileReader&lt;R&gt;::new (9 samples, 0.01%)</title><rect x="63.8267%" y="197" width="0.0146%" height="15" fill="rgb(230,138,44)" fg:x="39263" fg:w="9"/><text x="64.0767%" y="207.50"></text></g><g><title>gj`parquet::file::footer::parse_metadata (9 samples, 0.01%)</title><rect x="63.8267%" y="181" width="0.0146%" height="15" fill="rgb(235,182,43)" fg:x="39263" fg:w="9"/><text x="64.0767%" y="191.50"></text></g><g><title>gj`parquet::file::footer::decode_metadata (9 samples, 0.01%)</title><rect x="63.8267%" y="165" width="0.0146%" height="15" fill="rgb(242,16,51)" fg:x="39263" fg:w="9"/><text x="64.0767%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (171 samples, 0.28%)</title><rect x="65.0167%" y="181" width="0.2780%" height="15" fill="rgb(248,9,4)" fg:x="39995" fg:w="171"/><text x="65.2667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (436 samples, 0.71%)</title><rect x="67.2194%" y="149" width="0.7088%" height="15" fill="rgb(210,31,22)" fg:x="41350" fg:w="436"/><text x="67.4694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1,270 samples, 2.06%)</title><rect x="65.8652%" y="165" width="2.0645%" height="15" fill="rgb(239,54,39)" fg:x="40517" fg:w="1270"/><text x="66.1152%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,660 samples, 4.32%)</title><rect x="63.8462%" y="197" width="4.3241%" height="15" fill="rgb(230,99,41)" fg:x="39275" fg:w="2660"/><text x="64.0962%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,769 samples, 2.88%)</title><rect x="65.2946%" y="181" width="2.8757%" height="15" fill="rgb(253,106,12)" fg:x="40166" fg:w="1769"/><text x="65.5446%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (148 samples, 0.24%)</title><rect x="67.9298%" y="165" width="0.2406%" height="15" fill="rgb(213,46,41)" fg:x="41787" fg:w="148"/><text x="68.1798%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (190 samples, 0.31%)</title><rect x="68.1704%" y="197" width="0.3089%" height="15" fill="rgb(215,133,35)" fg:x="41935" fg:w="190"/><text x="68.4204%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2,847 samples, 4.63%)</title><rect x="76.2074%" y="181" width="4.6281%" height="15" fill="rgb(213,28,5)" fg:x="46879" fg:w="2847"/><text x="76.4574%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (62 samples, 0.10%)</title><rect x="80.8356%" y="181" width="0.1008%" height="15" fill="rgb(215,77,49)" fg:x="49726" fg:w="62"/><text x="81.0856%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (8,213 samples, 13.35%)</title><rect x="68.4792%" y="197" width="13.3512%" height="15" fill="rgb(248,100,22)" fg:x="42125" fg:w="8213"/><text x="68.7292%" y="207.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`szone_size (550 samples, 0.89%)</title><rect x="80.9364%" y="181" width="0.8941%" height="15" fill="rgb(208,67,9)" fg:x="49788" fg:w="550"/><text x="81.1864%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (496 samples, 0.81%)</title><rect x="81.0241%" y="165" width="0.8063%" height="15" fill="rgb(219,133,21)" fg:x="49842" fg:w="496"/><text x="81.2741%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (640 samples, 1.04%)</title><rect x="83.3406%" y="165" width="1.0404%" height="15" fill="rgb(246,46,29)" fg:x="51267" fg:w="640"/><text x="83.5906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,612 samples, 2.62%)</title><rect x="81.8304%" y="197" width="2.6205%" height="15" fill="rgb(246,185,52)" fg:x="50338" fg:w="1612"/><text x="82.0804%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,083 samples, 1.76%)</title><rect x="82.6904%" y="181" width="1.7605%" height="15" fill="rgb(252,136,11)" fg:x="50867" fg:w="1083"/><text x="82.9404%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (43 samples, 0.07%)</title><rect x="84.3810%" y="165" width="0.0699%" height="15" fill="rgb(219,138,53)" fg:x="51907" fg:w="43"/><text x="84.6310%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (436 samples, 0.71%)</title><rect x="84.4558%" y="197" width="0.7088%" height="15" fill="rgb(211,51,23)" fg:x="51953" fg:w="436"/><text x="84.7058%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1,791 samples, 2.91%)</title><rect x="85.1646%" y="197" width="2.9115%" height="15" fill="rgb(247,221,28)" fg:x="52389" fg:w="1791"/><text x="85.4146%" y="207.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (34 samples, 0.06%)</title><rect x="88.0761%" y="197" width="0.0553%" height="15" fill="rgb(251,222,45)" fg:x="54180" fg:w="34"/><text x="88.3261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (737 samples, 1.20%)</title><rect x="88.1314%" y="197" width="1.1981%" height="15" fill="rgb(217,162,53)" fg:x="54214" fg:w="737"/><text x="88.3814%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (160 samples, 0.26%)</title><rect x="89.3294%" y="197" width="0.2601%" height="15" fill="rgb(229,93,14)" fg:x="54951" fg:w="160"/><text x="89.5794%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (76 samples, 0.12%)</title><rect x="89.5895%" y="197" width="0.1235%" height="15" fill="rgb(209,67,49)" fg:x="55111" fg:w="76"/><text x="89.8395%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (129 samples, 0.21%)</title><rect x="89.7131%" y="197" width="0.2097%" height="15" fill="rgb(213,87,29)" fg:x="55187" fg:w="129"/><text x="89.9631%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,742 samples, 2.83%)</title><rect x="89.9228%" y="197" width="2.8318%" height="15" fill="rgb(205,151,52)" fg:x="55316" fg:w="1742"/><text x="90.1728%" y="207.50">li..</text></g><g><title>gj`gj::util::from_parquet (43,765 samples, 71.15%)</title><rect x="22.1474%" y="213" width="71.1452%" height="15" fill="rgb(253,215,39)" fg:x="13624" fg:w="43765"/><text x="22.3974%" y="223.50">gj`gj::util::from_parquet</text></g><g><title>libsystem_platform.dylib`_platform_memmove (331 samples, 0.54%)</title><rect x="92.7546%" y="197" width="0.5381%" height="15" fill="rgb(221,220,41)" fg:x="57058" fg:w="331"/><text x="93.0046%" y="207.50"></text></g><g><title>gj`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (424 samples, 0.69%)</title><rect x="93.2927%" y="213" width="0.6893%" height="15" fill="rgb(218,133,21)" fg:x="57389" fg:w="424"/><text x="93.5427%" y="223.50"></text></g><g><title>gj`parquet::record::api::Row::get_column_iter (98 samples, 0.16%)</title><rect x="93.9820%" y="213" width="0.1593%" height="15" fill="rgb(221,193,43)" fg:x="57813" fg:w="98"/><text x="94.2320%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (118 samples, 0.19%)</title><rect x="94.1413%" y="213" width="0.1918%" height="15" fill="rgb(240,128,52)" fg:x="57911" fg:w="118"/><text x="94.3913%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (700 samples, 1.14%)</title><rect x="94.3331%" y="213" width="1.1379%" height="15" fill="rgb(253,114,12)" fg:x="58029" fg:w="700"/><text x="94.5831%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1,095 samples, 1.78%)</title><rect x="95.4710%" y="213" width="1.7801%" height="15" fill="rgb(215,223,47)" fg:x="58729" fg:w="1095"/><text x="95.7210%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (44 samples, 0.07%)</title><rect x="97.2511%" y="213" width="0.0715%" height="15" fill="rgb(248,225,23)" fg:x="59824" fg:w="44"/><text x="97.5011%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (640 samples, 1.04%)</title><rect x="97.3275%" y="213" width="1.0404%" height="15" fill="rgb(250,108,0)" fg:x="59871" fg:w="640"/><text x="97.5775%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (546 samples, 0.89%)</title><rect x="98.3679%" y="213" width="0.8876%" height="15" fill="rgb(228,208,7)" fg:x="60511" fg:w="546"/><text x="98.6179%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (42 samples, 0.07%)</title><rect x="99.2555%" y="213" width="0.0683%" height="15" fill="rgb(244,45,10)" fg:x="61057" fg:w="42"/><text x="99.5055%" y="223.50"></text></g><g><title>gj`gj::util::load_db (48,879 samples, 79.46%)</title><rect x="20.3186%" y="229" width="79.4587%" height="15" fill="rgb(207,125,25)" fg:x="12499" fg:w="48879"/><text x="20.5686%" y="239.50">gj`gj::util::load_db</text></g><g><title>libsystem_platform.dylib`_platform_memmove (279 samples, 0.45%)</title><rect x="99.3237%" y="213" width="0.4535%" height="15" fill="rgb(210,195,18)" fg:x="61099" fg:w="279"/><text x="99.5737%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.05%)</title><rect x="99.7773%" y="229" width="0.0520%" height="15" fill="rgb(249,80,12)" fg:x="61378" fg:w="32"/><text x="100.0273%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (24 samples, 0.04%)</title><rect x="99.8293%" y="229" width="0.0390%" height="15" fill="rgb(221,65,9)" fg:x="61410" fg:w="24"/><text x="100.0793%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.05%)</title><rect x="99.8683%" y="229" width="0.0471%" height="15" fill="rgb(235,49,36)" fg:x="61434" fg:w="29"/><text x="100.1183%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (20 samples, 0.03%)</title><rect x="99.9155%" y="229" width="0.0325%" height="15" fill="rgb(225,32,20)" fg:x="61463" fg:w="20"/><text x="100.1655%" y="239.50"></text></g><g><title>gj`gj::main (61,496 samples, 99.97%)</title><rect x="0.0016%" y="245" width="99.9691%" height="15" fill="rgb(215,141,46)" fg:x="1" fg:w="61496"/><text x="0.2516%" y="255.50">gj`gj::main</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (14 samples, 0.02%)</title><rect x="99.9480%" y="229" width="0.0228%" height="15" fill="rgb(250,160,47)" fg:x="61483" fg:w="14"/><text x="100.1980%" y="239.50"></text></g><g><title>dyld`start (61,504 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9821%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="61504"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>gj`main (61,504 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9821%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="61504"/><text x="0.2500%" y="319.50">gj`main</text></g><g><title>gj`std::rt::lang_start_internal (61,503 samples, 99.98%)</title><rect x="0.0016%" y="293" width="99.9805%" height="15" fill="rgb(207,178,40)" fg:x="1" fg:w="61503"/><text x="0.2516%" y="303.50">gj`std::rt::lang_start_internal</text></g><g><title>gj`std::rt::lang_start::_{{closure}} (61,503 samples, 99.98%)</title><rect x="0.0016%" y="277" width="99.9805%" height="15" fill="rgb(221,136,13)" fg:x="1" fg:w="61503"/><text x="0.2516%" y="287.50">gj`std::rt::lang_start::_{{closure}}</text></g><g><title>gj`std::sys_common::backtrace::__rust_begin_short_backtrace (61,503 samples, 99.98%)</title><rect x="0.0016%" y="261" width="99.9805%" height="15" fill="rgb(249,199,10)" fg:x="1" fg:w="61503"/><text x="0.2516%" y="271.50">gj`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.01%)</title><rect x="99.9707%" y="245" width="0.0114%" height="15" fill="rgb(249,222,13)" fg:x="61497" fg:w="7"/><text x="100.2207%" y="255.50"></text></g><g><title>all (61,515 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="61515"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__exit (11 samples, 0.02%)</title><rect x="99.9821%" y="325" width="0.0179%" height="15" fill="rgb(236,202,9)" fg:x="61504" fg:w="11"/><text x="100.2321%" y="335.50"></text></g></svg></svg>